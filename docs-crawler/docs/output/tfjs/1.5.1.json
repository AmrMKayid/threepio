{
    "tensor": {
        "code": "tf.tensor(values,shape?,dtype?)",
        "function_name": "tensor",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": "dtype",
                "tf": null
            }
        ]
    },
    "scalar": {
        "code": "tf.scalar(value,dtype?)",
        "function_name": "scalar",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "tensord": {
        "code": "tf.tensor6d(values,shape?,dtype?)",
        "function_name": "tensor6d",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "buffer": {
        "code": "buffer()",
        "function_name": "buffer",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "clone": {
        "code": "clone()",
        "function_name": "clone",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "complex": {
        "code": "tf.complex(real,imag)",
        "function_name": "complex",
        "args": [
            {
                "name": "real",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "real"
            },
            {
                "name": "imag",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "imag"
            }
        ]
    },
    "eye": {
        "code": "tf.eye(numRows,numColumns?,batchShape?,dtype?)",
        "function_name": "eye",
        "args": [
            {
                "name": "numrows",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "numrows"
            },
            {
                "name": "numcolumns",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "numcolumns"
            },
            {
                "name": "batchshape",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "batchshape"
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": "dtype",
                "tf": "dtype"
            }
        ]
    },
    "fill": {
        "code": "tf.fill(shape,value,dtype?)",
        "function_name": "fill",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "value"
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "imag": {
        "code": "tf.imag(input)",
        "function_name": "imag",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "input"
            }
        ]
    },
    "linspace": {
        "code": "tf.linspace(start,stop,num)",
        "function_name": "linspace",
        "args": [
            {
                "name": "start",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "start",
                "tf": "start"
            },
            {
                "name": "stop",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "stop"
            },
            {
                "name": "num",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "num"
            }
        ]
    },
    "onehot": {
        "code": "tf.oneHot(indices,depth,onValue?,offValue?)",
        "function_name": "oneHot",
        "args": [
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "indices"
            },
            {
                "name": "depth",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "depth"
            },
            {
                "name": "onvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "onvalue"
            },
            {
                "name": "offvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "offvalue"
            }
        ]
    },
    "ones": {
        "code": "tf.initializers.ones()",
        "function_name": "ones",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "oneslike": {
        "code": "tf.onesLike(x)",
        "function_name": "onesLike",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "print": {
        "code": "print(verbose?)",
        "function_name": "print",
        "args": [
            {
                "name": "verbose",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "range": {
        "code": "tf.range(start,stop,step?,dtype?)",
        "function_name": "range",
        "args": [
            {
                "name": "start",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "start",
                "tf": null
            },
            {
                "name": "stop",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "step",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": "step",
                "tf": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": "dtype",
                "tf": "dtype"
            }
        ]
    },
    "real": {
        "code": "tf.real(input)",
        "function_name": "real",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "input"
            }
        ]
    },
    "truncatednormal": {
        "code": "tf.initializers.truncatedNormal(args)",
        "function_name": "truncatedNormal",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "variable": {
        "code": "tf.variable(initialValue,trainable?,name?,dtype?)",
        "function_name": "variable",
        "args": [
            {
                "name": "initialvalue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "trainable",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "name",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "name"
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "dtype"
            }
        ]
    },
    "zeros": {
        "code": "tf.initializers.zeros()",
        "function_name": "zeros",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "zeroslike": {
        "code": "tf.zerosLike(x)",
        "function_name": "zerosLike",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "flatten": {
        "code": "tf.util.flatten(arr,result?,skipTypedArray?)",
        "function_name": "flatten",
        "args": [
            {
                "name": "arr",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "result",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "skiptypedarray",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "asscalar": {
        "code": "asScalar()",
        "function_name": "asScalar",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "asd": {
        "code": "as5D(rows,columns,depth,depth2,depth3)",
        "function_name": "as5D",
        "args": [
            {
                "name": "rows",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "columns",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "depth",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "depth",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "depth",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "astype": {
        "code": "asType(dtype)",
        "function_name": "asType",
        "args": [
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "buffersync": {
        "code": "bufferSync()",
        "function_name": "bufferSync",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "array": {
        "code": "tf.data.array(items)",
        "function_name": "array",
        "args": [
            {
                "name": "items",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "arraysync": {
        "code": "arraySync()",
        "function_name": "arraySync",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "data": {
        "code": "data()",
        "function_name": "data",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "datasync": {
        "code": "dataSync()",
        "function_name": "dataSync",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "dispose": {
        "code": "tf.dispose(container)",
        "function_name": "dispose",
        "args": [
            {
                "name": "container",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "tofloat": {
        "code": "toFloat()",
        "function_name": "toFloat",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "toint": {
        "code": "toInt()",
        "function_name": "toInt",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "tobool": {
        "code": "toBool()",
        "function_name": "toBool",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "reshape": {
        "code": "tf.layers.reshape(args)",
        "function_name": "reshape",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "reshapeas": {
        "code": "reshapeAs(x)",
        "function_name": "reshapeAs",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "expanddims": {
        "code": "tf.expandDims(x,axis?)",
        "function_name": "expandDims",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "cumsum": {
        "code": "tf.cumsum(x,axis?,exclusive?,reverse?)",
        "function_name": "cumsum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "exclusive",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "reverse",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "squeeze": {
        "code": "tf.squeeze(x,axis?)",
        "function_name": "squeeze",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "tostring": {
        "code": "toString(verbose?)",
        "function_name": "toString",
        "args": [
            {
                "name": "verbose",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "assign": {
        "code": "assign(newValue)",
        "function_name": "assign",
        "args": [
            {
                "name": "newvalue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "set": {
        "code": "set(value,...locs)",
        "function_name": "set",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "locs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "get": {
        "code": "get(...locs)",
        "function_name": "get",
        "args": [
            {
                "name": "locs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "totensor": {
        "code": "toTensor()",
        "function_name": "toTensor",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "batchtospacend": {
        "code": "tf.batchToSpaceND(x,blockShape,crops)",
        "function_name": "batchToSpaceND",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "blockshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "crops",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "broadcastto": {
        "code": "tf.broadcastTo(x,shape)",
        "function_name": "broadcastTo",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "shape"
            }
        ]
    },
    "cast": {
        "code": "tf.cast(x,dtype)",
        "function_name": "cast",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "dtype"
            }
        ]
    },
    "depthtospace": {
        "code": "tf.depthToSpace(x,blockSize,dataFormat?)",
        "function_name": "depthToSpace",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "blocksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "blocksize"
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "dataformat"
            }
        ]
    },
    "pad": {
        "code": "tf.pad(x,paddings,constantValue?)",
        "function_name": "pad",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "paddings",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "paddings"
            },
            {
                "name": "constantvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "setdiffdasync": {
        "code": "tf.setdiff1dAsync(x,y)",
        "function_name": "setdiff1dAsync",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "spacetobatchnd": {
        "code": "tf.spaceToBatchND(x,blockShape,paddings)",
        "function_name": "spaceToBatchND",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "blockshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "blockshape"
            },
            {
                "name": "paddings",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "paddings"
            }
        ]
    },
    "booleanmaskasync": {
        "code": "tf.booleanMaskAsync(tensor,mask,axis?)",
        "function_name": "booleanMaskAsync",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "mask",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "concat": {
        "code": "tf.concat(tensors,axis?)",
        "function_name": "concat",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "gather": {
        "code": "tf.gather(x,indices,axis?)",
        "function_name": "gather",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "indices"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "reverse": {
        "code": "tf.reverse(x,axis?)",
        "function_name": "reverse",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "slice": {
        "code": "tf.slice(x,begin,size?)",
        "function_name": "slice",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "begin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "begin"
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "size"
            }
        ]
    },
    "split": {
        "code": "tf.split(x,numOrSizeSplits,axis?)",
        "function_name": "split",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "numorsizesplits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "numorsizesplits"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "stack": {
        "code": "tf.stack(tensors,axis?)",
        "function_name": "stack",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "tensors",
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "tile": {
        "code": "tf.tile(x,reps)",
        "function_name": "tile",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "reps",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "unstack": {
        "code": "tf.unstack(x,axis?)",
        "function_name": "unstack",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "multinomial": {
        "code": "tf.multinomial(logits,numSamples,seed?,normalized?)",
        "function_name": "multinomial",
        "args": [
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "numsamples",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": "numsamples",
                "tf": null
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "normalized",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "randomgamma": {
        "code": "tf.randomGamma(shape,alpha,beta?,dtype?,seed?)",
        "function_name": "randomGamma",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "alpha",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "randomnormal": {
        "code": "tf.initializers.randomNormal(args)",
        "function_name": "randomNormal",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "randomuniform": {
        "code": "tf.initializers.randomUniform(args)",
        "function_name": "randomUniform",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "sequential": {
        "code": "tf.sequential(config?)",
        "function_name": "sequential",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "model": {
        "code": "tf.model(args)",
        "function_name": "model",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "input": {
        "code": "tf.input(config)",
        "function_name": "input",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "loadgraphmodel": {
        "code": "tf.loadGraphModel(modelUrl,options?)",
        "function_name": "loadGraphModel",
        "args": [
            {
                "name": "modelurl",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "options",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "loadlayersmodel": {
        "code": "tf.loadLayersModel(pathOrIOHandler,options?)",
        "function_name": "loadLayersModel",
        "args": [
            {
                "name": "pathoriohandler",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "options",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "browserdownloads": {
        "code": "tf.io.browserDownloads(fileNamePrefix?)",
        "function_name": "browserDownloads",
        "args": [
            {
                "name": "filenameprefix",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "browserfiles": {
        "code": "tf.io.browserFiles(files)",
        "function_name": "browserFiles",
        "args": [
            {
                "name": "files",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "http": {
        "code": "tf.io.http(path,loadOptions?)",
        "function_name": "http",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "loadoptions",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "copymodel": {
        "code": "tf.io.copyModel(sourceURL,destURL)",
        "function_name": "copyModel",
        "args": [
            {
                "name": "sourceurl",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "desturl",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "listmodels": {
        "code": "tf.io.listModels()",
        "function_name": "listModels",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "movemodel": {
        "code": "tf.io.moveModel(sourceURL,destURL)",
        "function_name": "moveModel",
        "args": [
            {
                "name": "sourceurl",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "desturl",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "removemodel": {
        "code": "tf.io.removeModel(url)",
        "function_name": "removeModel",
        "args": [
            {
                "name": "url",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "registerclass": {
        "code": "tf.registerClass(cls)",
        "function_name": "registerClass",
        "args": [
            {
                "name": "cls",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "predict": {
        "code": "predict(x,args?)",
        "function_name": "predict",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "execute": {
        "code": "execute(inputs,outputs?)",
        "function_name": "execute",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "outputs",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "executeasync": {
        "code": "executeAsync(inputs,outputs?)",
        "function_name": "executeAsync",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "outputs",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "summary": {
        "code": "summary(lineLength?,positions?,printFn?)",
        "function_name": "summary",
        "args": [
            {
                "name": "linelength",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "positions",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "printfn",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "compile": {
        "code": "compile(args)",
        "function_name": "compile",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "evaluate": {
        "code": "evaluate(x,y,args?)",
        "function_name": "evaluate",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "evaluatedataset": {
        "code": "evaluateDataset(dataset,args)",
        "function_name": "evaluateDataset",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "predictonbatch": {
        "code": "predictOnBatch(x)",
        "function_name": "predictOnBatch",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "fit": {
        "code": "fit(x,y,args?)",
        "function_name": "fit",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "fitdataset": {
        "code": "fitDataset(dataset,args)",
        "function_name": "fitDataset",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "trainonbatch": {
        "code": "trainOnBatch(x,y)",
        "function_name": "trainOnBatch",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "save": {
        "code": "save(handlerOrURL,config?)",
        "function_name": "save",
        "args": [
            {
                "name": "handlerorurl",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "config",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "getlayer": {
        "code": "getLayer(name?,index?)",
        "function_name": "getLayer",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "index",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "add": {
        "code": "tf.add(a,b)",
        "function_name": "add",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "deregisterop": {
        "code": "tf.deregisterOp(name)",
        "function_name": "deregisterOp",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "getregisteredop": {
        "code": "tf.getRegisteredOp(name)",
        "function_name": "getRegisteredOp",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "registerop": {
        "code": "tf.registerOp(name,opFunc)",
        "function_name": "registerOp",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "opfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "elu": {
        "code": "tf.elu(x)",
        "function_name": "elu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "leakyrelu": {
        "code": "tf.leakyRelu(x,alpha?)",
        "function_name": "leakyRelu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "alpha",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "alpha"
            }
        ]
    },
    "prelu": {
        "code": "tf.prelu(x,alpha)",
        "function_name": "prelu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "alpha",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "relu": {
        "code": "tf.relu6(x)",
        "function_name": "relu6",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "softmax": {
        "code": "tf.softmax(logits,dim?)",
        "function_name": "softmax",
        "args": [
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "dim",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "thresholdedrelu": {
        "code": "tf.layers.thresholdedReLU(args?)",
        "function_name": "thresholdedReLU",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "activation": {
        "code": "tf.layers.activation(args)",
        "function_name": "activation",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "dense": {
        "code": "tf.layers.dense(args)",
        "function_name": "dense",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "dropout": {
        "code": "tf.dropout(x,rate,noiseShape?,seed?)",
        "function_name": "dropout",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "rate",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "noiseshape",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "noiseshape"
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "seed"
            }
        ]
    },
    "embedding": {
        "code": "tf.layers.embedding(args)",
        "function_name": "embedding",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "permute": {
        "code": "tf.layers.permute(args)",
        "function_name": "permute",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "repeatvector": {
        "code": "tf.layers.repeatVector(args)",
        "function_name": "repeatVector",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "spatialdropoutd": {
        "code": "tf.layers.spatialDropout1d(args)",
        "function_name": "spatialDropout1d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "convd": {
        "code": "tf.conv3d(x,filter,strides,pad,dataFormat?,dilations?)",
        "function_name": "conv3d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "filter",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "dataformat"
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": null
            }
        ]
    },
    "convdtranspose": {
        "code": "tf.conv3dTranspose(x,filter,outputShape,strides,pad)",
        "function_name": "conv3dTranspose",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "filter",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "outputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "outputshape"
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "croppingd": {
        "code": "tf.layers.cropping2D(args)",
        "function_name": "cropping2D",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "depthwiseconvd": {
        "code": "tf.depthwiseConv2d(x,filter,strides,pad,dataFormat?,dilations?,dimRoundingMode?)",
        "function_name": "depthwiseConv2d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "filter",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "dataformat"
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": null
            },
            {
                "name": "dimroundingmode",
                "is_kwarg": false,
                "optional": true,
                "index": 6,
                "torch": null,
                "tf": null
            }
        ]
    },
    "separableconvd": {
        "code": "tf.separableConv2d(x,depthwiseFilter,pointwiseFilter,strides,pad,dilation?,dataFormat?)",
        "function_name": "separableConv2d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "depthwisefilter",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "pointwisefilter",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "dilation",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": true,
                "index": 6,
                "torch": null,
                "tf": "dataformat"
            }
        ]
    },
    "upsamplingd": {
        "code": "tf.layers.upSampling2d(args)",
        "function_name": "upSampling2d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "average": {
        "code": "tf.layers.average(args?)",
        "function_name": "average",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "concatenate": {
        "code": "concatenate(dataset)",
        "function_name": "concatenate",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "dot": {
        "code": "tf.dot(t1,t2)",
        "function_name": "dot",
        "args": [
            {
                "name": "t",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "t",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "maximum": {
        "code": "tf.maximum(a,b)",
        "function_name": "maximum",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "minimum": {
        "code": "tf.minimum(a,b)",
        "function_name": "minimum",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "multiply": {
        "code": "tf.layers.multiply(args?)",
        "function_name": "multiply",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "batchnormalization": {
        "code": "tf.layers.batchNormalization(args?)",
        "function_name": "batchNormalization",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "layernormalization": {
        "code": "tf.layers.layerNormalization(args?)",
        "function_name": "layerNormalization",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "averagepoolingd": {
        "code": "tf.layers.averagePooling3d(args)",
        "function_name": "averagePooling3d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "globalaveragepoolingd": {
        "code": "tf.layers.globalAveragePooling2d(args)",
        "function_name": "globalAveragePooling2d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "globalmaxpoolingd": {
        "code": "tf.layers.globalMaxPooling2d(args)",
        "function_name": "globalMaxPooling2d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "maxpoolingd": {
        "code": "tf.layers.maxPooling3d(args)",
        "function_name": "maxPooling3d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "gru": {
        "code": "tf.layers.gru(args)",
        "function_name": "gru",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "grucell": {
        "code": "tf.layers.gruCell(args)",
        "function_name": "gruCell",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "lstm": {
        "code": "tf.layers.lstm(args)",
        "function_name": "lstm",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "lstmcell": {
        "code": "tf.layers.lstmCell(args)",
        "function_name": "lstmCell",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "rnn": {
        "code": "tf.layers.rnn(args)",
        "function_name": "rnn",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "simplernn": {
        "code": "tf.layers.simpleRNN(args)",
        "function_name": "simpleRNN",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "simplernncell": {
        "code": "tf.layers.simpleRNNCell(args)",
        "function_name": "simpleRNNCell",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "stackedrnncells": {
        "code": "tf.layers.stackedRNNCells(args)",
        "function_name": "stackedRNNCells",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "bidirectional": {
        "code": "tf.layers.bidirectional(args)",
        "function_name": "bidirectional",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "timedistributed": {
        "code": "tf.layers.timeDistributed(args)",
        "function_name": "timeDistributed",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "apply": {
        "code": "apply(inputs,kwargs?)",
        "function_name": "apply",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "countparams": {
        "code": "countParams()",
        "function_name": "countParams",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "build": {
        "code": "build(inputShape)",
        "function_name": "build",
        "args": [
            {
                "name": "inputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "getweights": {
        "code": "getWeights(trainableOnly?)",
        "function_name": "getWeights",
        "args": [
            {
                "name": "trainableonly",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "setweights": {
        "code": "setWeights(weights)",
        "function_name": "setWeights",
        "args": [
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "addweight": {
        "code": "addWeight(name,shape,dtype?,initializer?,regularizer?,trainable?,constraint?)",
        "function_name": "addWeight",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "initializer",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "regularizer",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "trainable",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": null
            },
            {
                "name": "constraint",
                "is_kwarg": false,
                "optional": true,
                "index": 6,
                "torch": null,
                "tf": null
            }
        ]
    },
    "addloss": {
        "code": "addLoss(losses)",
        "function_name": "addLoss",
        "args": [
            {
                "name": "losses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "computeoutputshape": {
        "code": "computeOutputShape(inputShape)",
        "function_name": "computeOutputShape",
        "args": [
            {
                "name": "inputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "getconfig": {
        "code": "getConfig()",
        "function_name": "getConfig",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "inputlayer": {
        "code": "tf.layers.inputLayer(args)",
        "function_name": "inputLayer",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "zeropaddingd": {
        "code": "tf.layers.zeroPadding2d(args?)",
        "function_name": "zeroPadding2d",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "alphadropout": {
        "code": "tf.layers.alphaDropout(args)",
        "function_name": "alphaDropout",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "gaussiandropout": {
        "code": "tf.layers.gaussianDropout(args)",
        "function_name": "gaussianDropout",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "gaussiannoise": {
        "code": "tf.layers.gaussianNoise(args)",
        "function_name": "gaussianNoise",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "masking": {
        "code": "tf.layers.masking(args?)",
        "function_name": "masking",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "sub": {
        "code": "tf.sub(a,b)",
        "function_name": "sub",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "mul": {
        "code": "tf.mul(a,b)",
        "function_name": "mul",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "div": {
        "code": "tf.div(a,b)",
        "function_name": "div",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "addn": {
        "code": "tf.addN(tensors)",
        "function_name": "addN",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "divnonan": {
        "code": "tf.divNoNan(a,b)",
        "function_name": "divNoNan",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "floordiv": {
        "code": "tf.floorDiv(a,b)",
        "function_name": "floorDiv",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "mod": {
        "code": "tf.mod(a,b)",
        "function_name": "mod",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "pow": {
        "code": "tf.pow(base,exp)",
        "function_name": "pow",
        "args": [
            {
                "name": "base",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "exp",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "squareddifference": {
        "code": "tf.squaredDifference(a,b)",
        "function_name": "squaredDifference",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "abs": {
        "code": "tf.abs(x)",
        "function_name": "abs",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "acos": {
        "code": "tf.acos(x)",
        "function_name": "acos",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "acosh": {
        "code": "tf.acosh(x)",
        "function_name": "acosh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "asin": {
        "code": "tf.asin(x)",
        "function_name": "asin",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "asinh": {
        "code": "tf.asinh(x)",
        "function_name": "asinh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "atan": {
        "code": "tf.atan2(a,b)",
        "function_name": "atan2",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "atanh": {
        "code": "tf.atanh(x)",
        "function_name": "atanh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "ceil": {
        "code": "tf.ceil(x)",
        "function_name": "ceil",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "clipbyvalue": {
        "code": "tf.clipByValue(x,clipValueMin,clipValueMax)",
        "function_name": "clipByValue",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "clipvaluemin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "clipvaluemin"
            },
            {
                "name": "clipvaluemax",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "clipvaluemax"
            }
        ]
    },
    "cos": {
        "code": "tf.cos(x)",
        "function_name": "cos",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "cosh": {
        "code": "tf.cosh(x)",
        "function_name": "cosh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "erf": {
        "code": "tf.erf(x)",
        "function_name": "erf",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "exp": {
        "code": "tf.exp(x)",
        "function_name": "exp",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "expm": {
        "code": "tf.expm1(x)",
        "function_name": "expm1",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "floor": {
        "code": "tf.floor(x)",
        "function_name": "floor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "isfinite": {
        "code": "tf.isFinite(x)",
        "function_name": "isFinite",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "isinf": {
        "code": "tf.isInf(x)",
        "function_name": "isInf",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "isnan": {
        "code": "tf.isNaN(x)",
        "function_name": "isNaN",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "log": {
        "code": "tf.log(x)",
        "function_name": "log",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "logp": {
        "code": "tf.log1p(x)",
        "function_name": "log1p",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "logsigmoid": {
        "code": "tf.logSigmoid(x)",
        "function_name": "logSigmoid",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "neg": {
        "code": "tf.neg(x)",
        "function_name": "neg",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "reciprocal": {
        "code": "tf.reciprocal(x)",
        "function_name": "reciprocal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "round": {
        "code": "tf.round(x)",
        "function_name": "round",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "rsqrt": {
        "code": "tf.rsqrt(x)",
        "function_name": "rsqrt",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "selu": {
        "code": "tf.selu(x)",
        "function_name": "selu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "sigmoid": {
        "code": "tf.sigmoid(x)",
        "function_name": "sigmoid",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "sign": {
        "code": "tf.sign(x)",
        "function_name": "sign",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "sin": {
        "code": "tf.sin(x)",
        "function_name": "sin",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "sinh": {
        "code": "tf.sinh(x)",
        "function_name": "sinh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "softplus": {
        "code": "tf.softplus(x)",
        "function_name": "softplus",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "sqrt": {
        "code": "tf.sqrt(x)",
        "function_name": "sqrt",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "square": {
        "code": "tf.square(x)",
        "function_name": "square",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "step": {
        "code": "tf.step(x,alpha?)",
        "function_name": "step",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "alpha",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "tan": {
        "code": "tf.tan(x)",
        "function_name": "tan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "tanh": {
        "code": "tf.tanh(x)",
        "function_name": "tanh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "matmul": {
        "code": "tf.matMul(a,b,transposeA?,transposeB?)",
        "function_name": "matMul",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "a"
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "b"
            },
            {
                "name": "transposea",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "transposea"
            },
            {
                "name": "transposeb",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "transposeb"
            }
        ]
    },
    "norm": {
        "code": "tf.norm(x,ord?,axis?,keepDims?)",
        "function_name": "norm",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ord",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "ord"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "outerproduct": {
        "code": "tf.outerProduct(v1,v2)",
        "function_name": "outerProduct",
        "args": [
            {
                "name": "v",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "v",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "transpose": {
        "code": "tf.transpose(x,perm?)",
        "function_name": "transpose",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "perm",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "perm"
            }
        ]
    },
    "avgpool": {
        "code": "tf.avgPool(x,filterSize,strides,pad,dimRoundingMode?)",
        "function_name": "avgPool",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "filtersize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dimroundingmode",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "avgpoold": {
        "code": "tf.avgPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)",
        "function_name": "avgPool3d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "filtersize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dimroundingmode",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": "dataformat"
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": true,
                "index": 6,
                "torch": null,
                "tf": null
            }
        ]
    },
    "maxpool": {
        "code": "tf.maxPool(x,filterSize,strides,pad,dimRoundingMode?)",
        "function_name": "maxPool",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "filtersize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dimroundingmode",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "maxpoold": {
        "code": "tf.maxPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)",
        "function_name": "maxPool3d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "filtersize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dimroundingmode",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": "dataformat"
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": true,
                "index": 6,
                "torch": null,
                "tf": null
            }
        ]
    },
    "pool": {
        "code": "tf.pool(input,windowShape,poolingType,pad,dilations?,strides?)",
        "function_name": "pool",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "input"
            },
            {
                "name": "windowshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "windowshape"
            },
            {
                "name": "poolingtype",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "poolingtype"
            },
            {
                "name": "pad",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "dilations"
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": "strides"
            }
        ]
    },
    "all": {
        "code": "tf.all(x,axis?,keepDims?)",
        "function_name": "all",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "any": {
        "code": "tf.any(x,axis?,keepDims?)",
        "function_name": "any",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "argmax": {
        "code": "tf.argMax(x,axis?)",
        "function_name": "argMax",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "argmin": {
        "code": "tf.argMin(x,axis?)",
        "function_name": "argMin",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "logsumexp": {
        "code": "tf.logSumExp(x,axis?,keepDims?)",
        "function_name": "logSumExp",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "max": {
        "code": "tf.max(x,axis?,keepDims?)",
        "function_name": "max",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "mean": {
        "code": "tf.mean(x,axis?,keepDims?)",
        "function_name": "mean",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "min": {
        "code": "tf.min(x,axis?,keepDims?)",
        "function_name": "min",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "prod": {
        "code": "tf.prod(x,axis?,keepDims?)",
        "function_name": "prod",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "sum": {
        "code": "tf.sum(x,axis?,keepDims?)",
        "function_name": "sum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "batchnorm": {
        "code": "tf.batchNorm(x,mean,variance,offset?,scale?,varianceEpsilon?)",
        "function_name": "batchNorm",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "mean",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "variance",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "offset",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "scale",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "varianceepsilon",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": null
            }
        ]
    },
    "localresponsenormalization": {
        "code": "tf.localResponseNormalization(x,depthRadius?,bias?,alpha?,beta?)",
        "function_name": "localResponseNormalization",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "depthradius",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "depthradius"
            },
            {
                "name": "bias",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "bias"
            },
            {
                "name": "alpha",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "alpha"
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "beta"
            }
        ]
    },
    "logsoftmax": {
        "code": "tf.logSoftmax(logits,axis?)",
        "function_name": "logSoftmax",
        "args": [
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "logits"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "axis"
            }
        ]
    },
    "moments": {
        "code": "tf.moments(x,axis?,keepDims?)",
        "function_name": "moments",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "keepdims",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "keepdims"
            }
        ]
    },
    "sparsetodense": {
        "code": "tf.sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue?)",
        "function_name": "sparseToDense",
        "args": [
            {
                "name": "sparseindices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "sparsevalues",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "outputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "cropandresize": {
        "code": "tf.image.cropAndResize(image,boxes,boxInd,cropSize,?,extrapolationValue?)",
        "function_name": "cropAndResize",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "image"
            },
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "boxes"
            },
            {
                "name": "boxind",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "cropsize",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": "cropsize"
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "extrapolationvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": "extrapolationvalue"
            }
        ]
    },
    "nonmaxsuppression": {
        "code": "tf.image.nonMaxSuppression(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?)",
        "function_name": "nonMaxSuppression",
        "args": [
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "boxes"
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "scores"
            },
            {
                "name": "maxoutputsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "maxoutputsize"
            },
            {
                "name": "iouthreshold",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "iouthreshold"
            },
            {
                "name": "scorethreshold",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "scorethreshold"
            }
        ]
    },
    "nonmaxsuppressionwithscore": {
        "code": "tf.image.nonMaxSuppressionWithScore(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?,softNmsSigma?)",
        "function_name": "nonMaxSuppressionWithScore",
        "args": [
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "maxoutputsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "iouthreshold",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "scorethreshold",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "softnmssigma",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": null
            }
        ]
    },
    "resizebilinear": {
        "code": "tf.image.resizeBilinear(images,size,alignCorners?)",
        "function_name": "resizeBilinear",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "aligncorners",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "resizenearestneighbor": {
        "code": "tf.image.resizeNearestNeighbor(images,size,alignCorners?)",
        "function_name": "resizeNearestNeighbor",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "aligncorners",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "basiclstmcell": {
        "code": "tf.basicLSTMCell(forgetBias,lstmKernel,lstmBias,data,c,h)",
        "function_name": "basicLSTMCell",
        "args": [
            {
                "name": "forgetbias",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "lstmkernel",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "lstmbias",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "c",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tf": null
            },
            {
                "name": "h",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tf": null
            }
        ]
    },
    "multirnncell": {
        "code": "tf.multiRNNCell(lstmCells,data,c,h)",
        "function_name": "multiRNNCell",
        "args": [
            {
                "name": "lstmcells",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "c",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "h",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "equal": {
        "code": "tf.equal(a,b)",
        "function_name": "equal",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "greater": {
        "code": "tf.greater(a,b)",
        "function_name": "greater",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "greaterequal": {
        "code": "tf.greaterEqual(a,b)",
        "function_name": "greaterEqual",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "less": {
        "code": "tf.less(a,b)",
        "function_name": "less",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "lessequal": {
        "code": "tf.lessEqual(a,b)",
        "function_name": "lessEqual",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "logicaland": {
        "code": "tf.logicalAnd(a,b)",
        "function_name": "logicalAnd",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "logicalnot": {
        "code": "tf.logicalNot(x)",
        "function_name": "logicalNot",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "x"
            }
        ]
    },
    "logicalor": {
        "code": "tf.logicalOr(a,b)",
        "function_name": "logicalOr",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "logicalxor": {
        "code": "tf.logicalXor(a,b)",
        "function_name": "logicalXor",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "notequal": {
        "code": "tf.notEqual(a,b)",
        "function_name": "notEqual",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "where": {
        "code": "tf.where(condition,a,b)",
        "function_name": "where",
        "args": [
            {
                "name": "condition",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "condition",
                "tf": "condition"
            },
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "whereasync": {
        "code": "tf.whereAsync(condition)",
        "function_name": "whereAsync",
        "args": [
            {
                "name": "condition",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "unsortedsegmentsum": {
        "code": "tf.unsortedSegmentSum(x,segmentIds,numSegments)",
        "function_name": "unsortedSegmentSum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "segmentids"
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "numsegments"
            }
        ]
    },
    "movingaverage": {
        "code": "tf.movingAverage(v,x,decay,step?,zeroDebias?)",
        "function_name": "movingAverage",
        "args": [
            {
                "name": "v",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "decay",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "step",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "zerodebias",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "gathernd": {
        "code": "tf.gatherND(x,indices)",
        "function_name": "gatherND",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "indices"
            }
        ]
    },
    "scatternd": {
        "code": "tf.scatterND(indices,updates,shape)",
        "function_name": "scatterND",
        "args": [
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "indices"
            },
            {
                "name": "updates",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "updates"
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "shape"
            }
        ]
    },
    "stridedslice": {
        "code": "tf.stridedSlice(x,begin,end,strides?,beginMask?,endMask?,ellipsisMask?,newAxisMask?,shrinkAxisMask?)",
        "function_name": "stridedSlice",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "begin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "begin"
            },
            {
                "name": "end",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "end"
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "strides"
            },
            {
                "name": "beginmask",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "beginmask"
            },
            {
                "name": "endmask",
                "is_kwarg": false,
                "optional": true,
                "index": 5,
                "torch": null,
                "tf": "endmask"
            },
            {
                "name": "ellipsismask",
                "is_kwarg": false,
                "optional": true,
                "index": 6,
                "torch": null,
                "tf": "ellipsismask"
            },
            {
                "name": "newaxismask",
                "is_kwarg": false,
                "optional": true,
                "index": 7,
                "torch": null,
                "tf": "newaxismask"
            },
            {
                "name": "shrinkaxismask",
                "is_kwarg": false,
                "optional": true,
                "index": 8,
                "torch": null,
                "tf": "shrinkaxismask"
            }
        ]
    },
    "confusionmatrix": {
        "code": "tf.confusionMatrix(labels,predictions,numClasses)",
        "function_name": "confusionMatrix",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "labels"
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "predictions"
            },
            {
                "name": "numclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "numclasses"
            }
        ]
    },
    "intopkasync": {
        "code": "tf.inTopKAsync(predictions,targets,k?)",
        "function_name": "inTopKAsync",
        "args": [
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "targets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "k",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "topk": {
        "code": "tf.topk(x,k?,sorted?)",
        "function_name": "topk",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "k",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "k"
            },
            {
                "name": "sorted",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": "sorted"
            }
        ]
    },
    "fft": {
        "code": "tf.spectral.fft(input)",
        "function_name": "fft",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "input"
            }
        ]
    },
    "ifft": {
        "code": "tf.spectral.ifft(input)",
        "function_name": "ifft",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "input"
            }
        ]
    },
    "irfft": {
        "code": "tf.spectral.irfft(input)",
        "function_name": "irfft",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "rfft": {
        "code": "tf.spectral.rfft(input,fftLength?)",
        "function_name": "rfft",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "fftlength",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "fftlength"
            }
        ]
    },
    "frame": {
        "code": "tf.signal.frame(signal,frameLength,frameStep,padEnd?,padValue?)",
        "function_name": "frame",
        "args": [
            {
                "name": "signal",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "signal"
            },
            {
                "name": "framelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "framelength"
            },
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "framestep"
            },
            {
                "name": "padend",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "padend"
            },
            {
                "name": "padvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "padvalue"
            }
        ]
    },
    "hammingwindow": {
        "code": "tf.signal.hammingWindow(windowLength)",
        "function_name": "hammingWindow",
        "args": [
            {
                "name": "windowlength",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "windowlength"
            }
        ]
    },
    "hannwindow": {
        "code": "tf.signal.hannWindow(windowLength)",
        "function_name": "hannWindow",
        "args": [
            {
                "name": "windowlength",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "windowlength"
            }
        ]
    },
    "stft": {
        "code": "tf.signal.stft(signal,frameLength,frameStep,fftLength?,windowFn?)",
        "function_name": "stft",
        "args": [
            {
                "name": "signal",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "framelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "framelength"
            },
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "framestep"
            },
            {
                "name": "fftlength",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": "fftlength"
            },
            {
                "name": "windowfn",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": "windowfn"
            }
        ]
    },
    "bandpart": {
        "code": "tf.linalg.bandPart(a,numLower,numUpper)",
        "function_name": "bandPart",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "numlower",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "numlower"
            },
            {
                "name": "numupper",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": "numupper"
            }
        ]
    },
    "gramschmidt": {
        "code": "tf.linalg.gramSchmidt(xs)",
        "function_name": "gramSchmidt",
        "args": [
            {
                "name": "xs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "qr": {
        "code": "tf.linalg.qr(x,fullMatrices?)",
        "function_name": "qr",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "fullmatrices",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": "fullmatrices"
            }
        ]
    },
    "grad": {
        "code": "tf.grad(f)",
        "function_name": "grad",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "grads": {
        "code": "tf.grads(f)",
        "function_name": "grads",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "customgrad": {
        "code": "tf.customGrad(f)",
        "function_name": "customGrad",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "valueandgrad": {
        "code": "tf.valueAndGrad(f)",
        "function_name": "valueAndGrad",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "valueandgrads": {
        "code": "tf.valueAndGrads(f)",
        "function_name": "valueAndGrads",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "variablegrads": {
        "code": "tf.variableGrads(f,varList?)",
        "function_name": "variableGrads",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "varlist",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "sgd": {
        "code": "tf.train.sgd(learningRate)",
        "function_name": "sgd",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "momentum": {
        "code": "tf.train.momentum(learningRate,momentum,useNesterov?)",
        "function_name": "momentum",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "momentum",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "usenesterov",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "adagrad": {
        "code": "tf.train.adagrad(learningRate,initialAccumulatorValue?)",
        "function_name": "adagrad",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "initialaccumulatorvalue",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "adadelta": {
        "code": "tf.train.adadelta(learningRate?,rho?,epsilon?)",
        "function_name": "adadelta",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "rho",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "epsilon",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "adam": {
        "code": "tf.train.adam(learningRate?,beta1?,beta2?,epsilon?)",
        "function_name": "adam",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "epsilon",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "adamax": {
        "code": "tf.train.adamax(learningRate?,beta1?,beta2?,epsilon?,decay?)",
        "function_name": "adamax",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "epsilon",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "decay",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "rmsprop": {
        "code": "tf.train.rmsprop(learningRate,decay?,momentum?,epsilon?,centered?)",
        "function_name": "rmsprop",
        "args": [
            {
                "name": "learningrate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "decay",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "momentum",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "epsilon",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "centered",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "absolutedifference": {
        "code": "tf.losses.absoluteDifference(labels,predictions,weights?,reduction?)",
        "function_name": "absoluteDifference",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "computeweightedloss": {
        "code": "tf.losses.computeWeightedLoss(losses,weights?,reduction?)",
        "function_name": "computeWeightedLoss",
        "args": [
            {
                "name": "losses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "cosinedistance": {
        "code": "tf.losses.cosineDistance(labels,predictions,axis,weights?,reduction?)",
        "function_name": "cosineDistance",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "hingeloss": {
        "code": "tf.losses.hingeLoss(labels,predictions,weights?,reduction?)",
        "function_name": "hingeLoss",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            }
        ]
    },
    "huberloss": {
        "code": "tf.losses.huberLoss(labels,predictions,weights?,delta?,reduction?)",
        "function_name": "huberLoss",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "delta",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "logloss": {
        "code": "tf.losses.logLoss(labels,predictions,weights?,epsilon?,reduction?)",
        "function_name": "logLoss",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "epsilon",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "meansquarederror": {
        "code": "tf.metrics.meanSquaredError(yTrue,yPred)",
        "function_name": "meanSquaredError",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "sigmoidcrossentropy": {
        "code": "tf.losses.sigmoidCrossEntropy(multiClassLabels,logits,weights?,labelSmoothing?,reduction?)",
        "function_name": "sigmoidCrossEntropy",
        "args": [
            {
                "name": "multiclasslabels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "labelsmoothing",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "softmaxcrossentropy": {
        "code": "tf.losses.softmaxCrossEntropy(onehotLabels,logits,weights?,labelSmoothing?,reduction?)",
        "function_name": "softmaxCrossEntropy",
        "args": [
            {
                "name": "onehotlabels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            },
            {
                "name": "labelsmoothing",
                "is_kwarg": false,
                "optional": true,
                "index": 3,
                "torch": null,
                "tf": null
            },
            {
                "name": "reduction",
                "is_kwarg": false,
                "optional": true,
                "index": 4,
                "torch": null,
                "tf": null
            }
        ]
    },
    "minimize": {
        "code": "minimize(f,returnCost?,varList?)",
        "function_name": "minimize",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "returncost",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "varlist",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "tidy": {
        "code": "tf.tidy(nameOrFn,fn?)",
        "function_name": "tidy",
        "args": [
            {
                "name": "nameorfn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "fn",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "keep": {
        "code": "tf.keep(result)",
        "function_name": "keep",
        "args": [
            {
                "name": "result",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "memory": {
        "code": "tf.memory()",
        "function_name": "memory",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "time": {
        "code": "tf.time(f)",
        "function_name": "time",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "nextframe": {
        "code": "tf.nextFrame()",
        "function_name": "nextFrame",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "profile": {
        "code": "tf.profile(f)",
        "function_name": "profile",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "disposevariables": {
        "code": "tf.disposeVariables()",
        "function_name": "disposeVariables",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "enabledebugmode": {
        "code": "tf.enableDebugMode()",
        "function_name": "enableDebugMode",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "enableprodmode": {
        "code": "tf.enableProdMode()",
        "function_name": "enableProdMode",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "engine": {
        "code": "tf.engine()",
        "function_name": "engine",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "env": {
        "code": "tf.env()",
        "function_name": "env",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "forcehalffloat": {
        "code": "tf.webgl.forceHalfFloat()",
        "function_name": "forceHalfFloat",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "maxnorm": {
        "code": "tf.constraints.maxNorm(args)",
        "function_name": "maxNorm",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "minmaxnorm": {
        "code": "tf.constraints.minMaxNorm(config)",
        "function_name": "minMaxNorm",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "nonneg": {
        "code": "tf.constraints.nonNeg()",
        "function_name": "nonNeg",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "unitnorm": {
        "code": "tf.constraints.unitNorm(args)",
        "function_name": "unitNorm",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "constant": {
        "code": "tf.initializers.constant(args)",
        "function_name": "constant",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "glorotnormal": {
        "code": "tf.initializers.glorotNormal(args)",
        "function_name": "glorotNormal",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "glorotuniform": {
        "code": "tf.initializers.glorotUniform(args)",
        "function_name": "glorotUniform",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "henormal": {
        "code": "tf.initializers.heNormal(args)",
        "function_name": "heNormal",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "heuniform": {
        "code": "tf.initializers.heUniform(args)",
        "function_name": "heUniform",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "identity": {
        "code": "tf.initializers.identity(args)",
        "function_name": "identity",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "lecunnormal": {
        "code": "tf.initializers.leCunNormal(args)",
        "function_name": "leCunNormal",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "lecununiform": {
        "code": "tf.initializers.leCunUniform(args)",
        "function_name": "leCunUniform",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "orthogonal": {
        "code": "tf.initializers.orthogonal(args)",
        "function_name": "orthogonal",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "variancescaling": {
        "code": "tf.initializers.varianceScaling(config)",
        "function_name": "varianceScaling",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "l": {
        "code": "tf.regularizers.l2(config?)",
        "function_name": "l2",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "ll": {
        "code": "tf.regularizers.l1l2(config?)",
        "function_name": "l1l2",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "csv": {
        "code": "tf.data.csv(source,csvConfig?)",
        "function_name": "csv",
        "args": [
            {
                "name": "source",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "csvconfig",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "generator": {
        "code": "tf.data.generator(generator)",
        "function_name": "generator",
        "args": [
            {
                "name": "generator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "microphone": {
        "code": "tf.data.microphone(microphoneConfig?)",
        "function_name": "microphone",
        "args": [
            {
                "name": "microphoneconfig",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "webcam": {
        "code": "tf.data.webcam(webcamVideoElement?,webcamConfig?)",
        "function_name": "webcam",
        "args": [
            {
                "name": "webcamvideoelement",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "webcamconfig",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "zip": {
        "code": "tf.data.zip(datasets)",
        "function_name": "zip",
        "args": [
            {
                "name": "datasets",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "columnnames": {
        "code": "columnNames()",
        "function_name": "columnNames",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "batch": {
        "code": "batch(batchSize,smallLastBatch?)",
        "function_name": "batch",
        "args": [
            {
                "name": "batchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "smalllastbatch",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "filter": {
        "code": "filter(predicate)",
        "function_name": "filter",
        "args": [
            {
                "name": "predicate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "foreachasync": {
        "code": "forEachAsync(f)",
        "function_name": "forEachAsync",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "map": {
        "code": "map(transform)",
        "function_name": "map",
        "args": [
            {
                "name": "transform",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "mapasync": {
        "code": "mapAsync(transform)",
        "function_name": "mapAsync",
        "args": [
            {
                "name": "transform",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "prefetch": {
        "code": "prefetch(bufferSize)",
        "function_name": "prefetch",
        "args": [
            {
                "name": "buffersize",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "repeat": {
        "code": "repeat(count?)",
        "function_name": "repeat",
        "args": [
            {
                "name": "count",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "skip": {
        "code": "skip(count)",
        "function_name": "skip",
        "args": [
            {
                "name": "count",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "shuffle": {
        "code": "tf.util.shuffle(array)",
        "function_name": "shuffle",
        "args": [
            {
                "name": "array",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "take": {
        "code": "take(count)",
        "function_name": "take",
        "args": [
            {
                "name": "count",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "toarray": {
        "code": "toArray()",
        "function_name": "toArray",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "assert": {
        "code": "tf.util.assert(expr,msg)",
        "function_name": "assert",
        "args": [
            {
                "name": "expr",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "msg",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "createshuffledindices": {
        "code": "tf.util.createShuffledIndices(n)",
        "function_name": "createShuffledIndices",
        "args": [
            {
                "name": "n",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "decodestring": {
        "code": "tf.decodeString(bytes,encoding?)",
        "function_name": "decodeString",
        "args": [
            {
                "name": "bytes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "encoding",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "encodestring": {
        "code": "tf.encodeString(s,encoding?)",
        "function_name": "encodeString",
        "args": [
            {
                "name": "s",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "encoding",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "fetch": {
        "code": "tf.fetch(path,requestInits?)",
        "function_name": "fetch",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "requestinits",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "now": {
        "code": "tf.util.now()",
        "function_name": "now",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "sizefromshape": {
        "code": "tf.util.sizeFromShape(shape)",
        "function_name": "sizeFromShape",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "backend": {
        "code": "tf.backend()",
        "function_name": "backend",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": ""
            }
        ]
    },
    "getbackend": {
        "code": "tf.getBackend()",
        "function_name": "getBackend",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "ready": {
        "code": "tf.ready()",
        "function_name": "ready",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "registerbackend": {
        "code": "tf.registerBackend(name,factory,priority?)",
        "function_name": "registerBackend",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "factory",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            },
            {
                "name": "priority",
                "is_kwarg": false,
                "optional": true,
                "index": 2,
                "torch": null,
                "tf": null
            }
        ]
    },
    "removebackend": {
        "code": "tf.removeBackend(name)",
        "function_name": "removeBackend",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "setbackend": {
        "code": "tf.setBackend(backendName)",
        "function_name": "setBackend",
        "args": [
            {
                "name": "backendname",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    },
    "frompixels": {
        "code": "tf.browser.fromPixels(pixels,numChannels?)",
        "function_name": "fromPixels",
        "args": [
            {
                "name": "pixels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "numchannels",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "topixels": {
        "code": "tf.browser.toPixels(img,canvas?)",
        "function_name": "toPixels",
        "args": [
            {
                "name": "img",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "canvas",
                "is_kwarg": false,
                "optional": true,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "binaryaccuracy": {
        "code": "tf.metrics.binaryAccuracy(yTrue,yPred)",
        "function_name": "binaryAccuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "ytrue"
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "ypred"
            }
        ]
    },
    "binarycrossentropy": {
        "code": "tf.metrics.binaryCrossentropy(yTrue,yPred)",
        "function_name": "binaryCrossentropy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "categoricalaccuracy": {
        "code": "tf.metrics.categoricalAccuracy(yTrue,yPred)",
        "function_name": "categoricalAccuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "ytrue"
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "ypred"
            }
        ]
    },
    "categoricalcrossentropy": {
        "code": "tf.metrics.categoricalCrossentropy(yTrue,yPred)",
        "function_name": "categoricalCrossentropy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "cosineproximity": {
        "code": "tf.metrics.cosineProximity(yTrue,yPred)",
        "function_name": "cosineProximity",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "meanabsoluteerror": {
        "code": "tf.metrics.meanAbsoluteError(yTrue,yPred)",
        "function_name": "meanAbsoluteError",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "meanabsolutepercentageerror": {
        "code": "tf.metrics.meanAbsolutePercentageError(yTrue,yPred)",
        "function_name": "meanAbsolutePercentageError",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "precision": {
        "code": "tf.metrics.precision(yTrue,yPred)",
        "function_name": "precision",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "recall": {
        "code": "tf.metrics.recall(yTrue,yPred)",
        "function_name": "recall",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": null
            }
        ]
    },
    "sparsecategoricalaccuracy": {
        "code": "tf.metrics.sparseCategoricalAccuracy(yTrue,yPred)",
        "function_name": "sparseCategoricalAccuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tf": "ytrue"
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tf": "ypred"
            }
        ]
    },
    "earlystopping": {
        "code": "tf.callbacks.earlyStopping(args?)",
        "function_name": "earlyStopping",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": true,
                "index": 0,
                "torch": null,
                "tf": null
            }
        ]
    }
}