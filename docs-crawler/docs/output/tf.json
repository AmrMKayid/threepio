{"code": "tf.guarantee_const(input,name=None)", "function_name": "guarantee_const", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.grad_pass_through(f)", "function_name": "grad_pass_through", "args": ["f"], "kwargs": []}
{"code": "tf.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)", "function_name": "histogram_fixed_width", "args": ["values", "value_range"], "kwargs": [["nbins", "100"], ["dtype", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.identity(input,name=None)", "function_name": "identity", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.identity_n(input,name=None)", "function_name": "identity_n", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)", "function_name": "histogram_fixed_width_bins", "args": ["values", "value_range"], "kwargs": [["nbins", "100"], ["dtype", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.group(*inputs,**kwargs)", "function_name": "group", "args": ["*inputs", "**kwargs"], "kwargs": []}
{"code": "tf.gradients(ys,xs,grad_ys=None,name='gradients',gate_gradients=False,aggregation_method=None,stop_gradients=None,unconnected_gradients=tf.UnconnectedGradients.NONE)", "function_name": "gradients", "args": ["ys", "xs"], "kwargs": [["grad_ys", "None"], ["name", "'gradients'"], ["gate_gradients", "False"], ["aggregation_method", "None"], ["stop_gradients", "None"], ["unconnected_gradients", "tf.UnconnectedGradients.NONE"]]}
{"code": "tf.get_static_value(tensor,partial=False)", "function_name": "get_static_value", "args": ["tensor"], "kwargs": [["partial", "False"]]}
{"code": "tf.xla.experimental.jit_scope(*args,**kwds)", "function_name": "jit_scope", "args": ["*args", "**kwds"], "kwargs": []}
{"code": "tf.gather_nd(params,indices,batch_dims=0,name=None)", "function_name": "gather_nd", "args": ["params", "indices"], "kwargs": [["batch_dims", "0"], ["name", "None"]]}
{"code": "tf.xla.experimental.compile(computation,inputs=None)", "function_name": "compile", "args": ["computation"], "kwargs": [["inputs", "None"]]}
{"code": "tf.train.experimental.enable_mixed_precision_graph_rewrite(opt,loss_scale='dynamic')", "function_name": "enable_mixed_precision_graph_rewrite", "args": ["opt"], "kwargs": [["loss_scale", "'dynamic'"]]}
{"code": "tf.train.experimental.disable_mixed_precision_graph_rewrite()", "function_name": "disable_mixed_precision_graph_rewrite", "args": [""], "kwargs": []}
{"code": "tf.train.load_variable(ckpt_dir_or_file,name)", "function_name": "load_variable", "args": ["ckpt_dir_or_file", "name"], "kwargs": []}
{"code": "tf.train.load_checkpoint(ckpt_dir_or_file)", "function_name": "load_checkpoint", "args": ["ckpt_dir_or_file"], "kwargs": []}
{"code": "tf.train.latest_checkpoint(checkpoint_dir,latest_filename=None)", "function_name": "latest_checkpoint", "args": ["checkpoint_dir"], "kwargs": [["latest_filename", "None"]]}
{"code": "tf.train.list_variables(ckpt_dir_or_file)", "function_name": "list_variables", "args": ["ckpt_dir_or_file"], "kwargs": []}
{"code": "tf.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)", "function_name": "get_checkpoint_state", "args": ["checkpoint_dir"], "kwargs": [["latest_filename", "None"]]}
{"code": "tf.train.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)", "function_name": "checkpoints_iterator", "args": ["checkpoint_dir"], "kwargs": [["min_interval_secs", "0"], ["timeout", "None"], ["timeout_fn", "None"]]}
{"code": "tf.tpu.experimental.initialize_tpu_system(cluster_resolver=None)", "function_name": "initialize_tpu_system", "args": [], "kwargs": [["cluster_resolver", "None"]]}
{"code": "tf.tpu.experimental.shutdown_tpu_system(cluster_resolver=None)", "function_name": "shutdown_tpu_system", "args": [], "kwargs": [["cluster_resolver", "None"]]}
{"code": "tf.test.main(argv=None)", "function_name": "main", "args": [], "kwargs": [["argv", "None"]]}
{"code": "tf.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)", "function_name": "is_gpu_available", "args": [], "kwargs": [["cuda_only", "False"], ["min_cuda_compute_capability", "None"]]}
{"code": "tf.test.is_built_with_cuda()", "function_name": "is_built_with_cuda", "args": [""], "kwargs": []}
{"code": "tf.test.is_built_with_rocm()", "function_name": "is_built_with_rocm", "args": [""], "kwargs": []}
{"code": "tf.test.gpu_device_name()", "function_name": "gpu_device_name", "args": [""], "kwargs": []}
{"code": "tf.sysconfig.get_link_flags()", "function_name": "get_link_flags", "args": [""], "kwargs": []}
{"code": "tf.test.is_built_with_gpu_support()", "function_name": "is_built_with_gpu_support", "args": [""], "kwargs": []}
{"code": "tf.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)", "function_name": "create_local_cluster", "args": ["num_workers", "num_ps"], "kwargs": [["protocol", "'grpc'"], ["worker_config", "None"], ["ps_config", "None"]]}
{"code": "tf.test.benchmark_config()", "function_name": "benchmark_config", "args": [""], "kwargs": []}
{"code": "tf.test.assert_equal_graph_def(expected,actual)", "function_name": "assert_equal_graph_def", "args": ["expected", "actual"], "kwargs": []}
{"code": "tf.test.compute_gradient(f,x,delta=0.001)", "function_name": "compute_gradient", "args": ["f", "x"], "kwargs": [["delta", "0.001"]]}
{"code": "tf.sysconfig.get_lib()", "function_name": "get_lib", "args": [""], "kwargs": []}
{"code": "tf.sysconfig.get_include()", "function_name": "get_include", "args": [""], "kwargs": []}
{"code": "tf.sysconfig.get_compile_flags()", "function_name": "get_compile_flags", "args": [""], "kwargs": []}
{"code": "tf.summary.experimental.write_raw_pb(tensor,step=None,name=None)", "function_name": "write_raw_pb", "args": ["tensor"], "kwargs": [["step", "None"], ["name", "None"]]}
{"code": "tf.summary.experimental.summary_scope(name,default_name='summary',values=None)", "function_name": "summary_scope", "args": ["name"], "kwargs": [["default_name", "'summary'"], ["values", "None"]]}
{"code": "tf.summary.experimental.set_step(step)", "function_name": "set_step", "args": ["step"], "kwargs": []}
{"code": "tf.summary.write(tag,tensor,step=None,metadata=None,name=None)", "function_name": "write", "args": ["tag", "tensor"], "kwargs": [["step", "None"], ["metadata", "None"], ["name", "None"]]}
{"code": "tf.summary.trace_on(graph=True,profiler=False)", "function_name": "trace_on", "args": [], "kwargs": [["graph", "True"], ["profiler", "False"]]}
{"code": "tf.summary.trace_export(name,step=None,profiler_outdir=None)", "function_name": "trace_export", "args": ["name"], "kwargs": [["step", "None"], ["profiler_outdir", "None"]]}
{"code": "as_default()", "function_name": "as_default", "args": [""], "kwargs": []}
{"code": "tf.summary.trace_off()", "function_name": "trace_off", "args": [""], "kwargs": []}
{"code": "tf.summary.experimental.get_step()", "function_name": "get_step", "args": [""], "kwargs": []}
{"code": "tf.summary.text(name,data,step=None,description=None)", "function_name": "text", "args": ["name", "data"], "kwargs": [["step", "None"], ["description", "None"]]}
{"code": "tf.summary.flush(writer=None,name=None)", "function_name": "flush", "args": [], "kwargs": [["writer", "None"], ["name", "None"]]}
{"code": "tf.summary.scalar(name,data,step=None,description=None)", "function_name": "scalar", "args": ["name", "data"], "kwargs": [["step", "None"], ["description", "None"]]}
{"code": "tf.summary.histogram(name,data,step=None,buckets=None,description=None)", "function_name": "histogram", "args": ["name", "data"], "kwargs": [["step", "None"], ["buckets", "None"], ["description", "None"]]}
{"code": "tf.summary.image(name,data,step=None,max_outputs=3,description=None)", "function_name": "image", "args": ["name", "data"], "kwargs": [["step", "None"], ["max_outputs", "3"], ["description", "None"]]}
{"code": "tf.summary.record_if(condition)", "function_name": "record_if", "args": ["condition"], "kwargs": []}
{"code": "tf.summary.create_noop_writer()", "function_name": "create_noop_writer", "args": [""], "kwargs": []}
{"code": "tf.summary.create_file_writer(logdir,max_queue=None,flush_millis=None,filename_suffix=None,name=None)", "function_name": "create_file_writer", "args": ["logdir"], "kwargs": [["max_queue", "None"], ["flush_millis", "None"], ["filename_suffix", "None"], ["name", "None"]]}
{"code": "tf.summary.audio(name,data,sample_rate,step=None,max_outputs=3,encoding=None,description=None)", "function_name": "audio", "args": ["name", "data", "sample_rate"], "kwargs": [["step", "None"], ["max_outputs", "3"], ["encoding", "None"], ["description", "None"]]}
{"code": "tf.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)", "function_name": "unicode_split", "args": ["input", "input_encoding"], "kwargs": [["errors", "'replace'"], ["replacement_char", "65533"], ["name", "None"]]}
{"code": "tf.strings.upper(input,encoding='',name=None)", "function_name": "upper", "args": ["input"], "kwargs": [["encoding", "''"], ["name", "None"]]}
{"code": "tf.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)", "function_name": "unicode_transcode", "args": ["input", "input_encoding", "output_encoding"], "kwargs": [["errors", "'replace'"], ["replacement_char", "65533"], ["replace_control_characters", "False"], ["name", "None"]]}
{"code": "tf.strings.unsorted_segment_join(inputs,segment_ids,num_segments,separator='',name=None)", "function_name": "unsorted_segment_join", "args": ["inputs", "segment_ids", "num_segments"], "kwargs": [["separator", "''"], ["name", "None"]]}
{"code": "tf.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)", "function_name": "unicode_encode", "args": ["input", "output_encoding"], "kwargs": [["errors", "'replace'"], ["replacement_char", "65533"], ["name", "None"]]}
{"code": "tf.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)", "function_name": "unicode_split_with_offsets", "args": ["input", "input_encoding"], "kwargs": [["errors", "'replace'"], ["replacement_char", "65533"], ["name", "None"]]}
{"code": "tf.strings.unicode_script(input,name=None)", "function_name": "unicode_script", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)", "function_name": "unicode_decode", "args": ["input", "input_encoding"], "kwargs": [["errors", "'replace'"], ["replacement_char", "65533"], ["replace_control_characters", "False"], ["name", "None"]]}
{"code": "tf.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)", "function_name": "unicode_decode_with_offsets", "args": ["input", "input_encoding"], "kwargs": [["errors", "'replace'"], ["replacement_char", "65533"], ["replace_control_characters", "False"], ["name", "None"]]}
{"code": "tf.strings.to_hash_bucket(input,num_buckets,name=None)", "function_name": "to_hash_bucket", "args": ["input", "num_buckets"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)", "function_name": "to_hash_bucket_strong", "args": ["input", "num_buckets", "key"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.to_number(input,out_type=tf.dtypes.float32,name=None)", "function_name": "to_number", "args": ["input"], "kwargs": [["out_type", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.strings.to_hash_bucket_fast(input,num_buckets,name=None)", "function_name": "to_hash_bucket_fast", "args": ["input", "num_buckets"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.substr(input,pos,len,unit='BYTE',name=None)", "function_name": "substr", "args": ["input", "pos", "len"], "kwargs": [["unit", "'BYTE'"], ["name", "None"]]}
{"code": "tf.strings.split(input,sep=None,maxsplit=-1,name=None)", "function_name": "split", "args": ["input"], "kwargs": [["sep", "None"], ["maxsplit", "-1"], ["name", "None"]]}
{"code": "tf.strings.strip(input,name=None)", "function_name": "strip", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.regex_full_match(input,pattern,name=None)", "function_name": "regex_full_match", "args": ["input", "pattern"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.join(inputs,separator='',name=None)", "function_name": "join", "args": ["inputs"], "kwargs": [["separator", "''"], ["name", "None"]]}
{"code": "tf.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)", "function_name": "regex_replace", "args": ["input", "pattern", "rewrite"], "kwargs": [["replace_global", "True"], ["name", "None"]]}
{"code": "tf.strings.reduce_join(inputs,axis=None,keepdims=False,separator='',name=None)", "function_name": "reduce_join", "args": ["inputs"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["separator", "''"], ["name", "None"]]}
{"code": "tf.strings.ngrams(data,ngram_width,separator='',pad_values=None,padding_width=None,preserve_short_sequences=False,name=None)", "function_name": "ngrams", "args": ["data", "ngram_width"], "kwargs": [["separator", "''"], ["pad_values", "None"], ["padding_width", "None"], ["preserve_short_sequences", "False"], ["name", "None"]]}
{"code": "tf.strings.lower(input,encoding='',name=None)", "function_name": "lower", "args": ["input"], "kwargs": [["encoding", "''"], ["name", "None"]]}
{"code": "tf.strings.length(input,unit='BYTE',name=None)", "function_name": "length", "args": ["input"], "kwargs": [["unit", "'BYTE'"], ["name", "None"]]}
{"code": "tf.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)", "function_name": "format", "args": ["template", "inputs"], "kwargs": [["placeholder", "'{}'"], ["summarize", "3"], ["name", "None"]]}
{"code": "tf.strings.bytes_split(input,name=None)", "function_name": "bytes_split", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.strings.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)", "function_name": "as_string", "args": ["input"], "kwargs": [["precision", "-1"], ["scientific", "False"], ["shortest", "False"], ["width", "-1"], ["fill", "''"], ["name", "None"]]}
{"code": "tf.sparse.split(sp_input=None,num_split=None,axis=None,name=None)", "function_name": "split", "args": [], "kwargs": [["sp_input", "None"], ["num_split", "None"], ["axis", "None"], ["name", "None"]]}
{"code": "tf.sparse.transpose(sp_input,perm=None,name=None)", "function_name": "transpose", "args": ["sp_input"], "kwargs": [["perm", "None"], ["name", "None"]]}
{"code": "tf.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)", "function_name": "sparse_dense_matmul", "args": ["sp_a", "b"], "kwargs": [["adjoint_a", "False"], ["adjoint_b", "False"], ["name", "None"]]}
{"code": "tf.sparse.to_indicator(sp_input,vocab_size,name=None)", "function_name": "to_indicator", "args": ["sp_input", "vocab_size"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.to_dense(sp_input,default_value=None,validate_indices=True,name=None)", "function_name": "to_dense", "args": ["sp_input"], "kwargs": [["default_value", "None"], ["validate_indices", "True"], ["name", "None"]]}
{"code": "tf.sparse.softmax(sp_input,name=None)", "function_name": "softmax", "args": ["sp_input"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.slice(sp_input,start,size,name=None)", "function_name": "slice", "args": ["sp_input", "start", "size"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.reorder(sp_input,name=None)", "function_name": "reorder", "args": ["sp_input"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.segment_mean(data,indices,segment_ids,num_segments=None,name=None)", "function_name": "segment_mean", "args": ["data", "indices", "segment_ids"], "kwargs": [["num_segments", "None"], ["name", "None"]]}
{"code": "tf.sparse.segment_sum(data,indices,segment_ids,num_segments=None,name=None)", "function_name": "segment_sum", "args": ["data", "indices", "segment_ids"], "kwargs": [["num_segments", "None"], ["name", "None"]]}
{"code": "tf.sparse.reduce_sum(sp_input,axis=None,keepdims=None,output_is_sparse=False,name=None)", "function_name": "reduce_sum", "args": ["sp_input"], "kwargs": [["axis", "None"], ["keepdims", "None"], ["output_is_sparse", "False"], ["name", "None"]]}
{"code": "tf.sparse.retain(sp_input,to_retain)", "function_name": "retain", "args": ["sp_input", "to_retain"], "kwargs": []}
{"code": "tf.sparse.reduce_max(sp_input,axis=None,keepdims=None,output_is_sparse=False,name=None)", "function_name": "reduce_max", "args": ["sp_input"], "kwargs": [["axis", "None"], ["keepdims", "None"], ["output_is_sparse", "False"], ["name", "None"]]}
{"code": "tf.sparse.reset_shape(sp_input,new_shape=None)", "function_name": "reset_shape", "args": ["sp_input"], "kwargs": [["new_shape", "None"]]}
{"code": "tf.sparse.reshape(sp_input,shape,name=None)", "function_name": "reshape", "args": ["sp_input", "shape"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.minimum(sp_a,sp_b,name=None)", "function_name": "minimum", "args": ["sp_a", "sp_b"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.mask(a,mask_indices,name=None)", "function_name": "mask", "args": ["a", "mask_indices"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.fill_empty_rows(sp_input,default_value,name=None)", "function_name": "fill_empty_rows", "args": ["sp_input", "default_value"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.maximum(sp_a,sp_b,name=None)", "function_name": "maximum", "args": ["sp_a", "sp_b"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.from_dense(tensor,name=None)", "function_name": "from_dense", "args": ["tensor"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.segment_sqrt_n(data,indices,segment_ids,num_segments=None,name=None)", "function_name": "segment_sqrt_n", "args": ["data", "indices", "segment_ids"], "kwargs": [["num_segments", "None"], ["name", "None"]]}
{"code": "tf.sparse.concat(axis,sp_inputs,expand_nonconcat_dims=False,name=None)", "function_name": "concat", "args": ["axis", "sp_inputs"], "kwargs": [["expand_nonconcat_dims", "False"], ["name", "None"]]}
{"code": "tf.sparse.cross(inputs,name=None)", "function_name": "cross", "args": ["inputs"], "kwargs": [["name", "None"]]}
{"code": "tf.sparse.expand_dims(sp_input,axis=None,name=None)", "function_name": "expand_dims", "args": ["sp_input"], "kwargs": [["axis", "None"], ["name", "None"]]}
{"code": "tf.sparse.eye(num_rows,num_columns=None,dtype=tf.dtypes.float32,name=None)", "function_name": "eye", "args": ["num_rows"], "kwargs": [["num_columns", "None"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)", "function_name": "cross_hashed", "args": ["inputs"], "kwargs": [["num_buckets", "0"], ["hash_key", "None"], ["name", "None"]]}
{"code": "tf.signal.rfft3d(input_tensor,fft_length=None,name=None)", "function_name": "rfft3d", "args": ["input_tensor"], "kwargs": [["fft_length", "None"], ["name", "None"]]}
{"code": "tf.sparse.add(a,b,threshold=0)", "function_name": "add", "args": ["a", "b"], "kwargs": [["threshold", "0"]]}
{"code": "tf.signal.rfft2d(input_tensor,fft_length=None,name=None)", "function_name": "rfft2d", "args": ["input_tensor"], "kwargs": [["fft_length", "None"], ["name", "None"]]}
{"code": "tf.signal.irfft3d(input_tensor,fft_length=None,name=None)", "function_name": "irfft3d", "args": ["input_tensor"], "kwargs": [["fft_length", "None"], ["name", "None"]]}
{"code": "tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)", "function_name": "mfccs_from_log_mel_spectrograms", "args": ["log_mel_spectrograms"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.overlap_and_add(signal,frame_step,name=None)", "function_name": "overlap_and_add", "args": ["signal", "frame_step"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.rfft(input_tensor,fft_length=None,name=None)", "function_name": "rfft", "args": ["input_tensor"], "kwargs": [["fft_length", "None"], ["name", "None"]]}
{"code": "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)", "function_name": "linear_to_mel_weight_matrix", "args": [], "kwargs": [["num_mel_bins", "20"], ["num_spectrogram_bins", "129"], ["sample_rate", "8000"], ["lower_edge_hertz", "125.0"], ["upper_edge_hertz", "3800.0"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.signal.irfft(input_tensor,fft_length=None,name=None)", "function_name": "irfft", "args": ["input_tensor"], "kwargs": [["fft_length", "None"], ["name", "None"]]}
{"code": "tf.signal.inverse_stft_window_fn(frame_step,forward_window_fn=tf.signal.hann_window,name=None)", "function_name": "inverse_stft_window_fn", "args": ["frame_step"], "kwargs": [["forward_window_fn", "tf.signal.hann_window"], ["name", "None"]]}
{"code": "tf.signal.inverse_stft(stfts,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,name=None)", "function_name": "inverse_stft", "args": ["stfts", "frame_length", "frame_step"], "kwargs": [["fft_length", "None"], ["window_fn", "tf.signal.hann_window"], ["name", "None"]]}
{"code": "tf.signal.irfft2d(input_tensor,fft_length=None,name=None)", "function_name": "irfft2d", "args": ["input_tensor"], "kwargs": [["fft_length", "None"], ["name", "None"]]}
{"code": "tf.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)", "function_name": "idct", "args": ["input"], "kwargs": [["type", "2"], ["n", "None"], ["axis", "-1"], ["norm", "None"], ["name", "None"]]}
{"code": "tf.signal.ifftshift(x,axes=None,name=None)", "function_name": "ifftshift", "args": ["x"], "kwargs": [["axes", "None"], ["name", "None"]]}
{"code": "tf.signal.stft(signals,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,pad_end=False,name=None)", "function_name": "stft", "args": ["signals", "frame_length", "frame_step"], "kwargs": [["fft_length", "None"], ["window_fn", "tf.signal.hann_window"], ["pad_end", "False"], ["name", "None"]]}
{"code": "tf.signal.ifft3d(input,name=None)", "function_name": "ifft3d", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.ifft(input,name=None)", "function_name": "ifft", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)", "function_name": "hann_window", "args": ["window_length"], "kwargs": [["periodic", "True"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)", "function_name": "frame", "args": ["signal", "frame_length", "frame_step"], "kwargs": [["pad_end", "False"], ["pad_value", "0"], ["axis", "-1"], ["name", "None"]]}
{"code": "tf.signal.ifft2d(input,name=None)", "function_name": "ifft2d", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)", "function_name": "hamming_window", "args": ["window_length"], "kwargs": [["periodic", "True"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.signal.fftshift(x,axes=None,name=None)", "function_name": "fftshift", "args": ["x"], "kwargs": [["axes", "None"], ["name", "None"]]}
{"code": "tf.signal.fft2d(input,name=None)", "function_name": "fft2d", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.fft(input,name=None)", "function_name": "fft", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)", "function_name": "dct", "args": ["input"], "kwargs": [["type", "2"], ["n", "None"], ["axis", "-1"], ["norm", "None"], ["name", "None"]]}
{"code": "tf.signal.fft3d(input,name=None)", "function_name": "fft3d", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.sets.intersection(a,b,validate_indices=True)", "function_name": "intersection", "args": ["a", "b"], "kwargs": [["validate_indices", "True"]]}
{"code": "tf.sets.union(a,b,validate_indices=True)", "function_name": "union", "args": ["a", "b"], "kwargs": [["validate_indices", "True"]]}
{"code": "tf.sets.difference(a,b,aminusb=True,validate_indices=True)", "function_name": "difference", "args": ["a", "b"], "kwargs": [["aminusb", "True"], ["validate_indices", "True"]]}
{"code": "tf.saved_model.save(obj,export_dir,signatures=None,options=None)", "function_name": "save", "args": ["obj", "export_dir"], "kwargs": [["signatures", "None"], ["options", "None"]]}
{"code": "tf.sets.size(a,validate_indices=True)", "function_name": "size", "args": ["a"], "kwargs": [["validate_indices", "True"]]}
{"code": "tf.random.experimental.create_rng_state(seed,algorithm)", "function_name": "create_rng_state", "args": ["seed", "algorithm"], "kwargs": []}
{"code": "tf.saved_model.contains_saved_model(export_dir)", "function_name": "contains_saved_model", "args": ["export_dir"], "kwargs": []}
{"code": "tf.saved_model.load(export_dir,tags=None)", "function_name": "load", "args": ["export_dir"], "kwargs": [["tags", "None"]]}
{"code": "tf.random.experimental.get_global_generator()", "function_name": "get_global_generator", "args": [""], "kwargs": []}
{"code": "tf.random.experimental.set_global_generator(generator)", "function_name": "set_global_generator", "args": ["generator"], "kwargs": []}
{"code": "tf.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)", "function_name": "stateless_categorical", "args": ["logits", "num_samples", "seed"], "kwargs": [["dtype", "tf.dtypes.int64"], ["name", "None"]]}
{"code": "tf.random.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)", "function_name": "truncated_normal", "args": ["shape"], "kwargs": [["mean", "0.0"], ["stddev", "1.0"], ["dtype", "tf.dtypes.float32"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)", "function_name": "uniform_candidate_sampler", "args": ["true_classes", "num_true", "num_sampled", "unique", "range_max"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)", "function_name": "uniform", "args": ["shape"], "kwargs": [["minval", "0"], ["maxval", "None"], ["dtype", "tf.dtypes.float32"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)", "function_name": "stateless_normal", "args": ["shape", "seed"], "kwargs": [["mean", "0.0"], ["stddev", "1.0"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)", "function_name": "stateless_truncated_normal", "args": ["shape", "seed"], "kwargs": [["mean", "0.0"], ["stddev", "1.0"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None)", "function_name": "stateless_uniform", "args": ["shape", "seed"], "kwargs": [["minval", "0"], ["maxval", "None"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.random.set_seed(seed)", "function_name": "set_seed", "args": ["seed"], "kwargs": []}
{"code": "tf.random.poisson(shape,lam,dtype=tf.dtypes.float32,seed=None,name=None)", "function_name": "poisson", "args": ["shape", "lam"], "kwargs": [["dtype", "tf.dtypes.float32"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.shuffle(value,seed=None,name=None)", "function_name": "shuffle", "args": ["value"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)", "function_name": "learned_unigram_candidate_sampler", "args": ["true_classes", "num_true", "num_sampled", "unique", "range_max"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)", "function_name": "normal", "args": ["shape"], "kwargs": [["mean", "0.0"], ["stddev", "1.0"], ["dtype", "tf.dtypes.float32"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)", "function_name": "log_uniform_candidate_sampler", "args": ["true_classes", "num_true", "num_sampled", "unique", "range_max"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)", "function_name": "gamma", "args": ["shape", "alpha"], "kwargs": [["beta", "None"], ["dtype", "tf.dtypes.float32"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)", "function_name": "categorical", "args": ["logits", "num_samples"], "kwargs": [["dtype", "None"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)", "function_name": "fixed_unigram_candidate_sampler", "args": ["true_classes", "num_true", "num_sampled", "unique", "range_max"], "kwargs": [["vocab_file", "''"], ["distortion", "1.0"], ["num_reserved_ids", "0"], ["num_shards", "1"], ["shard", "0"], ["unigrams", "()"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)", "function_name": "all_candidate_sampler", "args": ["true_classes", "num_true", "num_sampled", "unique"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.ragged.range(starts,limits=None,deltas=1,dtype=None,name=None,row_splits_dtype=tf.dtypes.int64)", "function_name": "range", "args": ["starts"], "kwargs": [["limits", "None"], ["deltas", "1"], ["dtype", "None"], ["name", "None"], ["row_splits_dtype", "tf.dtypes.int64"]]}
{"code": "tf.ragged.stack(values,axis=0,name=None)", "function_name": "stack", "args": ["values"], "kwargs": [["axis", "0"], ["name", "None"]]}
{"code": "tf.ragged.stack_dynamic_partitions(data,partitions,num_partitions,name=None)", "function_name": "stack_dynamic_partitions", "args": ["data", "partitions", "num_partitions"], "kwargs": [["name", "None"]]}
{"code": "tf.ragged.constant(pylist,dtype=None,ragged_rank=None,inner_shape=None,name=None,row_splits_dtype=tf.dtypes.int64)", "function_name": "constant", "args": ["pylist"], "kwargs": [["dtype", "None"], ["ragged_rank", "None"], ["inner_shape", "None"], ["name", "None"], ["row_splits_dtype", "tf.dtypes.int64"]]}
{"code": "tf.ragged.row_splits_to_segment_ids(splits,name=None,out_type=None)", "function_name": "row_splits_to_segment_ids", "args": ["splits"], "kwargs": [["name", "None"], ["out_type", "None"]]}
{"code": "tf.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,out_type=None,name=None)", "function_name": "segment_ids_to_row_splits", "args": ["segment_ids"], "kwargs": [["num_segments", "None"], ["out_type", "None"], ["name", "None"]]}
{"code": "tf.ragged.map_flat_values(op,*args,**kwargs)", "function_name": "map_flat_values", "args": ["op", "*args", "**kwargs"], "kwargs": []}
{"code": "tf.ragged.boolean_mask(data,mask,name=None)", "function_name": "boolean_mask", "args": ["data", "mask"], "kwargs": [["name", "None"]]}
{"code": "tf.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)", "function_name": "quantized_concat", "args": ["concat_dim", "values", "input_mins", "input_maxes"], "kwargs": [["name", "None"]]}
{"code": "tf.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)", "function_name": "quantize_and_dequantize", "args": ["input", "input_min", "input_max"], "kwargs": [["signed_input", "True"], ["num_bits", "8"], ["range_given", "False"], ["round_mode", "'HALF_TO_EVEN'"], ["name", "None"], ["narrow_range", "False"], ["axis", "None"]]}
{"code": "tf.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)", "function_name": "quantize", "args": ["input", "min_range", "max_range", "T"], "kwargs": [["mode", "'MIN_COMBINED'"], ["round_mode", "'HALF_AWAY_FROM_ZERO'"], ["name", "None"], ["narrow_range", "False"], ["axis", "None"], ["ensure_minimum_range", "0.01"]]}
{"code": "tf.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)", "function_name": "fake_quant_with_min_max_args_gradient", "args": ["gradients", "inputs"], "kwargs": [["min", "-6"], ["max", "6"], ["num_bits", "8"], ["narrow_range", "False"], ["name", "None"]]}
{"code": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)", "function_name": "fake_quant_with_min_max_vars_per_channel_gradient", "args": ["gradients", "inputs", "min", "max"], "kwargs": [["num_bits", "8"], ["narrow_range", "False"], ["name", "None"]]}
{"code": "tf.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)", "function_name": "fake_quant_with_min_max_vars", "args": ["inputs", "min", "max"], "kwargs": [["num_bits", "8"], ["narrow_range", "False"], ["name", "None"]]}
{"code": "tf.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)", "function_name": "with_space_to_batch", "args": ["input", "dilation_rate", "padding", "op"], "kwargs": [["filter_shape", "None"], ["spatial_dims", "None"], ["data_format", "None"]]}
{"code": "tf.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)", "function_name": "fake_quant_with_min_max_vars_gradient", "args": ["gradients", "inputs", "min", "max"], "kwargs": [["num_bits", "8"], ["narrow_range", "False"], ["name", "None"]]}
{"code": "tf.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)", "function_name": "fake_quant_with_min_max_args", "args": ["inputs"], "kwargs": [["min", "-6"], ["max", "6"], ["num_bits", "8"], ["narrow_range", "False"], ["name", "None"]]}
{"code": "tf.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False)", "function_name": "dequantize", "args": ["input", "min_range", "max_range"], "kwargs": [["mode", "'MIN_COMBINED'"], ["name", "None"], ["axis", "None"], ["narrow_range", "False"]]}
{"code": "tf.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)", "function_name": "fake_quant_with_min_max_vars_per_channel", "args": ["inputs", "min", "max"], "kwargs": [["num_bits", "8"], ["narrow_range", "False"], ["name", "None"]]}
{"code": "tf.nn.weighted_moments(x,axes,frequency_weights,keepdims=False,name=None)", "function_name": "weighted_moments", "args": ["x", "axes", "frequency_weights"], "kwargs": [["keepdims", "False"], ["name", "None"]]}
{"code": "tf.nn.sufficient_statistics(x,axes,shift=None,keepdims=False,name=None)", "function_name": "sufficient_statistics", "args": ["x", "axes"], "kwargs": [["shift", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.nn.weighted_cross_entropy_with_logits(labels,logits,pos_weight,name=None)", "function_name": "weighted_cross_entropy_with_logits", "args": ["labels", "logits", "pos_weight"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.swish(features)", "function_name": "swish", "args": ["features"], "kwargs": []}
{"code": "tf.nn.softmax_cross_entropy_with_logits(labels,logits,axis=-1,name=None)", "function_name": "softmax_cross_entropy_with_logits", "args": ["labels", "logits"], "kwargs": [["axis", "-1"], ["name", "None"]]}
{"code": "tf.nn.sigmoid_cross_entropy_with_logits(labels=None,logits=None,name=None)", "function_name": "sigmoid_cross_entropy_with_logits", "args": [], "kwargs": [["labels", "None"], ["logits", "None"], ["name", "None"]]}
{"code": "tf.nn.softsign(features,name=None)", "function_name": "softsign", "args": ["features"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits,name=None)", "function_name": "sparse_softmax_cross_entropy_with_logits", "args": ["labels", "logits"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.space_to_depth(input,block_size,data_format='NHWC',name=None)", "function_name": "space_to_depth", "args": ["input", "block_size"], "kwargs": [["data_format", "'NHWC'"], ["name", "None"]]}
{"code": "tf.nn.selu(features,name=None)", "function_name": "selu", "args": ["features"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.separable_conv2d(input,depthwise_filter,pointwise_filter,strides,padding,data_format=None,dilations=None,name=None)", "function_name": "separable_conv2d", "args": ["input", "depthwise_filter", "pointwise_filter", "strides", "padding"], "kwargs": [["data_format", "None"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.scale_regularization_loss(regularization_loss)", "function_name": "scale_regularization_loss", "args": ["regularization_loss"], "kwargs": []}
{"code": "tf.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,seed=None,name='sampled_softmax_loss')", "function_name": "sampled_softmax_loss", "args": ["weights", "biases", "labels", "inputs", "num_sampled", "num_classes"], "kwargs": [["num_true", "1"], ["sampled_values", "None"], ["remove_accidental_hits", "True"], ["seed", "None"], ["name", "'sampled_softmax_loss'"]]}
{"code": "tf.nn.pool(input,window_shape,pooling_type,strides=None,padding='VALID',data_format=None,dilations=None,name=None)", "function_name": "pool", "args": ["input", "window_shape", "pooling_type"], "kwargs": [["strides", "None"], ["padding", "'VALID'"], ["data_format", "None"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.relu6(features,name=None)", "function_name": "relu6", "args": ["features"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,max_norm=None,name=None)", "function_name": "safe_embedding_lookup_sparse", "args": ["embedding_weights", "sparse_ids"], "kwargs": [["sparse_weights", "None"], ["combiner", "'mean'"], ["default_id", "None"], ["max_norm", "None"], ["name", "None"]]}
{"code": "tf.nn.relu(features,name=None)", "function_name": "relu", "args": ["features"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.softmax(logits,axis=None,name=None)", "function_name": "softmax", "args": ["logits"], "kwargs": [["axis", "None"], ["name", "None"]]}
{"code": "tf.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,name='nce_loss')", "function_name": "nce_loss", "args": ["weights", "biases", "labels", "inputs", "num_sampled", "num_classes"], "kwargs": [["num_true", "1"], ["sampled_values", "None"], ["remove_accidental_hits", "False"], ["name", "'nce_loss'"]]}
{"code": "tf.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)", "function_name": "normalize_moments", "args": ["counts", "mean_ss", "variance_ss", "shift"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.moments(x,axes,shift=None,keepdims=False,name=None)", "function_name": "moments", "args": ["x", "axes"], "kwargs": [["shift", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.nn.max_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)", "function_name": "max_pool3d", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NDHWC'"], ["name", "None"]]}
{"code": "tf.nn.max_pool_with_argmax(input,ksize,strides,padding,data_format='NHWC',output_dtype=tf.dtypes.int64,include_batch_in_index=False,name=None)", "function_name": "max_pool_with_argmax", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NHWC'"], ["output_dtype", "tf.dtypes.int64"], ["include_batch_in_index", "False"], ["name", "None"]]}
{"code": "tf.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)", "function_name": "max_pool2d", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NHWC'"], ["name", "None"]]}
{"code": "tf.nn.log_softmax(logits,axis=None,name=None)", "function_name": "log_softmax", "args": ["logits"], "kwargs": [["axis", "None"], ["name", "None"]]}
{"code": "tf.nn.max_pool(input,ksize,strides,padding,data_format=None,name=None)", "function_name": "max_pool", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "None"], ["name", "None"]]}
{"code": "tf.nn.max_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)", "function_name": "max_pool1d", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NWC'"], ["name", "None"]]}
{"code": "tf.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)", "function_name": "log_poisson_loss", "args": ["targets", "log_input"], "kwargs": [["compute_full_loss", "False"], ["name", "None"]]}
{"code": "tf.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)", "function_name": "fractional_avg_pool", "args": ["value", "pooling_ratio"], "kwargs": [["pseudo_random", "False"], ["overlapping", "False"], ["seed", "0"], ["name", "None"]]}
{"code": "tf.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)", "function_name": "local_response_normalization", "args": ["input"], "kwargs": [["depth_radius", "5"], ["bias", "1"], ["alpha", "1"], ["beta", "0.5"], ["name", "None"]]}
{"code": "tf.nn.leaky_relu(features,alpha=0.2,name=None)", "function_name": "leaky_relu", "args": ["features"], "kwargs": [["alpha", "0.2"], ["name", "None"]]}
{"code": "tf.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)", "function_name": "fractional_max_pool", "args": ["value", "pooling_ratio"], "kwargs": [["pseudo_random", "False"], ["overlapping", "False"], ["seed", "0"], ["name", "None"]]}
{"code": "tf.nn.l2_loss(t,name=None)", "function_name": "l2_loss", "args": ["t"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.embedding_lookup(params,ids,max_norm=None,name=None)", "function_name": "embedding_lookup", "args": ["params", "ids"], "kwargs": [["max_norm", "None"], ["name", "None"]]}
{"code": "tf.nn.elu(features,name=None)", "function_name": "elu", "args": ["features"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,combiner=None,max_norm=None,name=None)", "function_name": "embedding_lookup_sparse", "args": ["params", "sp_ids", "sp_weights"], "kwargs": [["combiner", "None"], ["max_norm", "None"], ["name", "None"]]}
{"code": "tf.nn.erosion2d(value,filters,strides,padding,data_format,dilations,name=None)", "function_name": "erosion2d", "args": ["value", "filters", "strides", "padding", "data_format", "dilations"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.depthwise_conv2d(input,filter,strides,padding,data_format=None,dilations=None,name=None)", "function_name": "depthwise_conv2d", "args": ["input", "filter", "strides", "padding"], "kwargs": [["data_format", "None"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)", "function_name": "depthwise_conv2d_backprop_filter", "args": ["input", "filter_sizes", "out_backprop", "strides", "padding", "1", "1", "1]"], "kwargs": [["data_format", "'NHWC'"], ["dilations", "[1"], ["name", "None"]]}
{"code": "tf.nn.depth_to_space(input,block_size,data_format='NHWC',name=None)", "function_name": "depth_to_space", "args": ["input", "block_size"], "kwargs": [["data_format", "'NHWC'"], ["name", "None"]]}
{"code": "tf.nn.dropout(x,rate,noise_shape=None,seed=None,name=None)", "function_name": "dropout", "args": ["x", "rate"], "kwargs": [["noise_shape", "None"], ["seed", "None"], ["name", "None"]]}
{"code": "tf.nn.dilation2d(input,filters,strides,padding,data_format,dilations,name=None)", "function_name": "dilation2d", "args": ["input", "filters", "strides", "padding", "data_format", "dilations"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)", "function_name": "depthwise_conv2d_backprop_input", "args": ["input_sizes", "filter", "out_backprop", "strides", "padding", "1", "1", "1]"], "kwargs": [["data_format", "'NHWC'"], ["dilations", "[1"], ["name", "None"]]}
{"code": "tf.nn.ctc_unique_labels(labels,name=None)", "function_name": "ctc_unique_labels", "args": ["labels"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.ctc_loss(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)", "function_name": "ctc_loss", "args": ["labels", "logits", "label_length", "logit_length"], "kwargs": [["logits_time_major", "True"], ["unique", "None"], ["blank_index", "None"], ["name", "None"]]}
{"code": "tf.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)", "function_name": "ctc_greedy_decoder", "args": ["inputs", "sequence_length"], "kwargs": [["merge_repeated", "True"]]}
{"code": "tf.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1)", "function_name": "ctc_beam_search_decoder", "args": ["inputs", "sequence_length"], "kwargs": [["beam_width", "100"], ["top_paths", "1"]]}
{"code": "tf.nn.crelu(features,axis=-1,name=None)", "function_name": "crelu", "args": ["features"], "kwargs": [["axis", "-1"], ["name", "None"]]}
{"code": "tf.nn.conv2d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NHWC',dilations=None,name=None)", "function_name": "conv2d_transpose", "args": ["input", "filters", "output_shape", "strides"], "kwargs": [["padding", "'SAME'"], ["data_format", "'NHWC'"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.conv2d(input,filters,strides,padding,data_format='NHWC',dilations=None,name=None)", "function_name": "conv2d", "args": ["input", "filters", "strides", "padding"], "kwargs": [["data_format", "'NHWC'"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.conv_transpose(input,filters,output_shape,strides,padding='SAME',data_format=None,dilations=None,name=None)", "function_name": "conv_transpose", "args": ["input", "filters", "output_shape", "strides"], "kwargs": [["padding", "'SAME'"], ["data_format", "None"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.convolution(input,filters,strides=None,padding='VALID',data_format=None,dilations=None,name=None)", "function_name": "convolution", "args": ["input", "filters"], "kwargs": [["strides", "None"], ["padding", "'VALID'"], ["data_format", "None"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.conv3d(input,filters,strides,padding,data_format='NDHWC',dilations=None,name=None)", "function_name": "conv3d", "args": ["input", "filters", "strides", "padding"], "kwargs": [["data_format", "'NDHWC'"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.conv3d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NDHWC',dilations=None,name=None)", "function_name": "conv3d_transpose", "args": ["input", "filters", "output_shape", "strides"], "kwargs": [["padding", "'SAME'"], ["data_format", "'NDHWC'"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.conv1d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NWC',dilations=None,name=None)", "function_name": "conv1d_transpose", "args": ["input", "filters", "output_shape", "strides"], "kwargs": [["padding", "'SAME'"], ["data_format", "'NWC'"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.conv1d(input,filters,stride,padding,data_format='NWC',dilations=None,name=None)", "function_name": "conv1d", "args": ["input", "filters", "stride", "padding"], "kwargs": [["data_format", "'NWC'"], ["dilations", "None"], ["name", "None"]]}
{"code": "tf.nn.compute_average_loss(per_example_loss,sample_weight=None,global_batch_size=None)", "function_name": "compute_average_loss", "args": ["per_example_loss"], "kwargs": [["sample_weight", "None"], ["global_batch_size", "None"]]}
{"code": "tf.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)", "function_name": "compute_accidental_hits", "args": ["true_classes", "sampled_candidates", "num_true"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.nn.bias_add(value,bias,data_format=None,name=None)", "function_name": "bias_add", "args": ["value", "bias"], "kwargs": [["data_format", "None"], ["name", "None"]]}
{"code": "tf.nn.collapse_repeated(labels,seq_length,name=None)", "function_name": "collapse_repeated", "args": ["labels", "seq_length"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.avg_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)", "function_name": "avg_pool3d", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NDHWC'"], ["name", "None"]]}
{"code": "tf.nn.batch_norm_with_global_normalization(input,mean,variance,beta,gamma,variance_epsilon,scale_after_normalization,name=None)", "function_name": "batch_norm_with_global_normalization", "args": ["input", "mean", "variance", "beta", "gamma", "variance_epsilon", "scale_after_normalization"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.avg_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)", "function_name": "avg_pool2d", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NHWC'"], ["name", "None"]]}
{"code": "tf.nn.batch_normalization(x,mean,variance,offset,scale,variance_epsilon,name=None)", "function_name": "batch_normalization", "args": ["x", "mean", "variance", "offset", "scale", "variance_epsilon"], "kwargs": [["name", "None"]]}
{"code": "tf.nn.avg_pool(input,ksize,strides,padding,data_format=None,name=None)", "function_name": "avg_pool", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "None"], ["name", "None"]]}
{"code": "tf.nn.avg_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)", "function_name": "avg_pool1d", "args": ["input", "ksize", "strides", "padding"], "kwargs": [["data_format", "'NWC'"], ["name", "None"]]}
{"code": "tf.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)", "function_name": "atrous_conv2d_transpose", "args": ["value", "filters", "output_shape", "rate", "padding"], "kwargs": [["name", "None"]]}
{"code": "tf.nest.pack_sequence_as(structure,flat_sequence,expand_composites=False)", "function_name": "pack_sequence_as", "args": ["structure", "flat_sequence"], "kwargs": [["expand_composites", "False"]]}
{"code": "tf.nn.atrous_conv2d(value,filters,rate,padding,name=None)", "function_name": "atrous_conv2d", "args": ["value", "filters", "rate", "padding"], "kwargs": [["name", "None"]]}
{"code": "tf.nest.map_structure(func,*structure,**kwargs)", "function_name": "map_structure", "args": ["func", "*structure", "**kwargs"], "kwargs": []}
{"code": "tf.nest.flatten(structure,expand_composites=False)", "function_name": "flatten", "args": ["structure"], "kwargs": [["expand_composites", "False"]]}
{"code": "tf.nest.assert_same_structure(nest1,nest2,check_types=True,expand_composites=False)", "function_name": "assert_same_structure", "args": ["nest1", "nest2"], "kwargs": [["check_types", "True"], ["expand_composites", "False"]]}
{"code": "tf.nest.is_nested(seq)", "function_name": "is_nested", "args": ["seq"], "kwargs": []}
{"code": "tf.mlir.experimental.convert_graph_def(graph_def,pass_pipeline='tf-standard-pipeline')", "function_name": "convert_graph_def", "args": ["graph_def"], "kwargs": [["pass_pipeline", "'tf-standard-pipeline'"]]}
{"code": "tf.math.zeta(x,q,name=None)", "function_name": "zeta", "args": ["x", "q"], "kwargs": [["name", "None"]]}
{"code": "tf.math.zero_fraction(value,name=None)", "function_name": "zero_fraction", "args": ["value"], "kwargs": [["name", "None"]]}
{"code": "tf.math.xdivy(x,y,name=None)", "function_name": "xdivy", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.xlogy(x,y,name=None)", "function_name": "xlogy", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)", "function_name": "unsorted_segment_sqrt_n", "args": ["data", "segment_ids", "num_segments"], "kwargs": [["name", "None"]]}
{"code": "tf.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)", "function_name": "unsorted_segment_sum", "args": ["data", "segment_ids", "num_segments"], "kwargs": [["name", "None"]]}
{"code": "tf.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)", "function_name": "unsorted_segment_min", "args": ["data", "segment_ids", "num_segments"], "kwargs": [["name", "None"]]}
{"code": "tf.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)", "function_name": "unsorted_segment_max", "args": ["data", "segment_ids", "num_segments"], "kwargs": [["name", "None"]]}
{"code": "tf.math.truediv(x,y,name=None)", "function_name": "truediv", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)", "function_name": "unsorted_segment_mean", "args": ["data", "segment_ids", "num_segments"], "kwargs": [["name", "None"]]}
{"code": "tf.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)", "function_name": "unsorted_segment_prod", "args": ["data", "segment_ids", "num_segments"], "kwargs": [["name", "None"]]}
{"code": "tf.math.tanh(x,name=None)", "function_name": "tanh", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.top_k(input,k=1,sorted=True,name=None)", "function_name": "top_k", "args": ["input"], "kwargs": [["k", "1"], ["sorted", "True"], ["name", "None"]]}
{"code": "tf.math.square(x,name=None)", "function_name": "square", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.squared_difference(x,y,name=None)", "function_name": "squared_difference", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.tan(x,name=None)", "function_name": "tan", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.subtract(x,y,name=None)", "function_name": "subtract", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.sinh(x,name=None)", "function_name": "sinh", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.sqrt(x,name=None)", "function_name": "sqrt", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.softplus(features,name=None)", "function_name": "softplus", "args": ["features"], "kwargs": [["name", "None"]]}
{"code": "tf.math.sin(x,name=None)", "function_name": "sin", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.sign(x,name=None)", "function_name": "sign", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.sigmoid(x,name=None)", "function_name": "sigmoid", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.segment_min(data,segment_ids,name=None)", "function_name": "segment_min", "args": ["data", "segment_ids"], "kwargs": [["name", "None"]]}
{"code": "tf.math.segment_sum(data,segment_ids,name=None)", "function_name": "segment_sum", "args": ["data", "segment_ids"], "kwargs": [["name", "None"]]}
{"code": "tf.math.segment_mean(data,segment_ids,name=None)", "function_name": "segment_mean", "args": ["data", "segment_ids"], "kwargs": [["name", "None"]]}
{"code": "tf.math.segment_max(data,segment_ids,name=None)", "function_name": "segment_max", "args": ["data", "segment_ids"], "kwargs": [["name", "None"]]}
{"code": "tf.math.segment_prod(data,segment_ids,name=None)", "function_name": "segment_prod", "args": ["data", "segment_ids"], "kwargs": [["name", "None"]]}
{"code": "tf.math.rsqrt(x,name=None)", "function_name": "rsqrt", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.scalar_mul(scalar,x,name=None)", "function_name": "scalar_mul", "args": ["scalar", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.rint(x,name=None)", "function_name": "rint", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.round(x,name=None)", "function_name": "round", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.reduce_sum(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_sum", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_max(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_max", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_variance", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_euclidean_norm(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_euclidean_norm", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_min(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_min", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_logsumexp(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_logsumexp", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_mean(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_mean", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_any(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_any", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reciprocal_no_nan(x,name=None)", "function_name": "reciprocal_no_nan", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_std", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.reduce_prod(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_prod", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.math.polygamma(a,x,name=None)", "function_name": "polygamma", "args": ["a", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.real(input,name=None)", "function_name": "real", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.math.polyval(coeffs,x,name=None)", "function_name": "polyval", "args": ["coeffs", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.pow(x,y,name=None)", "function_name": "pow", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.reciprocal(x,name=None)", "function_name": "reciprocal", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.not_equal(x,y,name=None)", "function_name": "not_equal", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.ndtri(x,name=None)", "function_name": "ndtri", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.negative(x,name=None)", "function_name": "negative", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.multiply(x,y,name=None)", "function_name": "multiply", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.multiply_no_nan(x,y,name=None)", "function_name": "multiply_no_nan", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.maximum(x,y,name=None)", "function_name": "maximum", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.minimum(x,y,name=None)", "function_name": "minimum", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.log_sigmoid(x,name=None)", "function_name": "log_sigmoid", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.logical_xor(x,y,name='LogicalXor')", "function_name": "logical_xor", "args": ["x", "y"], "kwargs": [["name", "'LogicalXor'"]]}
{"code": "tf.math.nextafter(x1,x2,name=None)", "function_name": "nextafter", "args": ["x1", "x2"], "kwargs": [["name", "None"]]}
{"code": "tf.math.logical_or(x,y,name=None)", "function_name": "logical_or", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.less_equal(x,y,name=None)", "function_name": "less_equal", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.log1p(x,name=None)", "function_name": "log1p", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.logical_not(x,name=None)", "function_name": "logical_not", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.logical_and(x,y,name=None)", "function_name": "logical_and", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.l2_normalize(x,axis=None,epsilon=1e-12,name=None)", "function_name": "l2_normalize", "args": ["x"], "kwargs": [["axis", "None"], ["epsilon", "1e-12"], ["name", "None"]]}
{"code": "tf.math.log(x,name=None)", "function_name": "log", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.lgamma(x,name=None)", "function_name": "lgamma", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.less(x,y,name=None)", "function_name": "less", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.is_inf(x,name=None)", "function_name": "is_inf", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.lbeta(x,name=None)", "function_name": "lbeta", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.is_nan(x,name=None)", "function_name": "is_nan", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.is_non_decreasing(x,name=None)", "function_name": "is_non_decreasing", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.is_strictly_increasing(x,name=None)", "function_name": "is_strictly_increasing", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.in_top_k(targets,predictions,k,name=None)", "function_name": "in_top_k", "args": ["targets", "predictions", "k"], "kwargs": [["name", "None"]]}
{"code": "tf.math.imag(input,name=None)", "function_name": "imag", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.math.invert_permutation(x,name=None)", "function_name": "invert_permutation", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.igammac(a,x,name=None)", "function_name": "igammac", "args": ["a", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.is_finite(x,name=None)", "function_name": "is_finite", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.floordiv(x,y,name=None)", "function_name": "floordiv", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.igamma(a,x,name=None)", "function_name": "igamma", "args": ["a", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.greater_equal(x,y,name=None)", "function_name": "greater_equal", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.floormod(x,y,name=None)", "function_name": "floormod", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.floor(x,name=None)", "function_name": "floor", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.erfinv(x,name=None)", "function_name": "erfinv", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.expm1(x,name=None)", "function_name": "expm1", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.greater(x,y,name=None)", "function_name": "greater", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.equal(x,y,name=None)", "function_name": "equal", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.erfc(x,name=None)", "function_name": "erfc", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.divide(x,y,name=None)", "function_name": "divide", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.exp(x,name=None)", "function_name": "exp", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.erf(x,name=None)", "function_name": "erf", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.divide_no_nan(x,y,name=None)", "function_name": "divide_no_nan", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.count_nonzero(input,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None)", "function_name": "count_nonzero", "args": ["input"], "kwargs": [["axis", "None"], ["keepdims", "None"], ["dtype", "tf.dtypes.int64"], ["name", "None"]]}
{"code": "tf.math.digamma(x,name=None)", "function_name": "digamma", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.cumulative_logsumexp(x,axis=0,exclusive=False,reverse=False,name=None)", "function_name": "cumulative_logsumexp", "args": ["x"], "kwargs": [["axis", "0"], ["exclusive", "False"], ["reverse", "False"], ["name", "None"]]}
{"code": "tf.math.cos(x,name=None)", "function_name": "cos", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.cumsum(x,axis=0,exclusive=False,reverse=False,name=None)", "function_name": "cumsum", "args": ["x"], "kwargs": [["axis", "0"], ["exclusive", "False"], ["reverse", "False"], ["name", "None"]]}
{"code": "tf.math.cumprod(x,axis=0,exclusive=False,reverse=False,name=None)", "function_name": "cumprod", "args": ["x"], "kwargs": [["axis", "0"], ["exclusive", "False"], ["reverse", "False"], ["name", "None"]]}
{"code": "tf.math.cosh(x,name=None)", "function_name": "cosh", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.confusion_matrix(labels,predictions,num_classes=None,weights=None,dtype=tf.dtypes.int32,name=None)", "function_name": "confusion_matrix", "args": ["labels", "predictions"], "kwargs": [["num_classes", "None"], ["weights", "None"], ["dtype", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.math.conj(x,name=None)", "function_name": "conj", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.ceil(x,name=None)", "function_name": "ceil", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.betainc(a,b,x,name=None)", "function_name": "betainc", "args": ["a", "b", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.bessel_i1(x,name=None)", "function_name": "bessel_i1", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32,name=None)", "function_name": "bincount", "args": ["arr"], "kwargs": [["weights", "None"], ["minlength", "None"], ["maxlength", "None"], ["dtype", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.math.bessel_i1e(x,name=None)", "function_name": "bessel_i1e", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.bessel_i0(x,name=None)", "function_name": "bessel_i0", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.bessel_i0e(x,name=None)", "function_name": "bessel_i0e", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.atan(x,name=None)", "function_name": "atan", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.atan2(y,x,name=None)", "function_name": "atan2", "args": ["y", "x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.asinh(x,name=None)", "function_name": "asinh", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.atanh(x,name=None)", "function_name": "atanh", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.angle(input,name=None)", "function_name": "angle", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.math.argmin(input,axis=None,output_type=tf.dtypes.int64,name=None)", "function_name": "argmin", "args": ["input"], "kwargs": [["axis", "None"], ["output_type", "tf.dtypes.int64"], ["name", "None"]]}
{"code": "tf.math.argmax(input,axis=None,output_type=tf.dtypes.int64,name=None)", "function_name": "argmax", "args": ["input"], "kwargs": [["axis", "None"], ["output_type", "tf.dtypes.int64"], ["name", "None"]]}
{"code": "tf.math.asin(x,name=None)", "function_name": "asin", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.add_n(inputs,name=None)", "function_name": "add_n", "args": ["inputs"], "kwargs": [["name", "None"]]}
{"code": "tf.math.add(x,y,name=None)", "function_name": "add", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.math.acosh(x,name=None)", "function_name": "acosh", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)", "function_name": "accumulate_n", "args": ["inputs"], "kwargs": [["shape", "None"], ["tensor_dtype", "None"], ["name", "None"]]}
{"code": "tf.math.abs(x,name=None)", "function_name": "abs", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.math.acos(x,name=None)", "function_name": "acos", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.lite.experimental.load_delegate(library,options=None)", "function_name": "load_delegate", "args": ["library"], "kwargs": [["options", "None"]]}
{"code": "tf.linalg.tridiagonal_solve(diagonals,rhs,diagonals_format='compact',transpose_rhs=False,conjugate_rhs=False,name=None,partial_pivoting=True)", "function_name": "tridiagonal_solve", "args": ["diagonals", "rhs"], "kwargs": [["diagonals_format", "'compact'"], ["transpose_rhs", "False"], ["conjugate_rhs", "False"], ["name", "None"], ["partial_pivoting", "True"]]}
{"code": "tf.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)", "function_name": "triangular_solve", "args": ["matrix", "rhs"], "kwargs": [["lower", "True"], ["adjoint", "False"], ["name", "None"]]}
{"code": "tf.linalg.tridiagonal_matmul(diagonals,rhs,diagonals_format='compact',name=None)", "function_name": "tridiagonal_matmul", "args": ["diagonals", "rhs"], "kwargs": [["diagonals_format", "'compact'"], ["name", "None"]]}
{"code": "tf.linalg.trace(x,name=None)", "function_name": "trace", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.tensor_diag(diagonal,name=None)", "function_name": "tensor_diag", "args": ["diagonal"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.tensor_diag_part(input,name=None)", "function_name": "tensor_diag_part", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.solve(matrix,rhs,adjoint=False,name=None)", "function_name": "solve", "args": ["matrix", "rhs"], "kwargs": [["adjoint", "False"], ["name", "None"]]}
{"code": "tf.linalg.sqrtm(input,name=None)", "function_name": "sqrtm", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)", "function_name": "svd", "args": ["tensor"], "kwargs": [["full_matrices", "False"], ["compute_uv", "True"], ["name", "None"]]}
{"code": "tf.linalg.qr(input,full_matrices=False,name=None)", "function_name": "qr", "args": ["input"], "kwargs": [["full_matrices", "False"], ["name", "None"]]}
{"code": "tf.linalg.set_diag(input,diagonal,name='set_diag',k=0)", "function_name": "set_diag", "args": ["input", "diagonal"], "kwargs": [["name", "'set_diag'"], ["k", "0"]]}
{"code": "tf.linalg.pinv(a,rcond=None,validate_args=False,name=None)", "function_name": "pinv", "args": ["a"], "kwargs": [["rcond", "None"], ["validate_args", "False"], ["name", "None"]]}
{"code": "tf.linalg.slogdet(input,name=None)", "function_name": "slogdet", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.normalize(tensor,ord='euclidean',axis=None,name=None)", "function_name": "normalize", "args": ["tensor"], "kwargs": [["ord", "'euclidean'"], ["axis", "None"], ["name", "None"]]}
{"code": "tf.linalg.matrix_transpose(a,name='matrix_transpose',conjugate=False)", "function_name": "matrix_transpose", "args": ["a"], "kwargs": [["name", "'matrix_transpose'"], ["conjugate", "False"]]}
{"code": "tf.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)", "function_name": "matvec", "args": ["a", "b"], "kwargs": [["transpose_a", "False"], ["adjoint_a", "False"], ["a_is_sparse", "False"], ["b_is_sparse", "False"], ["name", "None"]]}
{"code": "tf.linalg.matrix_rank(a,tol=None,validate_args=False,name=None)", "function_name": "matrix_rank", "args": ["a"], "kwargs": [["tol", "None"], ["validate_args", "False"], ["name", "None"]]}
{"code": "tf.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)", "function_name": "matmul", "args": ["a", "b"], "kwargs": [["transpose_a", "False"], ["transpose_b", "False"], ["adjoint_a", "False"], ["adjoint_b", "False"], ["a_is_sparse", "False"], ["b_is_sparse", "False"], ["name", "None"]]}
{"code": "tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)", "function_name": "lu_solve", "args": ["lower_upper", "perm", "rhs"], "kwargs": [["validate_args", "False"], ["name", "None"]]}
{"code": "tf.linalg.lu_reconstruct(lower_upper,perm,validate_args=False,name=None)", "function_name": "lu_reconstruct", "args": ["lower_upper", "perm"], "kwargs": [["validate_args", "False"], ["name", "None"]]}
{"code": "tf.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)", "function_name": "lstsq", "args": ["matrix", "rhs"], "kwargs": [["l2_regularizer", "0.0"], ["fast", "True"], ["name", "None"]]}
{"code": "tf.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)", "function_name": "lu", "args": ["input"], "kwargs": [["output_idx_type", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.linalg.lu_matrix_inverse(lower_upper,perm,validate_args=False,name=None)", "function_name": "lu_matrix_inverse", "args": ["lower_upper", "perm"], "kwargs": [["validate_args", "False"], ["name", "None"]]}
{"code": "tf.linalg.logdet(matrix,name=None)", "function_name": "logdet", "args": ["matrix"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.logm(input,name=None)", "function_name": "logm", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.inv(input,adjoint=False,name=None)", "function_name": "inv", "args": ["input"], "kwargs": [["adjoint", "False"], ["name", "None"]]}
{"code": "tf.linalg.expm(input,name=None)", "function_name": "expm", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.global_norm(t_list,name=None)", "function_name": "global_norm", "args": ["t_list"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.eigvalsh(tensor,name=None)", "function_name": "eigvalsh", "args": ["tensor"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.diag_part(input,name='diag_part',k=0,padding_value=0)", "function_name": "diag_part", "args": ["input"], "kwargs": [["name", "'diag_part'"], ["k", "0"], ["padding_value", "0"]]}
{"code": "tf.linalg.eigh(tensor,name=None)", "function_name": "eigh", "args": ["tensor"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.det(input,name=None)", "function_name": "det", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0)", "function_name": "diag", "args": ["diagonal"], "kwargs": [["name", "'diag'"], ["k", "0"], ["num_rows", "-1"], ["num_cols", "-1"], ["padding_value", "0"]]}
{"code": "tf.linalg.cross(a,b,name=None)", "function_name": "cross", "args": ["a", "b"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.band_part(input,num_lower,num_upper,name=None)", "function_name": "band_part", "args": ["input", "num_lower", "num_upper"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.adjoint(matrix,name=None)", "function_name": "adjoint", "args": ["matrix"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.cholesky(input,name=None)", "function_name": "cholesky", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.linalg.cholesky_solve(chol,rhs,name=None)", "function_name": "cholesky_solve", "args": ["chol", "rhs"], "kwargs": [["name", "None"]]}
{"code": "tf.keras.utils.to_categorical(y,num_classes=None,dtype='float32')", "function_name": "to_categorical", "args": ["y"], "kwargs": [["num_classes", "None"], ["dtype", "'float32'"]]}
{"code": "tf.keras.utils.serialize_keras_object(instance)", "function_name": "serialize_keras_object", "args": ["instance"], "kwargs": []}
{"code": "tf.keras.utils.register_keras_serializable(package='Custom',name=None)", "function_name": "register_keras_serializable", "args": [], "kwargs": [["package", "'Custom'"], ["name", "None"]]}
{"code": "tf.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96)", "function_name": "plot_model", "args": ["model"], "kwargs": [["to_file", "'model.png'"], ["show_shapes", "False"], ["show_layer_names", "True"], ["rankdir", "'TB'"], ["expand_nested", "False"], ["dpi", "96"]]}
{"code": "tf.keras.utils.multi_gpu_model(model,gpus,cpu_merge=True,cpu_relocation=False)", "function_name": "multi_gpu_model", "args": ["model", "gpus"], "kwargs": [["cpu_merge", "True"], ["cpu_relocation", "False"]]}
{"code": "tf.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)", "function_name": "get_source_inputs", "args": ["tensor"], "kwargs": [["layer", "None"], ["node_index", "None"]]}
{"code": "tf.keras.utils.normalize(x,axis=-1,order=2)", "function_name": "normalize", "args": ["x"], "kwargs": [["axis", "-1"], ["order", "2"]]}
{"code": "tf.keras.utils.model_to_dot(model,show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,subgraph=False)", "function_name": "model_to_dot", "args": ["model"], "kwargs": [["show_shapes", "False"], ["show_layer_names", "True"], ["rankdir", "'TB'"], ["expand_nested", "False"], ["dpi", "96"], ["subgraph", "False"]]}
{"code": "tf.keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)", "function_name": "get_file", "args": ["fname", "origin"], "kwargs": [["untar", "False"], ["md5_hash", "None"], ["file_hash", "None"], ["cache_subdir", "'datasets'"], ["hash_algorithm", "'auto'"], ["extract", "False"], ["archive_format", "'auto'"], ["cache_dir", "None"]]}
{"code": "tf.keras.utils.get_custom_objects()", "function_name": "get_custom_objects", "args": [""], "kwargs": []}
{"code": "tf.keras.utils.custom_object_scope(*args)", "function_name": "custom_object_scope", "args": ["*args"], "kwargs": []}
{"code": "tf.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')", "function_name": "deserialize_keras_object", "args": ["identifier"], "kwargs": [["module_objects", "None"], ["custom_objects", "None"], ["printable_module_name", "'object'"]]}
{"code": "tf.keras.utils.convert_all_kernels_in_model(model)", "function_name": "convert_all_kernels_in_model", "args": ["model"], "kwargs": []}
{"code": "tf.keras.regularizers.serialize(regularizer)", "function_name": "serialize", "args": ["regularizer"], "kwargs": []}
{"code": "tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)", "function_name": "l1_l2", "args": [], "kwargs": [["l1", "0.01"], ["l2", "0.01"]]}
{"code": "tf.keras.regularizers.l2(l=0.01)", "function_name": "l2", "args": [], "kwargs": [["l", "0.01"]]}
{"code": "tf.keras.regularizers.l1(l=0.01)", "function_name": "l1", "args": [], "kwargs": [["l", "0.01"]]}
{"code": "tf.keras.regularizers.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.regularizers.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.preprocessing.text.one_hot(text,n,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')", "function_name": "one_hot", "args": ["text", "n"], "kwargs": [["filters", "'!\"#$%&amp;()*+"], ["-./:;&lt;", "&gt;?@[\\\\]^_`{|}~\\t\\n'"], ["lower", "True"], ["split", "''"]]}
{"code": "tf.keras.preprocessing.text.text_to_word_sequence(text,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')", "function_name": "text_to_word_sequence", "args": ["text"], "kwargs": [["filters", "'!\"#$%&amp;()*+"], ["-./:;&lt;", "&gt;?@[\\\\]^_`{|}~\\t\\n'"], ["lower", "True"], ["split", "''"]]}
{"code": "tf.keras.preprocessing.text.tokenizer_from_json(json_string)", "function_name": "tokenizer_from_json", "args": ["json_string"], "kwargs": []}
{"code": "tf.keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')", "function_name": "hashing_trick", "args": ["text", "n"], "kwargs": [["hash_function", "None"], ["filters", "'!\"#$%&amp;()*+"], ["-./:;&lt;", "&gt;?@[\\\\]^_`{|}~\\t\\n'"], ["lower", "True"], ["split", "''"]]}
{"code": "tf.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)", "function_name": "skipgrams", "args": ["sequence", "vocabulary_size"], "kwargs": [["window_size", "4"], ["negative_samples", "1.0"], ["shuffle", "True"], ["categorical", "False"], ["sampling_table", "None"], ["seed", "None"]]}
{"code": "tf.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)", "function_name": "make_sampling_table", "args": ["size"], "kwargs": [["sampling_factor", "1e-05"]]}
{"code": "tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)", "function_name": "pad_sequences", "args": ["sequences"], "kwargs": [["maxlen", "None"], ["dtype", "'int32'"], ["padding", "'pre'"], ["truncating", "'pre'"], ["value", "0.0"]]}
{"code": "tf.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)", "function_name": "random_zoom", "args": ["x", "zoom_range"], "kwargs": [["row_axis", "1"], ["col_axis", "2"], ["channel_axis", "0"], ["fill_mode", "'nearest'"], ["cval", "0.0"], ["interpolation_order", "1"]]}
{"code": "tf.keras.preprocessing.image.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)", "function_name": "save_img", "args": ["path", "x", "**kwargs"], "kwargs": [["data_format", "None"], ["file_format", "None"], ["scale", "True"]]}
{"code": "tf.keras.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)", "function_name": "random_channel_shift", "args": ["x", "intensity_range"], "kwargs": [["channel_axis", "0"]]}
{"code": "tf.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)", "function_name": "random_rotation", "args": ["x", "rg"], "kwargs": [["row_axis", "1"], ["col_axis", "2"], ["channel_axis", "0"], ["fill_mode", "'nearest'"], ["cval", "0.0"], ["interpolation_order", "1"]]}
{"code": "tf.keras.preprocessing.image.random_brightness(x,brightness_range)", "function_name": "random_brightness", "args": ["x", "brightness_range"], "kwargs": []}
{"code": "tf.keras.preprocessing.image.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')", "function_name": "load_img", "args": ["path"], "kwargs": [["grayscale", "False"], ["color_mode", "'rgb'"], ["target_size", "None"], ["interpolation", "'nearest'"]]}
{"code": "tf.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)", "function_name": "random_shift", "args": ["x", "wrg", "hrg"], "kwargs": [["row_axis", "1"], ["col_axis", "2"], ["channel_axis", "0"], ["fill_mode", "'nearest'"], ["cval", "0.0"], ["interpolation_order", "1"]]}
{"code": "tf.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)", "function_name": "img_to_array", "args": ["img"], "kwargs": [["data_format", "None"], ["dtype", "None"]]}
{"code": "tf.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True,dtype=None)", "function_name": "array_to_img", "args": ["x"], "kwargs": [["data_format", "None"], ["scale", "True"], ["dtype", "None"]]}
{"code": "tf.keras.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)", "function_name": "apply_channel_shift", "args": ["x", "intensity"], "kwargs": [["channel_axis", "0"]]}
{"code": "tf.keras.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=0,col_axis=1,channel_axis=2,fill_mode='nearest',cval=0.0,order=1)", "function_name": "apply_affine_transform", "args": ["x"], "kwargs": [["theta", "0"], ["tx", "0"], ["ty", "0"], ["shear", "0"], ["zx", "1"], ["zy", "1"], ["row_axis", "0"], ["col_axis", "1"], ["channel_axis", "2"], ["fill_mode", "'nearest'"], ["cval", "0.0"], ["order", "1"]]}
{"code": "tf.keras.preprocessing.image.apply_brightness_shift(x,brightness)", "function_name": "apply_brightness_shift", "args": ["x", "brightness"], "kwargs": []}
{"code": "tf.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)", "function_name": "random_shear", "args": ["x", "intensity"], "kwargs": [["row_axis", "1"], ["col_axis", "2"], ["channel_axis", "0"], ["fill_mode", "'nearest'"], ["cval", "0.0"], ["interpolation_order", "1"]]}
{"code": "tf.keras.optimizers.schedules.serialize(learning_rate_schedule)", "function_name": "serialize", "args": ["learning_rate_schedule"], "kwargs": []}
{"code": "tf.keras.optimizers.schedules.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.optimizers.serialize(optimizer)", "function_name": "serialize", "args": ["optimizer"], "kwargs": []}
{"code": "tf.keras.optimizers.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.optimizers.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None)", "function_name": "save_model", "args": ["model", "filepath"], "kwargs": [["overwrite", "True"], ["include_optimizer", "True"], ["save_format", "None"], ["signatures", "None"], ["options", "None"]]}
{"code": "tf.keras.models.model_from_config(config,custom_objects=None)", "function_name": "model_from_config", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.models.model_from_yaml(yaml_string,custom_objects=None)", "function_name": "model_from_yaml", "args": ["yaml_string"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.models.model_from_json(json_string,custom_objects=None)", "function_name": "model_from_json", "args": ["json_string"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.models.load_model(filepath,custom_objects=None,compile=True)", "function_name": "load_model", "args": ["filepath"], "kwargs": [["custom_objects", "None"], ["compile", "True"]]}
{"code": "tf.keras.models.clone_model(model,input_tensors=None,clone_function=None)", "function_name": "clone_model", "args": ["model"], "kwargs": [["input_tensors", "None"], ["clone_function", "None"]]}
{"code": "tf.keras.mixed_precision.experimental.set_policy(policy)", "function_name": "set_policy", "args": ["policy"], "kwargs": []}
{"code": "tf.keras.mixed_precision.experimental.global_policy()", "function_name": "global_policy", "args": [""], "kwargs": []}
{"code": "tf.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)", "function_name": "top_k_categorical_accuracy", "args": ["y_true", "y_pred"], "kwargs": [["k", "5"]]}
{"code": "tf.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)", "function_name": "sparse_categorical_accuracy", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)", "function_name": "sparse_top_k_categorical_accuracy", "args": ["y_true", "y_pred"], "kwargs": [["k", "5"]]}
{"code": "tf.keras.metrics.serialize(metric)", "function_name": "serialize", "args": ["metric"], "kwargs": []}
{"code": "tf.keras.metrics.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.metrics.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.metrics.categorical_accuracy(y_true,y_pred)", "function_name": "categorical_accuracy", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)", "function_name": "binary_accuracy", "args": ["y_true", "y_pred"], "kwargs": [["threshold", "0.5"]]}
{"code": "tf.keras.losses.squared_hinge(y_true,y_pred)", "function_name": "squared_hinge", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.serialize(loss)", "function_name": "serialize", "args": ["loss"], "kwargs": []}
{"code": "tf.keras.losses.poisson(y_true,y_pred)", "function_name": "poisson", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.sparse_categorical_crossentropy(y_true,y_pred,from_logits=False,axis=-1)", "function_name": "sparse_categorical_crossentropy", "args": ["y_true", "y_pred"], "kwargs": [["from_logits", "False"], ["axis", "-1"]]}
{"code": "tf.keras.losses.MSE(y_true,y_pred)", "function_name": "MSE", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.MSLE(y_true,y_pred)", "function_name": "MSLE", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.logcosh(y_true,y_pred)", "function_name": "logcosh", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.MAE(y_true,y_pred)", "function_name": "MAE", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.MAPE(y_true,y_pred)", "function_name": "MAPE", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.hinge(y_true,y_pred)", "function_name": "hinge", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.KLD(y_true,y_pred)", "function_name": "KLD", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.losses.cosine_similarity(y_true,y_pred,axis=-1)", "function_name": "cosine_similarity", "args": ["y_true", "y_pred"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.losses.categorical_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0)", "function_name": "categorical_crossentropy", "args": ["y_true", "y_pred"], "kwargs": [["from_logits", "False"], ["label_smoothing", "0"]]}
{"code": "tf.keras.losses.deserialize(name,custom_objects=None)", "function_name": "deserialize", "args": ["name"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.losses.categorical_hinge(y_true,y_pred)", "function_name": "categorical_hinge", "args": ["y_true", "y_pred"], "kwargs": []}
{"code": "tf.keras.losses.binary_crossentropy(y_true,y_pred,from_logits=False,label_smoothing=0)", "function_name": "binary_crossentropy", "args": ["y_true", "y_pred"], "kwargs": [["from_logits", "False"], ["label_smoothing", "0"]]}
{"code": "tf.keras.layers.subtract(inputs,**kwargs)", "function_name": "subtract", "args": ["inputs", "**kwargs"], "kwargs": []}
{"code": "tf.keras.layers.serialize(layer)", "function_name": "serialize", "args": ["layer"], "kwargs": []}
{"code": "tf.keras.layers.multiply(inputs,**kwargs)", "function_name": "multiply", "args": ["inputs", "**kwargs"], "kwargs": []}
{"code": "tf.keras.layers.minimum(inputs,**kwargs)", "function_name": "minimum", "args": ["inputs", "**kwargs"], "kwargs": []}
{"code": "tf.keras.layers.maximum(inputs,**kwargs)", "function_name": "maximum", "args": ["inputs", "**kwargs"], "kwargs": []}
{"code": "tf.keras.layers.dot(inputs,axes,normalize=False,**kwargs)", "function_name": "dot", "args": ["inputs", "axes", "**kwargs"], "kwargs": [["normalize", "False"]]}
{"code": "tf.keras.layers.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.layers.concatenate(inputs,axis=-1,**kwargs)", "function_name": "concatenate", "args": ["inputs", "**kwargs"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.layers.average(inputs,**kwargs)", "function_name": "average", "args": ["inputs", "**kwargs"], "kwargs": []}
{"code": "tf.keras.layers.add(inputs,**kwargs)", "function_name": "add", "args": ["inputs", "**kwargs"], "kwargs": []}
{"code": "tf.keras.initializers.serialize(initializer)", "function_name": "serialize", "args": ["initializer"], "kwargs": []}
{"code": "tf.keras.initializers.lecun_uniform(seed=None)", "function_name": "lecun_uniform", "args": [], "kwargs": [["seed", "None"]]}
{"code": "tf.keras.initializers.lecun_normal(seed=None)", "function_name": "lecun_normal", "args": [], "kwargs": [["seed", "None"]]}
{"code": "tf.keras.initializers.he_normal(seed=None)", "function_name": "he_normal", "args": [], "kwargs": [["seed", "None"]]}
{"code": "tf.keras.initializers.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.initializers.he_uniform(seed=None)", "function_name": "he_uniform", "args": [], "kwargs": [["seed", "None"]]}
{"code": "tf.keras.initializers.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.experimental.terminate_keras_multiprocessing_pools(grace_period=0.1,use_sigkill=False)", "function_name": "terminate_keras_multiprocessing_pools", "args": [], "kwargs": [["grace_period", "0.1"], ["use_sigkill", "False"]]}
{"code": "tf.keras.datasets.reuters.load_data(path='reuters.npz',num_words=None,skip_top=0,maxlen=None,test_split=0.2,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)", "function_name": "load_data", "args": ["**kwargs"], "kwargs": [["path", "'reuters.npz'"], ["num_words", "None"], ["skip_top", "0"], ["maxlen", "None"], ["test_split", "0.2"], ["seed", "113"], ["start_char", "1"], ["oov_char", "2"], ["index_from", "3"]]}
{"code": "tf.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint')", "function_name": "model_to_estimator", "args": [], "kwargs": [["keras_model", "None"], ["keras_model_path", "None"], ["custom_objects", "None"], ["model_dir", "None"], ["config", "None"], ["checkpoint_format", "'checkpoint'"]]}
{"code": "tf.keras.datasets.imdb.load_data(path='imdb.npz',num_words=None,skip_top=0,maxlen=None,seed=113,start_char=1,oov_char=2,index_from=3,**kwargs)", "function_name": "load_data", "args": ["**kwargs"], "kwargs": [["path", "'imdb.npz'"], ["num_words", "None"], ["skip_top", "0"], ["maxlen", "None"], ["seed", "113"], ["start_char", "1"], ["oov_char", "2"], ["index_from", "3"]]}
{"code": "tf.keras.datasets.mnist.load_data(path='mnist.npz')", "function_name": "load_data", "args": [], "kwargs": [["path", "'mnist.npz'"]]}
{"code": "tf.keras.datasets.reuters.get_word_index(path='reuters_word_index.json')", "function_name": "get_word_index", "args": [], "kwargs": [["path", "'reuters_word_index.json'"]]}
{"code": "tf.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')", "function_name": "get_word_index", "args": [], "kwargs": [["path", "'imdb_word_index.json'"]]}
{"code": "tf.keras.datasets.cifar100.load_data(label_mode='fine')", "function_name": "load_data", "args": [], "kwargs": [["label_mode", "'fine'"]]}
{"code": "tf.keras.datasets.fashion_mnist.load_data()", "function_name": "load_data", "args": [""], "kwargs": []}
{"code": "tf.keras.datasets.cifar10.load_data()", "function_name": "load_data", "args": [""], "kwargs": []}
{"code": "tf.keras.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)", "function_name": "load_data", "args": [], "kwargs": [["path", "'boston_housing.npz'"], ["test_split", "0.2"], ["seed", "113"]]}
{"code": "tf.keras.constraints.serialize(constraint)", "function_name": "serialize", "args": ["constraint"], "kwargs": []}
{"code": "tf.keras.constraints.deserialize(config,custom_objects=None)", "function_name": "deserialize", "args": ["config"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.keras.constraints.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.backend.zeros_like(x,dtype=None,name=None)", "function_name": "zeros_like", "args": ["x"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.zeros(shape,dtype=None,name=None)", "function_name": "zeros", "args": ["shape"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.var(x,axis=None,keepdims=False)", "function_name": "var", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.update(x,new_x)", "function_name": "update", "args": ["x", "new_x"], "kwargs": []}
{"code": "tf.keras.backend.update_sub(x,decrement)", "function_name": "update_sub", "args": ["x", "decrement"], "kwargs": []}
{"code": "tf.keras.backend.update_add(x,increment)", "function_name": "update_add", "args": ["x", "increment"], "kwargs": []}
{"code": "tf.keras.backend.variable(value,dtype=None,name=None,constraint=None)", "function_name": "variable", "args": ["value"], "kwargs": [["dtype", "None"], ["name", "None"], ["constraint", "None"]]}
{"code": "tf.keras.backend.tile(x,n)", "function_name": "tile", "args": ["x", "n"], "kwargs": []}
{"code": "tf.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)", "function_name": "truncated_normal", "args": ["shape"], "kwargs": [["mean", "0.0"], ["stddev", "1.0"], ["dtype", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.transpose(x)", "function_name": "transpose", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.to_dense(tensor)", "function_name": "to_dense", "args": ["tensor"], "kwargs": []}
{"code": "tf.keras.backend.temporal_padding(x,padding=(1,1))", "function_name": "temporal_padding", "args": ["x", "1)"], "kwargs": [["padding", "(1"]]}
{"code": "tf.keras.backend.tanh(x)", "function_name": "tanh", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.stop_gradient(variables)", "function_name": "stop_gradient", "args": ["variables"], "kwargs": []}
{"code": "tf.keras.backend.square(x)", "function_name": "square", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.sum(x,axis=None,keepdims=False)", "function_name": "sum", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.std(x,axis=None,keepdims=False)", "function_name": "std", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.squeeze(x,axis)", "function_name": "squeeze", "args": ["x", "axis"], "kwargs": []}
{"code": "tf.keras.backend.stack(x,axis=0)", "function_name": "stack", "args": ["x"], "kwargs": [["axis", "0"]]}
{"code": "tf.keras.backend.switch(condition,then_expression,else_expression)", "function_name": "switch", "args": ["condition", "then_expression", "else_expression"], "kwargs": []}
{"code": "tf.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)", "function_name": "spatial_3d_padding", "args": ["x", "1)", "(1", "1)", "(1", "1))"], "kwargs": [["padding", "((1"], ["data_format", "None"]]}
{"code": "tf.keras.backend.sqrt(x)", "function_name": "sqrt", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.sign(x)", "function_name": "sign", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)", "function_name": "spatial_2d_padding", "args": ["x", "1)", "(1", "1))"], "kwargs": [["padding", "((1"], ["data_format", "None"]]}
{"code": "tf.keras.backend.softplus(x)", "function_name": "softplus", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.softmax(x,axis=-1)", "function_name": "softmax", "args": ["x"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.backend.sin(x)", "function_name": "sin", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.softsign(x)", "function_name": "softsign", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)", "function_name": "sparse_categorical_crossentropy", "args": ["target", "output"], "kwargs": [["from_logits", "False"], ["axis", "-1"]]}
{"code": "tf.keras.backend.shape(x)", "function_name": "shape", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.sigmoid(x)", "function_name": "sigmoid", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.set_value(x,value)", "function_name": "set_value", "args": ["x", "value"], "kwargs": []}
{"code": "tf.keras.backend.set_image_data_format(data_format)", "function_name": "set_image_data_format", "args": ["data_format"], "kwargs": []}
{"code": "tf.keras.backend.round(x)", "function_name": "round", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.set_learning_phase(value)", "function_name": "set_learning_phase", "args": ["value"], "kwargs": []}
{"code": "tf.keras.backend.set_epsilon(value)", "function_name": "set_epsilon", "args": ["value"], "kwargs": []}
{"code": "tf.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "function_name": "separable_conv2d", "args": ["x", "depthwise_kernel", "pointwise_kernel", "1)", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["dilation_rate", "(1"]]}
{"code": "tf.keras.backend.reverse(x,axes)", "function_name": "reverse", "args": ["x", "axes"], "kwargs": []}
{"code": "tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)", "function_name": "rnn", "args": ["step_function", "inputs", "initial_states"], "kwargs": [["go_backwards", "False"], ["mask", "None"], ["constants", "None"], ["unroll", "False"], ["input_length", "None"], ["time_major", "False"], ["zero_output_for_mask", "False"]]}
{"code": "tf.keras.backend.set_floatx(value)", "function_name": "set_floatx", "args": ["value"], "kwargs": []}
{"code": "tf.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)", "function_name": "resize_volumes", "args": ["x", "depth_factor", "height_factor", "width_factor", "data_format"], "kwargs": []}
{"code": "tf.keras.backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')", "function_name": "resize_images", "args": ["x", "height_factor", "width_factor", "data_format"], "kwargs": [["interpolation", "'nearest'"]]}
{"code": "tf.keras.backend.repeat(x,n)", "function_name": "repeat", "args": ["x", "n"], "kwargs": []}
{"code": "tf.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)", "function_name": "random_uniform", "args": ["shape"], "kwargs": [["minval", "0.0"], ["maxval", "1.0"], ["dtype", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.repeat_elements(x,rep,axis)", "function_name": "repeat_elements", "args": ["x", "rep", "axis"], "kwargs": []}
{"code": "tf.keras.backend.reshape(x,shape)", "function_name": "reshape", "args": ["x", "shape"], "kwargs": []}
{"code": "tf.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)", "function_name": "random_normal_variable", "args": ["shape", "mean", "scale"], "kwargs": [["dtype", "None"], ["name", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.reset_uids()", "function_name": "reset_uids", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)", "function_name": "random_uniform_variable", "args": ["shape", "low", "high"], "kwargs": [["dtype", "None"], ["name", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.relu(x,alpha=0.0,max_value=None,threshold=0)", "function_name": "relu", "args": ["x"], "kwargs": [["alpha", "0.0"], ["max_value", "None"], ["threshold", "0"]]}
{"code": "tf.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)", "function_name": "random_normal", "args": ["shape"], "kwargs": [["mean", "0.0"], ["stddev", "1.0"], ["dtype", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)", "function_name": "random_binomial", "args": ["shape"], "kwargs": [["p", "0.0"], ["dtype", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.pow(x,a)", "function_name": "pow", "args": ["x", "a"], "kwargs": []}
{"code": "tf.keras.backend.prod(x,axis=None,keepdims=False)", "function_name": "prod", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')", "function_name": "pool2d", "args": ["x", "pool_size", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["pool_mode", "'max'"]]}
{"code": "tf.keras.backend.print_tensor(x,message='')", "function_name": "print_tensor", "args": ["x"], "kwargs": [["message", "''"]]}
{"code": "tf.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,ragged=False)", "function_name": "placeholder", "args": [], "kwargs": [["shape", "None"], ["ndim", "None"], ["dtype", "None"], ["sparse", "False"], ["name", "None"], ["ragged", "False"]]}
{"code": "tf.keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')", "function_name": "pool3d", "args": ["x", "pool_size", "1", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["pool_mode", "'max'"]]}
{"code": "tf.keras.backend.ones_like(x,dtype=None,name=None)", "function_name": "ones_like", "args": ["x"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.one_hot(indices,num_classes)", "function_name": "one_hot", "args": ["indices", "num_classes"], "kwargs": []}
{"code": "tf.keras.backend.ones(shape,dtype=None,name=None)", "function_name": "ones", "args": ["shape"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.permute_dimensions(x,pattern)", "function_name": "permute_dimensions", "args": ["x", "pattern"], "kwargs": []}
{"code": "tf.keras.backend.not_equal(x,y)", "function_name": "not_equal", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.ndim(x)", "function_name": "ndim", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.moving_average_update(x,value,momentum)", "function_name": "moving_average_update", "args": ["x", "value", "momentum"], "kwargs": []}
{"code": "tf.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)", "function_name": "normalize_batch_in_training", "args": ["x", "gamma", "beta", "reduction_axes"], "kwargs": [["epsilon", "0.001"]]}
{"code": "tf.keras.backend.minimum(x,y)", "function_name": "minimum", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.mean(x,axis=None,keepdims=False)", "function_name": "mean", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.min(x,axis=None,keepdims=False)", "function_name": "min", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.name_scope(name)", "function_name": "name_scope", "args": ["name"], "kwargs": []}
{"code": "tf.keras.backend.map_fn(fn,elems,name=None,dtype=None)", "function_name": "map_fn", "args": ["fn", "elems"], "kwargs": [["name", "None"], ["dtype", "None"]]}
{"code": "tf.keras.backend.max(x,axis=None,keepdims=False)", "function_name": "max", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.less_equal(x,y)", "function_name": "less_equal", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.maximum(x,y)", "function_name": "maximum", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.log(x)", "function_name": "log", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)", "function_name": "local_conv2d", "args": ["inputs", "kernel", "kernel_size", "strides", "output_shape"], "kwargs": [["data_format", "None"]]}
{"code": "tf.keras.backend.manual_variable_initialization(value)", "function_name": "manual_variable_initialization", "args": ["value"], "kwargs": []}
{"code": "tf.keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)", "function_name": "local_conv1d", "args": ["inputs", "kernel", "kernel_size", "strides"], "kwargs": [["data_format", "None"]]}
{"code": "tf.keras.backend.less(x,y)", "function_name": "less", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.learning_phase()", "function_name": "learning_phase", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.learning_phase_scope(value)", "function_name": "learning_phase_scope", "args": ["value"], "kwargs": []}
{"code": "tf.keras.backend.in_test_phase(x,alt,training=None)", "function_name": "in_test_phase", "args": ["x", "alt"], "kwargs": [["training", "None"]]}
{"code": "tf.keras.backend.l2_normalize(x,axis=None)", "function_name": "l2_normalize", "args": ["x"], "kwargs": [["axis", "None"]]}
{"code": "tf.keras.backend.is_keras_tensor(x)", "function_name": "is_keras_tensor", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.is_sparse(tensor)", "function_name": "is_sparse", "args": ["tensor"], "kwargs": []}
{"code": "tf.keras.backend.in_train_phase(x,alt,training=None)", "function_name": "in_train_phase", "args": ["x", "alt"], "kwargs": [["training", "None"]]}
{"code": "tf.keras.backend.int_shape(x)", "function_name": "int_shape", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.in_top_k(predictions,targets,k)", "function_name": "in_top_k", "args": ["predictions", "targets", "k"], "kwargs": []}
{"code": "tf.keras.backend.image_data_format()", "function_name": "image_data_format", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.hard_sigmoid(x)", "function_name": "hard_sigmoid", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.get_uid(prefix='')", "function_name": "get_uid", "args": [], "kwargs": [["prefix", "''"]]}
{"code": "tf.keras.backend.function(inputs,outputs,updates=None,name=None,**kwargs)", "function_name": "function", "args": ["inputs", "outputs", "**kwargs"], "kwargs": [["updates", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.foldr(fn,elems,initializer=None,name=None)", "function_name": "foldr", "args": ["fn", "elems"], "kwargs": [["initializer", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.greater_equal(x,y)", "function_name": "greater_equal", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.gather(reference,indices)", "function_name": "gather", "args": ["reference", "indices"], "kwargs": []}
{"code": "tf.keras.backend.gradients(loss,variables)", "function_name": "gradients", "args": ["loss", "variables"], "kwargs": []}
{"code": "tf.keras.backend.get_value(x)", "function_name": "get_value", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.foldl(fn,elems,initializer=None,name=None)", "function_name": "foldl", "args": ["fn", "elems"], "kwargs": [["initializer", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.flatten(x)", "function_name": "flatten", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.greater(x,y)", "function_name": "greater", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.floatx()", "function_name": "floatx", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.exp(x)", "function_name": "exp", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.epsilon()", "function_name": "epsilon", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.expand_dims(x,axis=-1)", "function_name": "expand_dims", "args": ["x"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.backend.eye(size,dtype=None,name=None)", "function_name": "eye", "args": ["size"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.eval(x)", "function_name": "eval", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.dot(x,y)", "function_name": "dot", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.elu(x,alpha=1.0)", "function_name": "elu", "args": ["x"], "kwargs": [["alpha", "1.0"]]}
{"code": "tf.keras.backend.equal(x,y)", "function_name": "equal", "args": ["x", "y"], "kwargs": []}
{"code": "tf.keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "function_name": "depthwise_conv2d", "args": ["x", "depthwise_kernel", "1)", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["dilation_rate", "(1"]]}
{"code": "tf.keras.backend.cumsum(x,axis=0)", "function_name": "cumsum", "args": ["x"], "kwargs": [["axis", "0"]]}
{"code": "tf.keras.backend.dtype(x)", "function_name": "dtype", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)", "function_name": "ctc_label_dense_to_sparse", "args": ["labels", "label_lengths"], "kwargs": []}
{"code": "tf.keras.backend.cumprod(x,axis=0)", "function_name": "cumprod", "args": ["x"], "kwargs": [["axis", "0"]]}
{"code": "tf.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "function_name": "conv2d_transpose", "args": ["x", "kernel", "output_shape", "1)", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["dilation_rate", "(1"]]}
{"code": "tf.keras.backend.dropout(x,level,noise_shape=None,seed=None)", "function_name": "dropout", "args": ["x", "level"], "kwargs": [["noise_shape", "None"], ["seed", "None"]]}
{"code": "tf.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)", "function_name": "ctc_decode", "args": ["y_pred", "input_length"], "kwargs": [["greedy", "True"], ["beam_width", "100"], ["top_paths", "1"]]}
{"code": "tf.keras.backend.count_params(x)", "function_name": "count_params", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)", "function_name": "ctc_batch_cost", "args": ["y_true", "y_pred", "input_length", "label_length"], "kwargs": []}
{"code": "tf.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)", "function_name": "conv1d", "args": ["x", "kernel"], "kwargs": [["strides", "1"], ["padding", "'valid'"], ["data_format", "None"], ["dilation_rate", "1"]]}
{"code": "tf.keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))", "function_name": "conv2d", "args": ["x", "kernel", "1)", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["dilation_rate", "(1"]]}
{"code": "tf.keras.backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)", "function_name": "categorical_crossentropy", "args": ["target", "output"], "kwargs": [["from_logits", "False"], ["axis", "-1"]]}
{"code": "tf.keras.backend.cos(x)", "function_name": "cos", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.clip(x,min_value,max_value)", "function_name": "clip", "args": ["x", "min_value", "max_value"], "kwargs": []}
{"code": "tf.keras.backend.constant(value,dtype=None,shape=None,name=None)", "function_name": "constant", "args": ["value"], "kwargs": [["dtype", "None"], ["shape", "None"], ["name", "None"]]}
{"code": "tf.keras.backend.concatenate(tensors,axis=-1)", "function_name": "concatenate", "args": ["tensors"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.backend.clear_session()", "function_name": "clear_session", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.cast(x,dtype)", "function_name": "cast", "args": ["x", "dtype"], "kwargs": []}
{"code": "tf.keras.backend.cast_to_floatx(x)", "function_name": "cast_to_floatx", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))", "function_name": "conv3d", "args": ["x", "kernel", "1", "1)", "1", "1)"], "kwargs": [["strides", "(1"], ["padding", "'valid'"], ["data_format", "None"], ["dilation_rate", "(1"]]}
{"code": "tf.keras.backend.batch_flatten(x)", "function_name": "batch_flatten", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.bias_add(x,bias,data_format=None)", "function_name": "bias_add", "args": ["x", "bias"], "kwargs": [["data_format", "None"]]}
{"code": "tf.keras.backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)", "function_name": "batch_normalization", "args": ["x", "mean", "var", "beta", "gamma"], "kwargs": [["axis", "-1"], ["epsilon", "0.001"]]}
{"code": "tf.keras.backend.batch_set_value(tuples)", "function_name": "batch_set_value", "args": ["tuples"], "kwargs": []}
{"code": "tf.keras.backend.binary_crossentropy(target,output,from_logits=False)", "function_name": "binary_crossentropy", "args": ["target", "output"], "kwargs": [["from_logits", "False"]]}
{"code": "tf.keras.backend.batch_get_value(tensors)", "function_name": "batch_get_value", "args": ["tensors"], "kwargs": []}
{"code": "tf.keras.backend.batch_dot(x,y,axes=None)", "function_name": "batch_dot", "args": ["x", "y"], "kwargs": [["axes", "None"]]}
{"code": "tf.keras.backend.argmin(x,axis=-1)", "function_name": "argmin", "args": ["x"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.backend.backend()", "function_name": "backend", "args": [""], "kwargs": []}
{"code": "tf.keras.backend.arange(start,stop=None,step=1,dtype='int32')", "function_name": "arange", "args": ["start"], "kwargs": [["stop", "None"], ["step", "1"], ["dtype", "'int32'"]]}
{"code": "tf.keras.backend.argmax(x,axis=-1)", "function_name": "argmax", "args": ["x"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.backend.abs(x)", "function_name": "abs", "args": ["x"], "kwargs": []}
{"code": "tf.keras.backend.any(x,axis=None,keepdims=False)", "function_name": "any", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.backend.all(x,axis=None,keepdims=False)", "function_name": "all", "args": ["x"], "kwargs": [["axis", "None"], ["keepdims", "False"]]}
{"code": "tf.keras.applications.xception.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.xception.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.vgg19.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.vgg19.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.vgg16.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.vgg16.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.resnet_v2.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.resnet_v2.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.resnet.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.resnet.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.nasnet.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.mobilenet_v2.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.mobilenet_v2.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.mobilenet.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.nasnet.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.mobilenet.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.inception_v3.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.inception_resnet_v2.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.inception_v3.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.imagenet_utils.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.inception_resnet_v2.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.imagenet_utils.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.densenet.preprocess_input(*args,**kwargs)", "function_name": "preprocess_input", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.VGG19(*args,**kwargs)", "function_name": "VGG19", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.ResNet50V2(*args,**kwargs)", "function_name": "ResNet50V2", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.ResNet50(*args,**kwargs)", "function_name": "ResNet50", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.densenet.decode_predictions(*args,**kwargs)", "function_name": "decode_predictions", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.Xception(*args,**kwargs)", "function_name": "Xception", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.ResNet152V2(*args,**kwargs)", "function_name": "ResNet152V2", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.VGG16(*args,**kwargs)", "function_name": "VGG16", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.ResNet152(*args,**kwargs)", "function_name": "ResNet152", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.ResNet101V2(*args,**kwargs)", "function_name": "ResNet101V2", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.ResNet101(*args,**kwargs)", "function_name": "ResNet101", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.NASNetMobile(*args,**kwargs)", "function_name": "NASNetMobile", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.NASNetLarge(*args,**kwargs)", "function_name": "NASNetLarge", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.MobileNet(*args,**kwargs)", "function_name": "MobileNet", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.MobileNetV2(*args,**kwargs)", "function_name": "MobileNetV2", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.InceptionV3(*args,**kwargs)", "function_name": "InceptionV3", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.DenseNet169(*args,**kwargs)", "function_name": "DenseNet169", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.DenseNet201(*args,**kwargs)", "function_name": "DenseNet201", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.InceptionResNetV2(*args,**kwargs)", "function_name": "InceptionResNetV2", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.applications.DenseNet121(*args,**kwargs)", "function_name": "DenseNet121", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "tf.keras.activations.softmax(x,axis=-1)", "function_name": "softmax", "args": ["x"], "kwargs": [["axis", "-1"]]}
{"code": "tf.keras.activations.sigmoid(x)", "function_name": "sigmoid", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.softplus(x)", "function_name": "softplus", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.softsign(x)", "function_name": "softsign", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.serialize(activation)", "function_name": "serialize", "args": ["activation"], "kwargs": []}
{"code": "tf.keras.activations.selu(x)", "function_name": "selu", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0)", "function_name": "relu", "args": ["x"], "kwargs": [["alpha", "0.0"], ["max_value", "None"], ["threshold", "0"]]}
{"code": "tf.keras.activations.linear(x)", "function_name": "linear", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.tanh(x)", "function_name": "tanh", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.hard_sigmoid(x)", "function_name": "hard_sigmoid", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.exponential(x)", "function_name": "exponential", "args": ["x"], "kwargs": []}
{"code": "tf.keras.activations.get(identifier)", "function_name": "get", "args": ["identifier"], "kwargs": []}
{"code": "tf.keras.activations.elu(x,alpha=1.0)", "function_name": "elu", "args": ["x"], "kwargs": [["alpha", "1.0"]]}
{"code": "tf.keras.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=False,tensor=None,ragged=False,**kwargs)", "function_name": "Input", "args": ["**kwargs"], "kwargs": [["shape", "None"], ["batch_size", "None"], ["name", "None"], ["dtype", "None"], ["sparse", "False"], ["tensor", "None"], ["ragged", "False"]]}
{"code": "tf.keras.activations.deserialize(name,custom_objects=None)", "function_name": "deserialize", "args": ["name"], "kwargs": [["custom_objects", "None"]]}
{"code": "tf.io.gfile.walk(top,topdown=True,onerror=None)", "function_name": "walk", "args": ["top"], "kwargs": [["topdown", "True"], ["onerror", "None"]]}
{"code": "tf.io.gfile.rmtree(path)", "function_name": "rmtree", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.remove(path)", "function_name": "remove", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.stat(path)", "function_name": "stat", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.rename(src,dst,overwrite=False)", "function_name": "rename", "args": ["src", "dst"], "kwargs": [["overwrite", "False"]]}
{"code": "tf.io.gfile.mkdir(path)", "function_name": "mkdir", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.listdir(path)", "function_name": "listdir", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.makedirs(path)", "function_name": "makedirs", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.glob(pattern)", "function_name": "glob", "args": ["pattern"], "kwargs": []}
{"code": "tf.io.gfile.isdir(path)", "function_name": "isdir", "args": ["path"], "kwargs": []}
{"code": "tf.io.gfile.copy(src,dst,overwrite=False)", "function_name": "copy", "args": ["src", "dst"], "kwargs": [["overwrite", "False"]]}
{"code": "tf.io.gfile.exists(path)", "function_name": "exists", "args": ["path"], "kwargs": []}
{"code": "tf.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)", "function_name": "write_graph", "args": ["graph_or_graph_def", "logdir", "name"], "kwargs": [["as_text", "True"]]}
{"code": "tf.io.write_file(filename,contents,name=None)", "function_name": "write_file", "args": ["filename", "contents"], "kwargs": [["name", "None"]]}
{"code": "tf.io.serialize_tensor(tensor,name=None)", "function_name": "serialize_tensor", "args": ["tensor"], "kwargs": [["name", "None"]]}
{"code": "tf.io.serialize_many_sparse(sp_input,out_type=tf.dtypes.string,name=None)", "function_name": "serialize_many_sparse", "args": ["sp_input"], "kwargs": [["out_type", "tf.dtypes.string"], ["name", "None"]]}
{"code": "tf.io.serialize_sparse(sp_input,out_type=tf.dtypes.string,name=None)", "function_name": "serialize_sparse", "args": ["sp_input"], "kwargs": [["out_type", "tf.dtypes.string"], ["name", "None"]]}
{"code": "SparseTensor(indices=[[3,1],[20,0]],values=[0.5,-1.0]dense_shape=[100,3])", "function_name": "SparseTensor", "args": ["1]", "[20", "0]]", "3]"], "kwargs": [["indices", "[[3"], ["values", "[0.5"], ["-1.0]dense_shape", "[100"]]}
{"code": "tf.io.read_file(filename,name=None)", "function_name": "read_file", "args": ["filename"], "kwargs": [["name", "None"]]}
{"code": "tf.io.parse_tensor(serialized,out_type,name=None)", "function_name": "parse_tensor", "args": ["serialized", "out_type"], "kwargs": [["name", "None"]]}
{"code": "tf.io.parse_example(serialized,features,example_names=None,name=None)", "function_name": "parse_example", "args": ["serialized", "features"], "kwargs": [["example_names", "None"], ["name", "None"]]}
{"code": "tf.io.parse_single_example(serialized,features,example_names=None,name=None)", "function_name": "parse_single_example", "args": ["serialized", "features"], "kwargs": [["example_names", "None"], ["name", "None"]]}
{"code": "tf.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)", "function_name": "parse_single_sequence_example", "args": ["serialized"], "kwargs": [["context_features", "None"], ["sequence_features", "None"], ["example_name", "None"], ["name", "None"]]}
{"code": "tf.io.match_filenames_once(pattern,name=None)", "function_name": "match_filenames_once", "args": ["pattern"], "kwargs": [["name", "None"]]}
{"code": "tf.io.is_jpeg(contents,name=None)", "function_name": "is_jpeg", "args": ["contents"], "kwargs": [["name", "None"]]}
{"code": "tf.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)", "function_name": "parse_sequence_example", "args": ["serialized"], "kwargs": [["context_features", "None"], ["sequence_features", "None"], ["example_names", "None"], ["name", "None"]]}
{"code": "tf.io.matching_files(pattern,name=None)", "function_name": "matching_files", "args": ["pattern"], "kwargs": [["name", "None"]]}
{"code": "tf.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)", "function_name": "extract_jpeg_shape", "args": ["contents"], "kwargs": [["output_type", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.io.encode_base64(input,pad=False,name=None)", "function_name": "encode_base64", "args": ["input"], "kwargs": [["pad", "False"], ["name", "None"]]}
{"code": "tf.io.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)", "function_name": "decode_proto", "args": ["bytes", "message_type", "field_names", "output_types"], "kwargs": [["descriptor_source", "'local://'"], ["message_format", "'binary'"], ["sanitize", "False"], ["name", "None"]]}
{"code": "tf.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)", "function_name": "deserialize_many_sparse", "args": ["serialized_sparse", "dtype"], "kwargs": [["rank", "None"], ["name", "None"]]}
{"code": "tf.io.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)", "function_name": "encode_proto", "args": ["sizes", "values", "field_names", "message_type"], "kwargs": [["descriptor_source", "'local://'"], ["name", "None"]]}
{"code": "tf.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)", "function_name": "encode_jpeg", "args": ["image"], "kwargs": [["format", "''"], ["quality", "95"], ["progressive", "False"], ["optimize_size", "False"], ["chroma_downsampling", "True"], ["density_unit", "'in'"], ["x_density", "300"], ["y_density", "300"], ["xmp_metadata", "''"], ["name", "None"]]}
{"code": "tf.io.decode_raw(input_bytes,out_type,little_endian=True,fixed_length=None,name=None)", "function_name": "decode_raw", "args": ["input_bytes", "out_type"], "kwargs": [["little_endian", "True"], ["fixed_length", "None"], ["name", "None"]]}
{"code": "tf.io.decode_json_example(json_examples,name=None)", "function_name": "decode_json_example", "args": ["json_examples"], "kwargs": [["name", "None"]]}
{"code": "tf.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)", "function_name": "decode_png", "args": ["contents"], "kwargs": [["channels", "0"], ["dtype", "tf.dtypes.uint8"], ["name", "None"]]}
{"code": "tf.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)", "function_name": "decode_jpeg", "args": ["contents"], "kwargs": [["channels", "0"], ["ratio", "1"], ["fancy_upscaling", "True"], ["try_recover_truncated", "False"], ["acceptable_fraction", "1"], ["dct_method", "''"], ["name", "None"]]}
{"code": "tf.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)", "function_name": "decode_image", "args": ["contents"], "kwargs": [["channels", "None"], ["dtype", "tf.dtypes.uint8"], ["name", "None"], ["expand_animations", "True"]]}
{"code": "tf.io.decode_base64(input,name=None)", "function_name": "decode_base64", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.io.decode_compressed(bytes,compression_type='',name=None)", "function_name": "decode_compressed", "args": ["bytes"], "kwargs": [["compression_type", "''"], ["name", "None"]]}
{"code": "tf.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,name=None)", "function_name": "decode_csv", "args": ["records", "record_defaults", "'"], "kwargs": [["field_delim", "'"], ["use_quote_delim", "True"], ["na_value", "''"], ["select_cols", "None"], ["name", "None"]]}
{"code": "tf.io.decode_bmp(contents,channels=0,name=None)", "function_name": "decode_bmp", "args": ["contents"], "kwargs": [["channels", "0"], ["name", "None"]]}
{"code": "tf.io.decode_gif(contents,name=None)", "function_name": "decode_gif", "args": ["contents"], "kwargs": [["name", "None"]]}
{"code": "tf.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)", "function_name": "decode_and_crop_jpeg", "args": ["contents", "crop_window"], "kwargs": [["channels", "0"], ["ratio", "1"], ["fancy_upscaling", "True"], ["try_recover_truncated", "False"], ["acceptable_fraction", "1"], ["dct_method", "''"], ["name", "None"]]}
{"code": "tf.image.yiq_to_rgb(images)", "function_name": "yiq_to_rgb", "args": ["images"], "kwargs": []}
{"code": "tf.image.yuv_to_rgb(images)", "function_name": "yuv_to_rgb", "args": ["images"], "kwargs": []}
{"code": "tf.image.transpose(image,name=None)", "function_name": "transpose", "args": ["image"], "kwargs": [["name", "None"]]}
{"code": "tf.image.rgb_to_yuv(images)", "function_name": "rgb_to_yuv", "args": ["images"], "kwargs": []}
{"code": "tf.image.sobel_edges(image)", "function_name": "sobel_edges", "args": ["image"], "kwargs": []}
{"code": "tf.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)", "function_name": "ssim_multiscale", "args": ["img1", "img2", "max_val"], "kwargs": [["power_factors", "_MSSSIM_WEIGHTS"], ["filter_size", "11"], ["filter_sigma", "1.5"], ["k1", "0.01"], ["k2", "0.03"]]}
{"code": "tf.image.total_variation(images,name=None)", "function_name": "total_variation", "args": ["images"], "kwargs": [["name", "None"]]}
{"code": "tf.image.rot90(image,k=1,name=None)", "function_name": "rot90", "args": ["image"], "kwargs": [["k", "1"], ["name", "None"]]}
{"code": "tf.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=0,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)", "function_name": "sample_distorted_bounding_box", "args": ["image_size", "bounding_boxes"], "kwargs": [["seed", "0"], ["min_object_covered", "0.1"], ["aspect_ratio_range", "None"], ["area_range", "None"], ["max_attempts", "None"], ["use_image_if_no_bounding_boxes", "None"], ["name", "None"]]}
{"code": "tf.image.ssim(img1,img2,max_val,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)", "function_name": "ssim", "args": ["img1", "img2", "max_val"], "kwargs": [["filter_size", "11"], ["filter_sigma", "1.5"], ["k1", "0.01"], ["k2", "0.03"]]}
{"code": "tf.image.rgb_to_hsv(images,name=None)", "function_name": "rgb_to_hsv", "args": ["images"], "kwargs": [["name", "None"]]}
{"code": "tf.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)", "function_name": "random_jpeg_quality", "args": ["image", "min_jpeg_quality", "max_jpeg_quality"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.rgb_to_yiq(images)", "function_name": "rgb_to_yiq", "args": ["images"], "kwargs": []}
{"code": "tf.image.resize_with_pad(image,target_height,target_width,method=ResizeMethod.BILINEAR,antialias=False)", "function_name": "resize_with_pad", "args": ["image", "target_height", "target_width"], "kwargs": [["method", "ResizeMethod.BILINEAR"], ["antialias", "False"]]}
{"code": "tf.image.resize(images,size,method=ResizeMethod.BILINEAR,preserve_aspect_ratio=False,antialias=False,name=None)", "function_name": "resize", "args": ["images", "size"], "kwargs": [["method", "ResizeMethod.BILINEAR"], ["preserve_aspect_ratio", "False"], ["antialias", "False"], ["name", "None"]]}
{"code": "tf.image.resize_with_crop_or_pad(image,target_height,target_width)", "function_name": "resize_with_crop_or_pad", "args": ["image", "target_height", "target_width"], "kwargs": []}
{"code": "tf.image.random_saturation(image,lower,upper,seed=None)", "function_name": "random_saturation", "args": ["image", "lower", "upper"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.rgb_to_grayscale(images,name=None)", "function_name": "rgb_to_grayscale", "args": ["images"], "kwargs": [["name", "None"]]}
{"code": "tf.image.random_hue(image,max_delta,seed=None)", "function_name": "random_hue", "args": ["image", "max_delta"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.random_flip_up_down(image,seed=None)", "function_name": "random_flip_up_down", "args": ["image"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.random_flip_left_right(image,seed=None)", "function_name": "random_flip_left_right", "args": ["image"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)", "function_name": "pad_to_bounding_box", "args": ["image", "offset_height", "offset_width", "target_height", "target_width"], "kwargs": []}
{"code": "tf.image.random_crop(value,size,seed=None,name=None)", "function_name": "random_crop", "args": ["value", "size"], "kwargs": [["seed", "None"], ["name", "None"]]}
{"code": "tf.image.random_contrast(image,lower,upper,seed=None)", "function_name": "random_contrast", "args": ["image", "lower", "upper"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.random_brightness(image,max_delta,seed=None)", "function_name": "random_brightness", "args": ["image", "max_delta"], "kwargs": [["seed", "None"]]}
{"code": "tf.image.per_image_standardization(image)", "function_name": "per_image_standardization", "args": ["image"], "kwargs": []}
{"code": "tf.image.non_max_suppression_with_scores(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),soft_nms_sigma=0.0,name=None)", "function_name": "non_max_suppression_with_scores", "args": ["boxes", "scores", "max_output_size"], "kwargs": [["iou_threshold", "0.5"], ["score_threshold", "float('-inf')"], ["soft_nms_sigma", "0.0"], ["name", "None"]]}
{"code": "tf.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)", "function_name": "non_max_suppression_overlaps", "args": ["overlaps", "scores", "max_output_size"], "kwargs": [["overlap_threshold", "0.5"], ["score_threshold", "float('-inf')"], ["name", "None"]]}
{"code": "tf.image.psnr(a,b,max_val,name=None)", "function_name": "psnr", "args": ["a", "b", "max_val"], "kwargs": [["name", "None"]]}
{"code": "tf.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None)", "function_name": "non_max_suppression_padded", "args": ["boxes", "scores", "max_output_size"], "kwargs": [["iou_threshold", "0.5"], ["score_threshold", "float('-inf')"], ["pad_to_max_output_size", "False"], ["name", "None"]]}
{"code": "tf.image.hsv_to_rgb(images,name=None)", "function_name": "hsv_to_rgb", "args": ["images"], "kwargs": [["name", "None"]]}
{"code": "tf.image.image_gradients(image)", "function_name": "image_gradients", "args": ["image"], "kwargs": []}
{"code": "tf.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)", "function_name": "non_max_suppression", "args": ["boxes", "scores", "max_output_size"], "kwargs": [["iou_threshold", "0.5"], ["score_threshold", "float('-inf')"], ["name", "None"]]}
{"code": "tf.image.grayscale_to_rgb(images,name=None)", "function_name": "grayscale_to_rgb", "args": ["images"], "kwargs": [["name", "None"]]}
{"code": "tf.image.generate_bounding_box_proposals(scores,bbox_deltas,image_info,anchors,nms_threshold=0.7,pre_nms_topn=6000,min_size=16,post_nms_topn=300,name=None)", "function_name": "generate_bounding_box_proposals", "args": ["scores", "bbox_deltas", "image_info", "anchors"], "kwargs": [["nms_threshold", "0.7"], ["pre_nms_topn", "6000"], ["min_size", "16"], ["post_nms_topn", "300"], ["name", "None"]]}
{"code": "tf.image.flip_up_down(image)", "function_name": "flip_up_down", "args": ["image"], "kwargs": []}
{"code": "tf.image.extract_patches(images,sizes,strides,rates,padding,name=None)", "function_name": "extract_patches", "args": ["images", "sizes", "strides", "rates", "padding"], "kwargs": [["name", "None"]]}
{"code": "tf.image.encode_png(image,compression=-1,name=None)", "function_name": "encode_png", "args": ["image"], "kwargs": [["compression", "-1"], ["name", "None"]]}
{"code": "tf.image.convert_image_dtype(image,dtype,saturate=False,name=None)", "function_name": "convert_image_dtype", "args": ["image", "dtype"], "kwargs": [["saturate", "False"], ["name", "None"]]}
{"code": "tf.image.draw_bounding_boxes(images,boxes,colors,name=None)", "function_name": "draw_bounding_boxes", "args": ["images", "boxes", "colors"], "kwargs": [["name", "None"]]}
{"code": "tf.image.flip_left_right(image)", "function_name": "flip_left_right", "args": ["image"], "kwargs": []}
{"code": "tf.image.combined_non_max_suppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_per_class=False,clip_boxes=True,name=None)", "function_name": "combined_non_max_suppression", "args": ["boxes", "scores", "max_output_size_per_class", "max_total_size"], "kwargs": [["iou_threshold", "0.5"], ["score_threshold", "float('-inf')"], ["pad_per_class", "False"], ["clip_boxes", "True"], ["name", "None"]]}
{"code": "tf.image.crop_and_resize(image,boxes,box_indices,crop_size,method='bilinear',extrapolation_value=0,name=None)", "function_name": "crop_and_resize", "args": ["image", "boxes", "box_indices", "crop_size"], "kwargs": [["method", "'bilinear'"], ["extrapolation_value", "0"], ["name", "None"]]}
{"code": "tf.image.central_crop(image,central_fraction)", "function_name": "central_crop", "args": ["image", "central_fraction"], "kwargs": []}
{"code": "tf.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)", "function_name": "crop_to_bounding_box", "args": ["image", "offset_height", "offset_width", "target_height", "target_width"], "kwargs": []}
{"code": "tf.image.adjust_saturation(image,saturation_factor,name=None)", "function_name": "adjust_saturation", "args": ["image", "saturation_factor"], "kwargs": [["name", "None"]]}
{"code": "tf.image.adjust_jpeg_quality(image,jpeg_quality,name=None)", "function_name": "adjust_jpeg_quality", "args": ["image", "jpeg_quality"], "kwargs": [["name", "None"]]}
{"code": "tf.image.adjust_gamma(image,gamma=1,gain=1)", "function_name": "adjust_gamma", "args": ["image"], "kwargs": [["gamma", "1"], ["gain", "1"]]}
{"code": "tf.image.adjust_hue(image,delta,name=None)", "function_name": "adjust_hue", "args": ["image", "delta"], "kwargs": [["name", "None"]]}
{"code": "tf.image.adjust_contrast(images,contrast_factor)", "function_name": "adjust_contrast", "args": ["images", "contrast_factor"], "kwargs": []}
{"code": "tf.image.adjust_brightness(image,delta)", "function_name": "adjust_brightness", "args": ["image", "delta"], "kwargs": []}
{"code": "tf.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)", "function_name": "import_graph_def", "args": ["graph_def"], "kwargs": [["input_map", "None"], ["return_elements", "None"], ["name", "None"], ["op_dict", "None"], ["producer_op_list", "None"]]}
{"code": "tf.feature_column.shared_embeddings(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)", "function_name": "shared_embeddings", "args": ["categorical_columns", "dimension"], "kwargs": [["combiner", "'mean'"], ["initializer", "None"], ["shared_embedding_collection_name", "None"], ["ckpt_to_load_from", "None"], ["tensor_name_in_ckpt", "None"], ["max_norm", "None"], ["trainable", "True"]]}
{"code": "tf.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)", "function_name": "sequence_numeric_column", "args": ["key", ")"], "kwargs": [["shape", "(1"], ["default_value", "0.0"], ["dtype", "tf.dtypes.float32"], ["normalizer_fn", "None"]]}
{"code": "tf.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)", "function_name": "weighted_categorical_column", "args": ["categorical_column", "weight_feature_key"], "kwargs": [["dtype", "tf.dtypes.float32"]]}
{"code": "tf.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)", "function_name": "sequence_categorical_column_with_vocabulary_list", "args": ["key", "vocabulary_list"], "kwargs": [["dtype", "None"], ["default_value", "-1"], ["num_oov_buckets", "0"]]}
{"code": "tf.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)", "function_name": "numeric_column", "args": ["key", ")"], "kwargs": [["shape", "(1"], ["default_value", "None"], ["dtype", "tf.dtypes.float32"], ["normalizer_fn", "None"]]}
{"code": "tf.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)", "function_name": "sequence_categorical_column_with_vocabulary_file", "args": ["key", "vocabulary_file"], "kwargs": [["vocabulary_size", "None"], ["num_oov_buckets", "0"], ["default_value", "None"], ["dtype", "tf.dtypes.string"]]}
{"code": "tf.feature_column.make_parse_example_spec(feature_columns)", "function_name": "make_parse_example_spec", "args": ["feature_columns"], "kwargs": []}
{"code": "tf.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)", "function_name": "sequence_categorical_column_with_hash_bucket", "args": ["key", "hash_bucket_size"], "kwargs": [["dtype", "tf.dtypes.string"]]}
{"code": "tf.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)", "function_name": "embedding_column", "args": ["categorical_column", "dimension"], "kwargs": [["combiner", "'mean'"], ["initializer", "None"], ["ckpt_to_load_from", "None"], ["tensor_name_in_ckpt", "None"], ["max_norm", "None"], ["trainable", "True"]]}
{"code": "tf.feature_column.indicator_column(categorical_column)", "function_name": "indicator_column", "args": ["categorical_column"], "kwargs": []}
{"code": "tf.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)", "function_name": "categorical_column_with_vocabulary_list", "args": ["key", "vocabulary_list"], "kwargs": [["dtype", "None"], ["default_value", "-1"], ["num_oov_buckets", "0"]]}
{"code": "tf.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)", "function_name": "sequence_categorical_column_with_identity", "args": ["key", "num_buckets"], "kwargs": [["default_value", "None"]]}
{"code": "tf.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)", "function_name": "crossed_column", "args": ["keys", "hash_bucket_size"], "kwargs": [["hash_key", "None"]]}
{"code": "tf.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,dtype=tf.dtypes.string,default_value=None,num_oov_buckets=0)", "function_name": "categorical_column_with_vocabulary_file", "args": ["key", "vocabulary_file"], "kwargs": [["vocabulary_size", "None"], ["dtype", "tf.dtypes.string"], ["default_value", "None"], ["num_oov_buckets", "0"]]}
{"code": "tf.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)", "function_name": "categorical_column_with_identity", "args": ["key", "num_buckets"], "kwargs": [["default_value", "None"]]}
{"code": "tf.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)", "function_name": "categorical_column_with_hash_bucket", "args": ["key", "hash_bucket_size"], "kwargs": [["dtype", "tf.dtypes.string"]]}
{"code": "tf.experimental.function_executor_type(executor_type)", "function_name": "function_executor_type", "args": ["executor_type"], "kwargs": []}
{"code": "tf.feature_column.bucketized_column(source_column,boundaries)", "function_name": "bucketized_column", "args": ["source_column", "boundaries"], "kwargs": []}
{"code": "as_signature_def(receiver_tensors)", "function_name": "as_signature_def", "args": ["receiver_tensors"], "kwargs": []}
{"code": "tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)", "function_name": "build_parsing_serving_input_receiver_fn", "args": ["feature_spec"], "kwargs": [["default_batch_size", "None"]]}
{"code": "tf.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)", "function_name": "build_raw_serving_input_receiver_fn", "args": ["features"], "kwargs": [["default_batch_size", "None"]]}
{"code": "tf.estimator.experimental.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "function_name": "stop_if_no_increase_hook", "args": ["estimator", "metric_name", "max_steps_without_increase"], "kwargs": [["eval_dir", "None"], ["min_steps", "0"], ["run_every_secs", "60"], ["run_every_steps", "None"]]}
{"code": "tf.estimator.experimental.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "function_name": "stop_if_no_decrease_hook", "args": ["estimator", "metric_name", "max_steps_without_decrease"], "kwargs": [["eval_dir", "None"], ["min_steps", "0"], ["run_every_secs", "60"], ["run_every_steps", "None"]]}
{"code": "tf.estimator.experimental.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "function_name": "stop_if_lower_hook", "args": ["estimator", "metric_name", "threshold"], "kwargs": [["eval_dir", "None"], ["min_steps", "0"], ["run_every_secs", "60"], ["run_every_steps", "None"]]}
{"code": "tf.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)", "function_name": "stop_if_higher_hook", "args": ["estimator", "metric_name", "threshold"], "kwargs": [["eval_dir", "None"], ["min_steps", "0"], ["run_every_secs", "60"], ["run_every_steps", "None"]]}
{"code": "tf.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)", "function_name": "make_stop_at_checkpoint_step_hook", "args": ["estimator", "last_step"], "kwargs": [["wait_after_file_check_secs", "30"]]}
{"code": "tf.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)", "function_name": "make_early_stopping_hook", "args": ["estimator", "should_stop_fn"], "kwargs": [["run_every_secs", "60"], ["run_every_steps", "None"]]}
{"code": "deftrain_input_fn():...returntrain_datasetdefeval_input_fn():...returneval_datasetestimator=tf.estimator.DNNClassifier(...)evaluator=tf.estimator.experimental.InMemoryEvaluatorHook(estimator,eval_input_fn)estimator.train(train_input_fn,hooks=[evaluator])", "function_name": "deftrain_input_fn", "args": ["eval_input_fn)estimator.train(train_input_fn"], "kwargs": [["):...returntrain_datasetdefeval_input_fn():...returneval_datasetestimator", "tf.estimator.DNNClassifier(...)evaluator", "tf.estimator.experimental.InMemoryEvaluatorHook(estimator"], ["hooks", "[evaluator]"]]}
{"code": "tf.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)", "function_name": "call_logit_fn", "args": ["logit_fn", "features", "mode", "params", "config"], "kwargs": []}
{"code": "tf.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)", "function_name": "build_raw_supervised_input_receiver_fn", "args": ["features", "labels"], "kwargs": [["default_batch_size", "None"]]}
{"code": "tf.estimator.train_and_evaluate(estimator,train_spec,eval_spec)", "function_name": "train_and_evaluate", "args": ["estimator", "train_spec", "eval_spec"], "kwargs": []}
{"code": "after_create_session(session,coord)", "function_name": "after_create_session", "args": ["session", "coord"], "kwargs": []}
{"code": "tf.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)", "function_name": "regressor_parse_example_spec", "args": ["feature_columns", "label_key"], "kwargs": [["label_dtype", "tf.dtypes.float32"], ["label_default", "None"], ["label_dimension", "1"], ["weight_column", "None"]]}
{"code": "create_estimator_spec(features,mode,logits,labels=None,optimizer=None,trainable_variables=None,train_op_fn=None,update_ops=None,regularization_losses=None)", "function_name": "create_estimator_spec", "args": ["features", "mode", "logits"], "kwargs": [["labels", "None"], ["optimizer", "None"], ["trainable_variables", "None"], ["train_op_fn", "None"], ["update_ops", "None"], ["regularization_losses", "None"]]}
{"code": "export(estimator,export_path,checkpoint_path,eval_result,is_the_final_export)", "function_name": "export", "args": ["estimator", "export_path", "checkpoint_path", "eval_result", "is_the_final_export"], "kwargs": []}
{"code": "tf.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)", "function_name": "classifier_parse_example_spec", "args": ["feature_columns", "label_key"], "kwargs": [["label_dtype", "tf.dtypes.int64"], ["label_default", "None"], ["weight_column", "None"]]}
{"code": "tf.estimator.add_metrics(estimator,metric_fn)", "function_name": "add_metrics", "args": ["estimator", "metric_fn"], "kwargs": []}
{"code": "tf.dtypes.saturate_cast(value,dtype,name=None)", "function_name": "saturate_cast", "args": ["value", "dtype"], "kwargs": [["name", "None"]]}
{"code": "tf.dtypes.complex(real,imag,name=None)", "function_name": "complex", "args": ["real", "imag"], "kwargs": [["name", "None"]]}
{"code": "tf.dtypes.as_dtype(type_value)", "function_name": "as_dtype", "args": ["type_value"], "kwargs": []}
{"code": "experimental_distribute_dataset(dataset)", "function_name": "experimental_distribute_dataset", "args": ["dataset"], "kwargs": []}
{"code": "cluster_spec()", "function_name": "cluster_spec", "args": [""], "kwargs": []}
{"code": "tf.distribute.in_cross_replica_context()", "function_name": "in_cross_replica_context", "args": [""], "kwargs": []}
{"code": "tf.distribute.get_strategy()", "function_name": "get_strategy", "args": [""], "kwargs": []}
{"code": "tf.distribute.has_strategy()", "function_name": "has_strategy", "args": [""], "kwargs": []}
{"code": "tf.distribute.get_replica_context()", "function_name": "get_replica_context", "args": [""], "kwargs": []}
{"code": "tf.distribute.experimental_set_strategy(strategy)", "function_name": "experimental_set_strategy", "args": ["strategy"], "kwargs": []}
{"code": "tf.debugging.set_log_device_placement(enabled)", "function_name": "set_log_device_placement", "args": ["enabled"], "kwargs": []}
{"code": "tf.debugging.experimental.disable_dump_debug_info()", "function_name": "disable_dump_debug_info", "args": [""], "kwargs": []}
{"code": "tf.debugging.get_log_device_placement()", "function_name": "get_log_device_placement", "args": [""], "kwargs": []}
{"code": "tf.debugging.is_numeric_tensor(tensor)", "function_name": "is_numeric_tensor", "args": ["tensor"], "kwargs": []}
{"code": "tf.debugging.enable_check_numerics(stack_height_limit=30,path_length_limit=50)", "function_name": "enable_check_numerics", "args": [], "kwargs": [["stack_height_limit", "30"], ["path_length_limit", "50"]]}
{"code": "tf.debugging.experimental.enable_dump_debug_info(dump_root,tensor_debug_mode=DEFAULT_TENSOR_DEBUG_MODE,circular_buffer_size=1000,op_regex=None,tensor_dtypes=None)", "function_name": "enable_dump_debug_info", "args": ["dump_root"], "kwargs": [["tensor_debug_mode", "DEFAULT_TENSOR_DEBUG_MODE"], ["circular_buffer_size", "1000"], ["op_regex", "None"], ["tensor_dtypes", "None"]]}
{"code": "tf.debugging.disable_check_numerics()", "function_name": "disable_check_numerics", "args": [""], "kwargs": []}
{"code": "tf.debugging.assert_shapes(shapes,data=None,summarize=None,message=None,name=None)", "function_name": "assert_shapes", "args": ["shapes"], "kwargs": [["data", "None"], ["summarize", "None"], ["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_type(tensor,tf_type,message=None,name=None)", "function_name": "assert_type", "args": ["tensor", "tf_type"], "kwargs": [["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_rank_in(x,ranks,message=None,name=None)", "function_name": "assert_rank_in", "args": ["x", "ranks"], "kwargs": [["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_scalar(tensor,message=None,name=None)", "function_name": "assert_scalar", "args": ["tensor"], "kwargs": [["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_same_float_dtype(tensors=None,dtype=None)", "function_name": "assert_same_float_dtype", "args": [], "kwargs": [["tensors", "None"], ["dtype", "None"]]}
{"code": "tf.debugging.check_numerics(tensor,message,name=None)", "function_name": "check_numerics", "args": ["tensor", "message"], "kwargs": [["name", "None"]]}
{"code": "tf.debugging.assert_proper_iterable(values)", "function_name": "assert_proper_iterable", "args": ["values"], "kwargs": []}
{"code": "tf.debugging.assert_rank_at_least(x,rank,message=None,name=None)", "function_name": "assert_rank_at_least", "args": ["x", "rank"], "kwargs": [["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_rank(x,rank,message=None,name=None)", "function_name": "assert_rank", "args": ["x", "rank"], "kwargs": [["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_positive(x,message=None,summarize=None,name=None)", "function_name": "assert_positive", "args": ["x"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_near(x,y,rtol=None,atol=None,message=None,summarize=None,name=None)", "function_name": "assert_near", "args": ["x", "y"], "kwargs": [["rtol", "None"], ["atol", "None"], ["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_non_positive(x,message=None,summarize=None,name=None)", "function_name": "assert_non_positive", "args": ["x"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_non_negative(x,message=None,summarize=None,name=None)", "function_name": "assert_non_negative", "args": ["x"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_none_equal(x,y,summarize=None,message=None,name=None)", "function_name": "assert_none_equal", "args": ["x", "y"], "kwargs": [["summarize", "None"], ["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_less(x,y,message=None,summarize=None,name=None)", "function_name": "assert_less", "args": ["x", "y"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_less_equal(x,y,message=None,summarize=None,name=None)", "function_name": "assert_less_equal", "args": ["x", "y"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_integer(x,message=None,name=None)", "function_name": "assert_integer", "args": ["x"], "kwargs": [["message", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_negative(x,message=None,summarize=None,name=None)", "function_name": "assert_negative", "args": ["x"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_greater_equal(x,y,message=None,summarize=None,name=None)", "function_name": "assert_greater_equal", "args": ["x", "y"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_greater(x,y,message=None,summarize=None,name=None)", "function_name": "assert_greater", "args": ["x", "y"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_all_finite(x,message,name=None)", "function_name": "assert_all_finite", "args": ["x", "message"], "kwargs": [["name", "None"]]}
{"code": "tf.debugging.Assert(condition,data,summarize=None,name=None)", "function_name": "Assert", "args": ["condition", "data"], "kwargs": [["summarize", "None"], ["name", "None"]]}
{"code": "tf.debugging.assert_equal(x,y,message=None,summarize=None,name=None)", "function_name": "assert_equal", "args": ["x", "y"], "kwargs": [["message", "None"], ["summarize", "None"], ["name", "None"]]}
{"code": "tf.data.experimental.unique()", "function_name": "unique", "args": [""], "kwargs": []}
{"code": "tf.data.experimental.to_variant(dataset)", "function_name": "to_variant", "args": ["dataset"], "kwargs": []}
{"code": "tf.data.experimental.unbatch()", "function_name": "unbatch", "args": [""], "kwargs": []}
{"code": "tf.data.experimental.take_while(predicate)", "function_name": "take_while", "args": ["predicate"], "kwargs": []}
{"code": "tf.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)", "function_name": "shuffle_and_repeat", "args": ["buffer_size"], "kwargs": [["count", "None"], ["seed", "None"]]}
{"code": "tf.data.experimental.sample_from_datasets(datasets,weights=None,seed=None)", "function_name": "sample_from_datasets", "args": ["datasets"], "kwargs": [["weights", "None"], ["seed", "None"]]}
{"code": "tf.data.experimental.scan(initial_state,scan_func)", "function_name": "scan", "args": ["initial_state", "scan_func"], "kwargs": []}
{"code": "tf.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)", "function_name": "rejection_resample", "args": ["class_func", "target_dist"], "kwargs": [["initial_dist", "None"], ["seed", "None"]]}
{"code": "tf.data.experimental.prefetch_to_device(device,buffer_size=None)", "function_name": "prefetch_to_device", "args": ["device"], "kwargs": [["buffer_size", "None"]]}
{"code": "tf.data.experimental.parse_example_dataset(features,num_parallel_calls=1)", "function_name": "parse_example_dataset", "args": ["features"], "kwargs": [["num_parallel_calls", "1"]]}
{"code": "tf.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)", "function_name": "parallel_interleave", "args": ["map_func", "cycle_length"], "kwargs": [["block_length", "1"], ["sloppy", "False"], ["buffer_output_elements", "None"], ["prefetch_input_elements", "None"]]}
{"code": "tf.data.experimental.make_saveable_from_iterator(iterator)", "function_name": "make_saveable_from_iterator", "args": ["iterator"], "kwargs": []}
{"code": "tf.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)", "function_name": "map_and_batch", "args": ["map_func", "batch_size"], "kwargs": [["num_parallel_batches", "None"], ["drop_remainder", "False"], ["num_parallel_calls", "None"]]}
{"code": "tf.data.experimental.ignore_errors()", "function_name": "ignore_errors", "args": [""], "kwargs": []}
{"code": "tf.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=None,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,reader_num_threads=None,parser_num_threads=None,sloppy_ordering=False,drop_final_batch=False)", "function_name": "make_batched_features_dataset", "args": ["file_pattern", "batch_size", "features"], "kwargs": [["reader", "None"], ["label_key", "None"], ["reader_args", "None"], ["num_epochs", "None"], ["shuffle", "True"], ["shuffle_buffer_size", "10000"], ["shuffle_seed", "None"], ["prefetch_buffer_size", "None"], ["reader_num_threads", "None"], ["parser_num_threads", "None"], ["sloppy_ordering", "False"], ["drop_final_batch", "False"]]}
{"code": "tf.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,num_parallel_reads=None,sloppy=False,num_rows_for_inference=100,compression_type=None,ignore_errors=False)", "function_name": "make_csv_dataset", "args": ["file_pattern", "batch_size", "'"], "kwargs": [["column_names", "None"], ["column_defaults", "None"], ["label_name", "None"], ["select_columns", "None"], ["field_delim", "'"], ["use_quote_delim", "True"], ["na_value", "''"], ["header", "True"], ["num_epochs", "None"], ["shuffle", "True"], ["shuffle_buffer_size", "10000"], ["shuffle_seed", "None"], ["prefetch_buffer_size", "None"], ["num_parallel_reads", "None"], ["sloppy", "False"], ["num_rows_for_inference", "100"], ["compression_type", "None"], ["ignore_errors", "False"]]}
{"code": "tf.data.experimental.latency_stats(tag)", "function_name": "latency_stats", "args": ["tag"], "kwargs": []}
{"code": "tf.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)", "function_name": "group_by_window", "args": ["key_func", "reduce_func"], "kwargs": [["window_size", "None"], ["window_size_func", "None"]]}
{"code": "tf.data.experimental.group_by_reducer(key_func,reducer)", "function_name": "group_by_reducer", "args": ["key_func", "reducer"], "kwargs": []}
{"code": "tf.data.experimental.get_structure(dataset_or_iterator)", "function_name": "get_structure", "args": ["dataset_or_iterator"], "kwargs": []}
{"code": "tf.data.experimental.get_single_element(dataset)", "function_name": "get_single_element", "args": ["dataset"], "kwargs": []}
{"code": "tf.data.experimental.from_variant(variant,structure)", "function_name": "from_variant", "args": ["variant", "structure"], "kwargs": []}
{"code": "tf.data.experimental.enumerate_dataset(start=0)", "function_name": "enumerate_dataset", "args": [], "kwargs": [["start", "0"]]}
{"code": "tf.data.experimental.get_next_as_optional(iterator)", "function_name": "get_next_as_optional", "args": ["iterator"], "kwargs": []}
{"code": "tf.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)", "function_name": "Counter", "args": [], "kwargs": [["start", "0"], ["step", "1"], ["dtype", "tf.dtypes.int64"]]}
{"code": "tf.data.experimental.dense_to_ragged_batch(batch_size,drop_remainder=False,row_splits_dtype=tf.dtypes.int64)", "function_name": "dense_to_ragged_batch", "args": ["batch_size"], "kwargs": [["drop_remainder", "False"], ["row_splits_dtype", "tf.dtypes.int64"]]}
{"code": "tf.data.experimental.dense_to_sparse_batch(batch_size,row_shape)", "function_name": "dense_to_sparse_batch", "args": ["batch_size", "row_shape"], "kwargs": []}
{"code": "tf.data.experimental.copy_to_device(target_device,source_device='/cpu:0')", "function_name": "copy_to_device", "args": ["target_device"], "kwargs": [["source_device", "'/cpu:0'"]]}
{"code": "tf.data.experimental.choose_from_datasets(datasets,choice_dataset)", "function_name": "choose_from_datasets", "args": ["datasets", "choice_dataset"], "kwargs": []}
{"code": "tf.data.experimental.cardinality(dataset)", "function_name": "cardinality", "args": ["dataset"], "kwargs": []}
{"code": "tf.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False,drop_remainder=False)", "function_name": "bucket_by_sequence_length", "args": ["element_length_func", "bucket_boundaries", "bucket_batch_sizes"], "kwargs": [["padded_shapes", "None"], ["padding_values", "None"], ["pad_to_bucket_boundary", "False"], ["no_padding", "False"], ["drop_remainder", "False"]]}
{"code": "tf.data.experimental.bytes_produced_stats(tag)", "function_name": "bytes_produced_stats", "args": ["tag"], "kwargs": []}
{"code": "tf.config.threading.set_intra_op_parallelism_threads(num_threads)", "function_name": "set_intra_op_parallelism_threads", "args": ["num_threads"], "kwargs": []}
{"code": "tf.config.threading.get_inter_op_parallelism_threads()", "function_name": "get_inter_op_parallelism_threads", "args": [""], "kwargs": []}
{"code": "tf.config.threading.set_inter_op_parallelism_threads(num_threads)", "function_name": "set_inter_op_parallelism_threads", "args": ["num_threads"], "kwargs": []}
{"code": "tf.config.threading.get_intra_op_parallelism_threads()", "function_name": "get_intra_op_parallelism_threads", "args": [""], "kwargs": []}
{"code": "tf.config.optimizer.set_experimental_options(options)", "function_name": "set_experimental_options", "args": ["options"], "kwargs": []}
{"code": "tf.config.optimizer.set_jit(enabled)", "function_name": "set_jit", "args": ["enabled"], "kwargs": []}
{"code": "tf.config.optimizer.get_jit()", "function_name": "get_jit", "args": [""], "kwargs": []}
{"code": "tf.config.optimizer.get_experimental_options()", "function_name": "get_experimental_options", "args": [""], "kwargs": []}
{"code": "tf.config.experimental.set_device_policy(device_policy)", "function_name": "set_device_policy", "args": ["device_policy"], "kwargs": []}
{"code": "tf.config.experimental.set_memory_growth(device,enable)", "function_name": "set_memory_growth", "args": ["device", "enable"], "kwargs": []}
{"code": "tf.config.experimental.set_synchronous_execution(enable)", "function_name": "set_synchronous_execution", "args": ["enable"], "kwargs": []}
{"code": "tf.config.experimental.get_memory_growth(device)", "function_name": "get_memory_growth", "args": ["device"], "kwargs": []}
{"code": "tf.config.experimental.get_synchronous_execution()", "function_name": "get_synchronous_execution", "args": [""], "kwargs": []}
{"code": "tf.config.experimental.get_device_policy()", "function_name": "get_device_policy", "args": [""], "kwargs": []}
{"code": "tf.config.experimental.enable_mlir_bridge()", "function_name": "enable_mlir_bridge", "args": [""], "kwargs": []}
{"code": "tf.config.experimental.disable_mlir_bridge()", "function_name": "disable_mlir_bridge", "args": [""], "kwargs": []}
{"code": "tf.config.set_visible_devices(devices,device_type=None)", "function_name": "set_visible_devices", "args": ["devices"], "kwargs": [["device_type", "None"]]}
{"code": "tf.config.set_logical_device_configuration(device,logical_devices)", "function_name": "set_logical_device_configuration", "args": ["device", "logical_devices"], "kwargs": []}
{"code": "tf.config.set_soft_device_placement(enabled)", "function_name": "set_soft_device_placement", "args": ["enabled"], "kwargs": []}
{"code": "tf.config.list_physical_devices(device_type=None)", "function_name": "list_physical_devices", "args": [], "kwargs": [["device_type", "None"]]}
{"code": "tf.config.get_soft_device_placement()", "function_name": "get_soft_device_placement", "args": [""], "kwargs": []}
{"code": "tf.config.list_logical_devices(device_type=None)", "function_name": "list_logical_devices", "args": [], "kwargs": [["device_type", "None"]]}
{"code": "tf.config.experimental_functions_run_eagerly()", "function_name": "experimental_functions_run_eagerly", "args": [""], "kwargs": []}
{"code": "tf.config.get_visible_devices(device_type=None)", "function_name": "get_visible_devices", "args": [], "kwargs": [["device_type", "None"]]}
{"code": "tf.config.experimental_connect_to_host(remote_host=None,job_name='worker')", "function_name": "experimental_connect_to_host", "args": [], "kwargs": [["remote_host", "None"], ["job_name", "'worker'"]]}
{"code": "tf.config.experimental_connect_to_cluster(cluster_spec_or_resolver,job_name='localhost',task_index=0,protocol=None,make_master_device_default=True)", "function_name": "experimental_connect_to_cluster", "args": ["cluster_spec_or_resolver"], "kwargs": [["job_name", "'localhost'"], ["task_index", "0"], ["protocol", "None"], ["make_master_device_default", "True"]]}
{"code": "tf.config.get_logical_device_configuration(device)", "function_name": "get_logical_device_configuration", "args": ["device"], "kwargs": []}
{"code": "tf.config.experimental_run_functions_eagerly(run_eagerly)", "function_name": "experimental_run_functions_eagerly", "args": ["run_eagerly"], "kwargs": []}
{"code": "withtf.Graph().as_default():...addoperationstothegraph...#CreateaSupervisorthatwillcheckpointthemodelin'/tmp/mydir'.sv=Supervisor(logdir='/tmp/mydir')#GetaTensorFlowsessionmanagedbythesupervisor.withsv.managed_session(FLAGS.master)assess:#Usethesessiontotrainthegraph.whilenotsv.should_stop():sess.run(&lt;my_train_op&gt;)", "function_name": "Graph", "args": [], "kwargs": [[").as_default():...addoperationstothegraph...#CreateaSupervisorthatwillcheckpointthemodelin'/tmp/mydir'.sv", "Supervisor(logdir", "'/tmp/mydir')#GetaTensorFlowsessionmanagedbythesupervisor.withsv.managed_session(FLAGS.master)assess:#Usethesessiontotrainthegraph.whilenotsv.should_stop():sess.run(&lt;my_train_op&gt;"]]}
{"code": "create_session()", "function_name": "create_session", "args": [""], "kwargs": []}
{"code": "withtf.Graph().as_default():...addoperationstothegraph...#CreateaSessionManagerthatwillcheckpointthemodelin'/tmp/mydir'.sm=SessionManager()sess=sm.prepare_session(master,init_op,saver,checkpoint_dir)#Usethesessiontotrainthegraph.whileTrue:sess.run(&lt;my_train_op&gt;)", "function_name": "Graph", "args": ["init_op", "saver", "checkpoint_dir)#Usethesessiontotrainthegraph.whileTrue:sess.run(&lt;my_train_op&gt;"], "kwargs": [[").as_default():...addoperationstothegraph...#CreateaSessionManagerthatwillcheckpointthemodelin'/tmp/mydir'.sm", "SessionManager()sess", "sm.prepare_session(master"]]}
{"code": "defmy_op(a,b,c,name=None):withtf.name_scope(name,\"MyOp\",[a,b,c])asscope:a=tf.convert_to_tensor(a,name=\"a\")b=tf.convert_to_tensor(b,name=\"b\")c=tf.convert_to_tensor(c,name=\"c\")#Definesomecomputationthatuses`a`,`b`,and`c`.returnfoo_op(...,name=scope)", "function_name": "defmy_op", "args": ["a", "b", "c", "\"MyOp\"", "[a", "b", "`b`", "and`c`.returnfoo_op(..."], "kwargs": [["name", "None):withtf.name_scope(name"], ["c])asscope:a", "tf.convert_to_tensor(a"], ["name", "\"a\")b", "tf.convert_to_tensor(b"], ["name", "\"b\")c", "tf.convert_to_tensor(c"], ["name", "\"c\")#Definesomecomputationthatuses`a`"], ["name", "scope"]]}
{"code": "flag_type()", "function_name": "flag_type", "args": [""], "kwargs": []}
{"code": "serialize(value)", "function_name": "serialize", "args": ["value"], "kwargs": []}
{"code": "flag_type()", "function_name": "flag_type", "args": [""], "kwargs": []}
{"code": "Exponential(rate)=Gamma(concentration=1.,rate)", "function_name": "Exponential", "args": ["rate"], "kwargs": [["rate)", "Gamma(concentration", "1."]]}
{"code": "experimental_distribute_dataset(dataset)", "function_name": "experimental_distribute_dataset", "args": ["dataset"], "kwargs": []}
{"code": "tf.bitwise.right_shift(x,y,name=None)", "function_name": "right_shift", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.bitwise.bitwise_xor(x,y,name=None)", "function_name": "bitwise_xor", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.bitwise.invert(x,name=None)", "function_name": "invert", "args": ["x"], "kwargs": [["name", "None"]]}
{"code": "tf.bitwise.left_shift(x,y,name=None)", "function_name": "left_shift", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.bitwise.bitwise_or(x,y,name=None)", "function_name": "bitwise_or", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.autograph.experimental.do_not_convert(func=None)", "function_name": "do_not_convert", "args": [], "kwargs": [["func", "None"]]}
{"code": "tf.bitwise.bitwise_and(x,y,name=None)", "function_name": "bitwise_and", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.autograph.trace(*args)", "function_name": "trace", "args": ["*args"], "kwargs": []}
{"code": "tf.autograph.to_code(entity,recursive=True,experimental_optional_features=None)", "function_name": "to_code", "args": ["entity"], "kwargs": [["recursive", "True"], ["experimental_optional_features", "None"]]}
{"code": "tf.autograph.to_graph(entity,recursive=True,experimental_optional_features=None)", "function_name": "to_graph", "args": ["entity"], "kwargs": [["recursive", "True"], ["experimental_optional_features", "None"]]}
{"code": "tf.autograph.set_verbosity(level,alsologtostdout=False)", "function_name": "set_verbosity", "args": ["level"], "kwargs": [["alsologtostdout", "False"]]}
{"code": "tf.audio.encode_wav(audio,sample_rate,name=None)", "function_name": "encode_wav", "args": ["audio", "sample_rate"], "kwargs": [["name", "None"]]}
{"code": "tf.audio.decode_wav(contents,desired_channels=-1,desired_samples=-1,name=None)", "function_name": "decode_wav", "args": ["contents"], "kwargs": [["desired_channels", "-1"], ["desired_samples", "-1"], ["name", "None"]]}
{"code": "tf.zeros_like(input,dtype=None,name=None)", "function_name": "zeros_like", "args": ["input"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.zeros(shape,dtype=tf.dtypes.float32,name=None)", "function_name": "zeros", "args": ["shape"], "kwargs": [["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.vectorized_map(fn,elems)", "function_name": "vectorized_map", "args": ["fn", "elems"], "kwargs": []}
{"code": "tf.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,maximum_iterations=None,name=None)", "function_name": "while_loop", "args": ["cond", "body", "loop_vars"], "kwargs": [["shape_invariants", "None"], ["parallel_iterations", "10"], ["back_prop", "True"], ["swap_memory", "False"], ["maximum_iterations", "None"], ["name", "None"]]}
{"code": "tf.variable_creator_scope(variable_creator)", "function_name": "variable_creator_scope", "args": ["variable_creator"], "kwargs": []}
{"code": "tf.where(condition,x=None,y=None,name=None)", "function_name": "where", "args": ["condition"], "kwargs": [["x", "None"], ["y", "None"], ["name", "None"]]}
{"code": "tf.unstack(value,num=None,axis=0,name='unstack')", "function_name": "unstack", "args": ["value"], "kwargs": [["num", "None"], ["axis", "0"], ["name", "'unstack'"]]}
{"code": "tf.unravel_index(indices,dims,name=None)", "function_name": "unravel_index", "args": ["indices", "dims"], "kwargs": [["name", "None"]]}
{"code": "tf.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)", "function_name": "unique_with_counts", "args": ["x"], "kwargs": [["out_idx", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.unique(x,out_idx=tf.dtypes.int32,name=None)", "function_name": "unique", "args": ["x"], "kwargs": [["out_idx", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.transpose(a,perm=None,conjugate=False,name='transpose')", "function_name": "transpose", "args": ["a"], "kwargs": [["perm", "None"], ["conjugate", "False"], ["name", "'transpose'"]]}
{"code": "tf.timestamp(name=None)", "function_name": "timestamp", "args": [], "kwargs": [["name", "None"]]}
{"code": "tf.truncatediv(x,y,name=None)", "function_name": "truncatediv", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.truncatemod(x,y,name=None)", "function_name": "truncatemod", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.tile(input,multiples,name=None)", "function_name": "tile", "args": ["input", "multiples"], "kwargs": [["name", "None"]]}
{"code": "tf.tuple(tensors,control_inputs=None,name=None)", "function_name": "tuple", "args": ["tensors"], "kwargs": [["control_inputs", "None"], ["name", "None"]]}
{"code": "tf.tensor_scatter_nd_update(tensor,indices,updates,name=None)", "function_name": "tensor_scatter_nd_update", "args": ["tensor", "indices", "updates"], "kwargs": [["name", "None"]]}
{"code": "tf.tensor_scatter_nd_add(tensor,indices,updates,name=None)", "function_name": "tensor_scatter_nd_add", "args": ["tensor", "indices", "updates"], "kwargs": [["name", "None"]]}
{"code": "tf.tensor_scatter_nd_sub(tensor,indices,updates,name=None)", "function_name": "tensor_scatter_nd_sub", "args": ["tensor", "indices", "updates"], "kwargs": [["name", "None"]]}
{"code": "tf.tensordot(a,b,axes,name=None)", "function_name": "tensordot", "args": ["a", "b", "axes"], "kwargs": [["name", "None"]]}
{"code": "tf.switch_case(branch_index,branch_fns,default=None,name='switch_case')", "function_name": "switch_case", "args": ["branch_index", "branch_fns"], "kwargs": [["default", "None"], ["name", "'switch_case'"]]}
{"code": "tf.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)", "function_name": "strided_slice", "args": ["input_", "begin", "end"], "kwargs": [["strides", "None"], ["begin_mask", "0"], ["end_mask", "0"], ["ellipsis_mask", "0"], ["new_axis_mask", "0"], ["shrink_axis_mask", "0"], ["var", "None"], ["name", "None"]]}
{"code": "tf.split(value,num_or_size_splits,axis=0,num=None,name='split')", "function_name": "split", "args": ["value", "num_or_size_splits"], "kwargs": [["axis", "0"], ["num", "None"], ["name", "'split'"]]}
{"code": "tf.stack(values,axis=0,name='stack')", "function_name": "stack", "args": ["values"], "kwargs": [["axis", "0"], ["name", "'stack'"]]}
{"code": "tf.stop_gradient(input,name=None)", "function_name": "stop_gradient", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.squeeze(input,axis=None,name=None)", "function_name": "squeeze", "args": ["input"], "kwargs": [["axis", "None"], ["name", "None"]]}
{"code": "tf.space_to_batch(input,block_shape,paddings,name=None)", "function_name": "space_to_batch", "args": ["input", "block_shape", "paddings"], "kwargs": [["name", "None"]]}
{"code": "tf.space_to_batch_nd(input,block_shape,paddings,name=None)", "function_name": "space_to_batch_nd", "args": ["input", "block_shape", "paddings"], "kwargs": [["name", "None"]]}
{"code": "tf.sort(values,axis=-1,direction='ASCENDING',name=None)", "function_name": "sort", "args": ["values"], "kwargs": [["axis", "-1"], ["direction", "'ASCENDING'"], ["name", "None"]]}
{"code": "tf.slice(input_,begin,size,name=None)", "function_name": "slice", "args": ["input_", "begin", "size"], "kwargs": [["name", "None"]]}
{"code": "tf.size(input,out_type=tf.dtypes.int32,name=None)", "function_name": "size", "args": ["input"], "kwargs": [["out_type", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.shape(input,out_type=tf.dtypes.int32,name=None)", "function_name": "shape", "args": ["input"], "kwargs": [["out_type", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.shape_n(input,out_type=tf.dtypes.int32,name=None)", "function_name": "shape_n", "args": ["input"], "kwargs": [["out_type", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)", "function_name": "searchsorted", "args": ["sorted_sequence", "values"], "kwargs": [["side", "'left'"], ["out_type", "tf.dtypes.int32"], ["name", "None"]]}
{"code": "tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None)", "function_name": "reverse_sequence", "args": ["input", "seq_lengths"], "kwargs": [["seq_axis", "None"], ["batch_axis", "None"], ["name", "None"]]}
{"code": "tf.roll(input,shift,axis,name=None)", "function_name": "roll", "args": ["input", "shift", "axis"], "kwargs": [["name", "None"]]}
{"code": "tf.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)", "function_name": "sequence_mask", "args": ["lengths"], "kwargs": [["maxlen", "None"], ["dtype", "tf.dtypes.bool"], ["name", "None"]]}
{"code": "tf.scatter_nd(indices,updates,shape,name=None)", "function_name": "scatter_nd", "args": ["indices", "updates", "shape"], "kwargs": [["name", "None"]]}
{"code": "tf.reverse(tensor,axis,name=None)", "function_name": "reverse", "args": ["tensor", "axis"], "kwargs": [["name", "None"]]}
{"code": "tf.reshape(tensor,shape,name=None)", "function_name": "reshape", "args": ["tensor", "shape"], "kwargs": [["name", "None"]]}
{"code": "tf.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)", "function_name": "scan", "args": ["fn", "elems"], "kwargs": [["initializer", "None"], ["parallel_iterations", "10"], ["back_prop", "True"], ["swap_memory", "False"], ["infer_shape", "True"], ["reverse", "False"], ["name", "None"]]}
{"code": "tf.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)", "function_name": "required_space_to_batch_paddings", "args": ["input_shape", "block_shape"], "kwargs": [["base_paddings", "None"], ["name", "None"]]}
{"code": "tf.repeat(input,repeats,axis=None,name=None)", "function_name": "repeat", "args": ["input", "repeats"], "kwargs": [["axis", "None"], ["name", "None"]]}
{"code": "tf.register_tensor_conversion_function(base_type,conversion_func,priority=100)", "function_name": "register_tensor_conversion_function", "args": ["base_type", "conversion_func"], "kwargs": [["priority", "100"]]}
{"code": "tf.reduce_all(input_tensor,axis=None,keepdims=False,name=None)", "function_name": "reduce_all", "args": ["input_tensor"], "kwargs": [["axis", "None"], ["keepdims", "False"], ["name", "None"]]}
{"code": "tf.recompute_grad(f)", "function_name": "recompute_grad", "args": ["f"], "kwargs": []}
{"code": "tf.realdiv(x,y,name=None)", "function_name": "realdiv", "args": ["x", "y"], "kwargs": [["name", "None"]]}
{"code": "tf.range(limit,delta=1,dtype=None,name='range')tf.range(start,limit,delta=1,dtype=None,name='range')", "function_name": "range", "args": ["limit", "limit"], "kwargs": [["delta", "1"], ["dtype", "None"], ["name", "'range')tf.range(start"], ["delta", "1"], ["dtype", "None"], ["name", "'range'"]]}
{"code": "tf.rank(input,name=None)", "function_name": "rank", "args": ["input"], "kwargs": [["name", "None"]]}
{"code": "tf.py_function(func,inp,Tout,name=None)", "function_name": "py_function", "args": ["func", "inp", "Tout"], "kwargs": [["name", "None"]]}
{"code": "tf.print(*inputs,**kwargs)", "function_name": "print", "args": ["*inputs", "**kwargs"], "kwargs": []}
{"code": "tf.parallel_stack(values,name='parallel_stack')", "function_name": "parallel_stack", "args": ["values"], "kwargs": [["name", "'parallel_stack'"]]}
{"code": "tf.pad(tensor,paddings,mode='CONSTANT',constant_values=0,name=None)", "function_name": "pad", "args": ["tensor", "paddings"], "kwargs": [["mode", "'CONSTANT'"], ["constant_values", "0"], ["name", "None"]]}
{"code": "tf.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)", "function_name": "one_hot", "args": ["indices", "depth"], "kwargs": [["on_value", "None"], ["off_value", "None"], ["axis", "None"], ["dtype", "None"], ["name", "None"]]}
{"code": "tf.ones_like(input,dtype=None,name=None)", "function_name": "ones_like", "args": ["input"], "kwargs": [["dtype", "None"], ["name", "None"]]}
{"code": "tf.numpy_function(func,inp,Tout,name=None)", "function_name": "numpy_function", "args": ["func", "inp", "Tout"], "kwargs": [["name", "None"]]}
{"code": "tf.ones(shape,dtype=tf.dtypes.float32,name=None)", "function_name": "ones", "args": ["shape"], "kwargs": [["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.no_op(name=None)", "function_name": "no_op", "args": [], "kwargs": [["name", "None"]]}
{"code": "tf.no_gradient(op_type)", "function_name": "no_gradient", "args": ["op_type"], "kwargs": []}
{"code": "tf.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None)", "function_name": "norm", "args": ["tensor"], "kwargs": [["ord", "'euclidean'"], ["axis", "None"], ["keepdims", "None"], ["name", "None"]]}
{"code": "tf.nondifferentiable_batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10,autograph=True)", "function_name": "nondifferentiable_batch_function", "args": ["num_batch_threads", "max_batch_size", "batch_timeout_micros"], "kwargs": [["allowed_batch_sizes", "None"], ["max_enqueued_batches", "10"], ["autograph", "True"]]}
{"code": "tf.meshgrid(*args,**kwargs)", "function_name": "meshgrid", "args": ["*args", "**kwargs"], "kwargs": []}
{"code": "defmy_op(a,b,c,name=None):withtf.name_scope(\"MyOp\")asscope:a=tf.convert_to_tensor(a,name=\"a\")b=tf.convert_to_tensor(b,name=\"b\")c=tf.convert_to_tensor(c,name=\"c\")#Definesomecomputationthatuses`a`,`b`,and`c`.returnfoo_op(...,name=scope)", "function_name": "defmy_op", "args": ["a", "b", "c", "`b`", "and`c`.returnfoo_op(..."], "kwargs": [["name", "None):withtf.name_scope(\"MyOp\")asscope:a", "tf.convert_to_tensor(a"], ["name", "\"a\")b", "tf.convert_to_tensor(b"], ["name", "\"b\")c", "tf.convert_to_tensor(c"], ["name", "\"c\")#Definesomecomputationthatuses`a`"], ["name", "scope"]]}
{"code": "tf.map_fn(fn,elems,dtype=None,parallel_iterations=None,back_prop=True,swap_memory=False,infer_shape=True,name=None)", "function_name": "map_fn", "args": ["fn", "elems"], "kwargs": [["dtype", "None"], ["parallel_iterations", "None"], ["back_prop", "True"], ["swap_memory", "False"], ["infer_shape", "True"], ["name", "None"]]}
{"code": "tf.make_ndarray(tensor)", "function_name": "make_ndarray", "args": ["tensor"], "kwargs": []}
{"code": "tf.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)", "function_name": "make_tensor_proto", "args": ["values"], "kwargs": [["dtype", "None"], ["shape", "None"], ["verify_shape", "False"], ["allow_broadcast", "False"]]}
{"code": "tf.load_op_library(library_filename)", "function_name": "load_op_library", "args": ["library_filename"], "kwargs": []}
{"code": "tf.linspace(start,stop,num,name=None)", "function_name": "linspace", "args": ["start", "stop", "num"], "kwargs": [["name", "None"]]}
{"code": "tf.init_scope()", "function_name": "init_scope", "args": [""], "kwargs": []}
{"code": "tf.load_library(library_location)", "function_name": "load_library", "args": ["library_location"], "kwargs": []}
{"code": "tf.is_tensor(x)", "function_name": "is_tensor", "args": ["x"], "kwargs": []}
{"code": "tf.function(func=None,input_signature=None,autograph=True,experimental_implements=None,experimental_autograph_options=None,experimental_relax_shapes=False,experimental_compile=None)", "function_name": "function", "args": [], "kwargs": [["func", "None"], ["input_signature", "None"], ["autograph", "True"], ["experimental_implements", "None"], ["experimental_autograph_options", "None"], ["experimental_relax_shapes", "False"], ["experimental_compile", "None"]]}
{"code": "tf.gather(params,indices,validate_indices=None,axis=None,batch_dims=0,name=None)", "function_name": "gather", "args": ["params", "indices"], "kwargs": [["validate_indices", "None"], ["axis", "None"], ["batch_dims", "0"], ["name", "None"]]}
{"code": "tf.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)", "function_name": "foldl", "args": ["fn", "elems"], "kwargs": [["initializer", "None"], ["parallel_iterations", "10"], ["back_prop", "True"], ["swap_memory", "False"], ["name", "None"]]}
{"code": "tf.fingerprint(data,method='farmhash64',name=None)", "function_name": "fingerprint", "args": ["data"], "kwargs": [["method", "'farmhash64'"], ["name", "None"]]}
{"code": "tf.fill(dims,value,name=None)", "function_name": "fill", "args": ["dims", "value"], "kwargs": [["name", "None"]]}
{"code": "tf.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)", "function_name": "foldr", "args": ["fn", "elems"], "kwargs": [["initializer", "None"], ["parallel_iterations", "10"], ["back_prop", "True"], ["swap_memory", "False"], ["name", "None"]]}
{"code": "tf.expand_dims(input,axis,name=None)", "function_name": "expand_dims", "args": ["input", "axis"], "kwargs": [["name", "None"]]}
{"code": "tf.executing_eagerly()", "function_name": "executing_eagerly", "args": [""], "kwargs": []}
{"code": "tf.extract_volume_patches(input,ksizes,strides,padding,name=None)", "function_name": "extract_volume_patches", "args": ["input", "ksizes", "strides", "padding"], "kwargs": [["name", "None"]]}
{"code": "tf.einsum(equation,*inputs,**kwargs)", "function_name": "einsum", "args": ["equation", "*inputs", "**kwargs"], "kwargs": []}
{"code": "tf.ensure_shape(x,shape,name=None)", "function_name": "ensure_shape", "args": ["x", "shape"], "kwargs": [["name", "None"]]}
{"code": "tf.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)", "function_name": "eye", "args": ["num_rows"], "kwargs": [["num_columns", "None"], ["batch_shape", "None"], ["dtype", "tf.dtypes.float32"], ["name", "None"]]}
{"code": "tf.eigvals(tensor,name=None)", "function_name": "eigvals", "args": ["tensor"], "kwargs": [["name", "None"]]}
{"code": "tf.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')", "function_name": "edit_distance", "args": ["hypothesis", "truth"], "kwargs": [["normalize", "True"], ["name", "'edit_distance'"]]}
{"code": "tf.eig(tensor,name=None)", "function_name": "eig", "args": ["tensor"], "kwargs": [["name", "None"]]}
{"code": "tf.dynamic_partition(data,partitions,num_partitions,name=None)", "function_name": "dynamic_partition", "args": ["data", "partitions", "num_partitions"], "kwargs": [["name", "None"]]}
{"code": "tf.device(device_name)", "function_name": "device", "args": ["device_name"], "kwargs": []}
{"code": "tf.dynamic_stitch(indices,data,name=None)", "function_name": "dynamic_stitch", "args": ["indices", "data"], "kwargs": [["name", "None"]]}
{"code": "tf.custom_gradient(f=None)", "function_name": "custom_gradient", "args": [], "kwargs": [["f", "None"]]}
{"code": "tf.constant(value,dtype=None,shape=None,name='Const')", "function_name": "constant", "args": ["value"], "kwargs": [["dtype", "None"], ["shape", "None"], ["name", "'Const'"]]}
{"code": "tf.convert_to_tensor(value,dtype=None,dtype_hint=None,name=None)", "function_name": "convert_to_tensor", "args": ["value"], "kwargs": [["dtype", "None"], ["dtype_hint", "None"], ["name", "None"]]}
{"code": "tf.clip_by_norm(t,clip_norm,axes=None,name=None)", "function_name": "clip_by_norm", "args": ["t", "clip_norm"], "kwargs": [["axes", "None"], ["name", "None"]]}
{"code": "tf.concat(values,axis,name='concat')", "function_name": "concat", "args": ["values", "axis"], "kwargs": [["name", "'concat'"]]}
{"code": "tf.clip_by_value(t,clip_value_min,clip_value_max,name=None)", "function_name": "clip_by_value", "args": ["t", "clip_value_min", "clip_value_max"], "kwargs": [["name", "None"]]}
{"code": "tf.control_dependencies(control_inputs)", "function_name": "control_dependencies", "args": ["control_inputs"], "kwargs": []}
{"code": "tf.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)", "function_name": "clip_by_global_norm", "args": ["t_list", "clip_norm"], "kwargs": [["use_norm", "None"], ["name", "None"]]}
{"code": "tf.cond(pred,true_fn=None,false_fn=None,name=None)", "function_name": "cond", "args": ["pred"], "kwargs": [["true_fn", "None"], ["false_fn", "None"], ["name", "None"]]}
{"code": "tf.cast(x,dtype,name=None)", "function_name": "cast", "args": ["x", "dtype"], "kwargs": [["name", "None"]]}
{"code": "tf.broadcast_to(input,shape,name=None)", "function_name": "broadcast_to", "args": ["input", "shape"], "kwargs": [["name", "None"]]}
{"code": "tf.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')", "function_name": "case", "args": ["pred_fn_pairs"], "kwargs": [["default", "None"], ["exclusive", "False"], ["strict", "False"], ["name", "'case'"]]}
{"code": "tf.bitcast(input,type,name=None)", "function_name": "bitcast", "args": ["input", "type"], "kwargs": [["name", "None"]]}
{"code": "tf.broadcast_dynamic_shape(shape_x,shape_y)", "function_name": "broadcast_dynamic_shape", "args": ["shape_x", "shape_y"], "kwargs": []}
{"code": "tf.broadcast_static_shape(shape_x,shape_y)", "function_name": "broadcast_static_shape", "args": ["shape_x", "shape_y"], "kwargs": []}
{"code": "tf.boolean_mask(tensor,mask,axis=None,name='boolean_mask')", "function_name": "boolean_mask", "args": ["tensor", "mask"], "kwargs": [["axis", "None"], ["name", "'boolean_mask'"]]}
{"code": "tf.batch_to_space(input,block_shape,crops,name=None)", "function_name": "batch_to_space", "args": ["input", "block_shape", "crops"], "kwargs": [["name", "None"]]}
{"code": "tf.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)", "function_name": "argsort", "args": ["values"], "kwargs": [["axis", "-1"], ["direction", "'ASCENDING'"], ["stable", "False"], ["name", "None"]]}
