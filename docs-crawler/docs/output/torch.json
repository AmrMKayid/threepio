{"code": "torch.is_tensor(obj)[source]\u00b6", "function_name": "is_tensor", "args": ["obj"], "kwargs": []}
{"code": "torch.is_storage(obj)[source]\u00b6", "function_name": "is_storage", "args": ["obj"], "kwargs": []}
{"code": "torch.is_floating_point(input) -&gt; (bool)\u00b6", "function_name": "is_floating_point", "args": ["input"], "kwargs": []}
{"code": "torch.set_default_dtype(d)[source]\u00b6", "function_name": "set_default_dtype", "args": ["d"], "kwargs": []}
{"code": "torch.get_default_dtype() \u2192 torch.dtype\u00b6", "function_name": "get_default_dtype", "args": [""], "kwargs": []}
{"code": "torch.set_default_tensor_type(t)[source]\u00b6", "function_name": "set_default_tensor_type", "args": ["t"], "kwargs": []}
{"code": "torch.numel(input) \u2192 int\u00b6", "function_name": "numel", "args": ["input"], "kwargs": []}
{"code": "torch.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, profile=None, sci_mode=None)[source]\u00b6", "function_name": "set_printoptions", "args": [], "kwargs": [["precision", "None"], [" threshold", "None"], [" edgeitems", "None"], [" linewidth", "None"], [" profile", "None"], [" sci_mode", "None"]]}
{"code": "torch.set_flush_denormal(mode) \u2192 bool\u00b6", "function_name": "set_flush_denormal", "args": ["mode"], "kwargs": []}
{"code": "torch.tensor(data, dtype=None, device=None, requires_grad=False, pin_memory=False) \u2192 Tensor\u00b6", "function_name": "tensor", "args": ["data"], "kwargs": [[" dtype", "None"], [" device", "None"], [" requires_grad", "False"], [" pin_memory", "False"]]}
{"code": "torch.sparse_coo_tensor(indices, values, size=None, dtype=None, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "sparse_coo_tensor", "args": ["indices", " values"], "kwargs": [[" size", "None"], [" dtype", "None"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.as_tensor(data, dtype=None, device=None) \u2192 Tensor\u00b6", "function_name": "as_tensor", "args": ["data"], "kwargs": [[" dtype", "None"], [" device", "None"]]}
{"code": "torch.as_strided(input, size, stride, storage_offset=0) \u2192 Tensor\u00b6", "function_name": "as_strided", "args": ["input", " size", " stride"], "kwargs": [[" storage_offset", "0"]]}
{"code": "torch.from_numpy(ndarray) \u2192 Tensor\u00b6", "function_name": "from_numpy", "args": ["ndarray"], "kwargs": []}
{"code": "torch.zeros(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "zeros", "args": ["*size"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.zeros_like(input, dtype=None, layout=None, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "zeros_like", "args": ["input"], "kwargs": [[" dtype", "None"], [" layout", "None"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.ones(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "ones", "args": ["*size"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.ones_like(input, dtype=None, layout=None, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "ones_like", "args": ["input"], "kwargs": [[" dtype", "None"], [" layout", "None"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.arange(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "arange", "args": [" end"], "kwargs": [["start", "0"], [" step", "1"], [" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.range(start=0, end, step=1, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "range", "args": [" end"], "kwargs": [["start", "0"], [" step", "1"], [" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.linspace(start, end, steps=100, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "linspace", "args": ["start", " end"], "kwargs": [[" steps", "100"], [" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.logspace(start, end, steps=100, base=10.0, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "logspace", "args": ["start", " end"], "kwargs": [[" steps", "100"], [" base", "10.0"], [" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.eye(n, m=None, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "eye", "args": ["n"], "kwargs": [[" m", "None"], [" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.empty(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False, pin_memory=False) \u2192 Tensor\u00b6", "function_name": "empty", "args": ["*size"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"], [" pin_memory", "False"]]}
{"code": "torch.empty_like(input, dtype=None, layout=None, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "empty_like", "args": ["input"], "kwargs": [[" dtype", "None"], [" layout", "None"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.empty_strided(size, stride, dtype=None, layout=None, device=None, requires_grad=False, pin_memory=False) \u2192 Tensor\u00b6", "function_name": "empty_strided", "args": ["size", " stride"], "kwargs": [[" dtype", "None"], [" layout", "None"], [" device", "None"], [" requires_grad", "False"], [" pin_memory", "False"]]}
{"code": "torch.full(size, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "full", "args": ["size", " fill_value"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.full_like(input, fill_value, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "full_like", "args": ["input", " fill_value"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) \u2192 Tensor\u00b6", "function_name": "quantize_per_tensor", "args": ["Tensor self", " float scale", " int zero_point", " ScalarType dtype"], "kwargs": []}
{"code": "torch.quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) \u2192 Tensor\u00b6", "function_name": "quantize_per_channel", "args": ["Tensor self", " Tensor scales", " Tensor zero_points", " int axis", " ScalarType dtype"], "kwargs": []}
{"code": "torch.cat(tensors, dim=0, out=None) \u2192 Tensor\u00b6", "function_name": "cat", "args": ["tensors"], "kwargs": [[" dim", "0"], [" out", "None"]]}
{"code": "torch.chunk(input, chunks, dim=0) \u2192 List of Tensors\u00b6", "function_name": "chunk", "args": ["input", " chunks"], "kwargs": [[" dim", "0"]]}
{"code": "torch.gather(input, dim, index, out=None, sparse_grad=False) \u2192 Tensor\u00b6", "function_name": "gather", "args": ["input", " dim", " index"], "kwargs": [[" out", "None"], [" sparse_grad", "False"]]}
{"code": "torch.index_select(input, dim, index, out=None) \u2192 Tensor\u00b6", "function_name": "index_select", "args": ["input", " dim", " index"], "kwargs": [[" out", "None"]]}
{"code": "torch.masked_select(input, mask, out=None) \u2192 Tensor\u00b6", "function_name": "masked_select", "args": ["input", " mask"], "kwargs": [[" out", "None"]]}
{"code": "torch.narrow(input, dim, start, length) \u2192 Tensor\u00b6", "function_name": "narrow", "args": ["input", " dim", " start", " length"], "kwargs": []}
{"code": "torch.nonzero(input, *, out=None, as_tuple=False) \u2192 LongTensor or tuple of LongTensors\u00b6", "function_name": "nonzero", "args": ["input", " *"], "kwargs": [[" out", "None"], [" as_tuple", "False"]]}
{"code": "torch.reshape(input, shape) \u2192 Tensor\u00b6", "function_name": "reshape", "args": ["input", " shape"], "kwargs": []}
{"code": "torch.split(tensor, split_size_or_sections, dim=0)[source]\u00b6", "function_name": "split", "args": ["tensor", " split_size_or_sections"], "kwargs": [[" dim", "0"]]}
{"code": "torch.squeeze(input, dim=None, out=None) \u2192 Tensor\u00b6", "function_name": "squeeze", "args": ["input"], "kwargs": [[" dim", "None"], [" out", "None"]]}
{"code": "torch.stack(tensors, dim=0, out=None) \u2192 Tensor\u00b6", "function_name": "stack", "args": ["tensors"], "kwargs": [[" dim", "0"], [" out", "None"]]}
{"code": "torch.t(input) \u2192 Tensor\u00b6", "function_name": "t", "args": ["input"], "kwargs": []}
{"code": "torch.take(input, index) \u2192 Tensor\u00b6", "function_name": "take", "args": ["input", " index"], "kwargs": []}
{"code": "torch.transpose(input, dim0, dim1) \u2192 Tensor\u00b6", "function_name": "transpose", "args": ["input", " dim0", " dim1"], "kwargs": []}
{"code": "torch.unbind(input, dim=0) \u2192 seq\u00b6", "function_name": "unbind", "args": ["input"], "kwargs": [[" dim", "0"]]}
{"code": "torch.unsqueeze(input, dim, out=None) \u2192 Tensor\u00b6", "function_name": "unsqueeze", "args": ["input", " dim"], "kwargs": [[" out", "None"]]}
{"code": "torch.where()\u00b6", "function_name": "where", "args": [""], "kwargs": []}
{"code": "torch.where(condition, x, y) \u2192 Tensor", "function_name": "where", "args": ["condition", " x", " y"], "kwargs": []}
{"code": "torch.where(condition) \u2192 tuple of LongTensor", "function_name": "where", "args": ["condition"], "kwargs": []}
{"code": "torch.seed()[source]\u00b6", "function_name": "seed", "args": [""], "kwargs": []}
{"code": "torch.manual_seed(seed)[source]\u00b6", "function_name": "manual_seed", "args": ["seed"], "kwargs": []}
{"code": "torch.initial_seed()[source]\u00b6", "function_name": "initial_seed", "args": [""], "kwargs": []}
{"code": "torch.get_rng_state()[source]\u00b6", "function_name": "get_rng_state", "args": [""], "kwargs": []}
{"code": "torch.set_rng_state(new_state)[source]\u00b6", "function_name": "set_rng_state", "args": ["new_state"], "kwargs": []}
{"code": "torch.bernoulli(input, *, generator=None, out=None) \u2192 Tensor\u00b6", "function_name": "bernoulli", "args": ["input", " *"], "kwargs": [[" generator", "None"], [" out", "None"]]}
{"code": "torch.multinomial(input, num_samples, replacement=False, out=None) \u2192 LongTensor\u00b6", "function_name": "multinomial", "args": ["input", " num_samples"], "kwargs": [[" replacement", "False"], [" out", "None"]]}
{"code": "torch.normal()\u00b6", "function_name": "normal", "args": [""], "kwargs": []}
{"code": "torch.normal(mean, std, out=None) \u2192 Tensor", "function_name": "normal", "args": ["mean", " std"], "kwargs": [[" out", "None"]]}
{"code": "torch.normal(mean=0.0, std, out=None) \u2192 Tensor", "function_name": "normal", "args": [" std"], "kwargs": [["mean", "0.0"], [" out", "None"]]}
{"code": "torch.normal(mean, std=1.0, out=None) \u2192 Tensor", "function_name": "normal", "args": ["mean"], "kwargs": [[" std", "1.0"], [" out", "None"]]}
{"code": "torch.normal(mean, std, size, *, out=None) \u2192 Tensor", "function_name": "normal", "args": ["mean", " std", " size", " *"], "kwargs": [[" out", "None"]]}
{"code": "torch.rand(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "rand", "args": ["*size"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.rand_like(input, dtype=None, layout=None, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "rand_like", "args": ["input"], "kwargs": [[" dtype", "None"], [" layout", "None"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.randint(low=0, high, size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "randint", "args": [" high", " size"], "kwargs": [["low", "0"], [" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.randint_like(input, low=0, high, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "randint_like", "args": ["input", " high"], "kwargs": [[" low", "0"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.randn(*size, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "randn", "args": ["*size"], "kwargs": [[" out", "None"], [" dtype", "None"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.randn_like(input, dtype=None, layout=None, device=None, requires_grad=False) \u2192 Tensor\u00b6", "function_name": "randn_like", "args": ["input"], "kwargs": [[" dtype", "None"], [" layout", "None"], [" device", "None"], [" requires_grad", "False"]]}
{"code": "torch.randperm(n, out=None, dtype=torch.int64, layout=torch.strided, device=None, requires_grad=False) \u2192 LongTensor\u00b6", "function_name": "randperm", "args": ["n"], "kwargs": [[" out", "None"], [" dtype", "torch.int64"], [" layout", "torch.strided"], [" device", "None"], [" requires_grad", "False"]]}
