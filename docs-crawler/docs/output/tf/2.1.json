{
    "histogramfixedwidth": {
        "code": "tf.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)",
        "function_name": "histogram_fixed_width",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "valuerange",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "nbins",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hessians": {
        "code": "tf.hessians(ys,xs,gate_gradients=False,aggregation_method=None,name='hessians')",
        "function_name": "hessians",
        "args": [
            {
                "name": "ys",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "xs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gategradients",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "aggregationmethod",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "guaranteeconst": {
        "code": "tf.guarantee_const(input,name=None)",
        "function_name": "guarantee_const",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "identityn": {
        "code": "tf.identity_n(input,name=None)",
        "function_name": "identity_n",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "identity": {
        "code": "tf.identity(input,name=None)",
        "function_name": "identity",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": "name",
                "tfjs": null
            }
        ]
    },
    "histogramfixedwidthbins": {
        "code": "tf.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)",
        "function_name": "histogram_fixed_width_bins",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "valuerange",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "nbins",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "gradpassthrough": {
        "code": "tf.grad_pass_through(f)",
        "function_name": "grad_pass_through",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "gradients": {
        "code": "tf.keras.backend.gradients(loss,variables)",
        "function_name": "gradients",
        "args": [
            {
                "name": "loss",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "variables",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getstaticvalue": {
        "code": "tf.get_static_value(tensor,partial=False)",
        "function_name": "get_static_value",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "partial",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getlogger": {
        "code": "tf.get_logger()",
        "function_name": "get_logger",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "gathernd": {
        "code": "tf.gather_nd(params,indices,batch_dims=0,name=None)",
        "function_name": "gather_nd",
        "args": [
            {
                "name": "params",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "indices"
            },
            {
                "name": "batchdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "gather": {
        "code": "tf.keras.backend.gather(reference,indices)",
        "function_name": "gather",
        "args": [
            {
                "name": "reference",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "indices"
            }
        ]
    },
    "jitscope": {
        "code": "tf.xla.experimental.jit_scope(*args,**kwds)",
        "function_name": "jit_scope",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwds",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "group": {
        "code": "tf.group(*inputs,**kwargs)",
        "function_name": "group",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "compile": {
        "code": "tf.xla.experimental.compile(computation,inputs=None)",
        "function_name": "compile",
        "args": [
            {
                "name": "computation",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "enablemixedprecisiongraphrewrite": {
        "code": "tf.train.experimental.enable_mixed_precision_graph_rewrite(opt,loss_scale='dynamic')",
        "function_name": "enable_mixed_precision_graph_rewrite",
        "args": [
            {
                "name": "opt",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lossscale",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "disablemixedprecisiongraphrewrite": {
        "code": "tf.train.experimental.disable_mixed_precision_graph_rewrite()",
        "function_name": "disable_mixed_precision_graph_rewrite",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loadcheckpoint": {
        "code": "tf.train.load_checkpoint(ckpt_dir_or_file)",
        "function_name": "load_checkpoint",
        "args": [
            {
                "name": "ckptdirorfile",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loadvariable": {
        "code": "tf.train.load_variable(ckpt_dir_or_file,name)",
        "function_name": "load_variable",
        "args": [
            {
                "name": "ckptdirorfile",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "listvariables": {
        "code": "tf.train.list_variables(ckpt_dir_or_file)",
        "function_name": "list_variables",
        "args": [
            {
                "name": "ckptdirorfile",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "latestcheckpoint": {
        "code": "tf.train.latest_checkpoint(checkpoint_dir,latest_filename=None)",
        "function_name": "latest_checkpoint",
        "args": [
            {
                "name": "checkpointdir",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "latestfilename",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getcheckpointstate": {
        "code": "tf.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)",
        "function_name": "get_checkpoint_state",
        "args": [
            {
                "name": "checkpointdir",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "latestfilename",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "checkpointsiterator": {
        "code": "tf.train.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)",
        "function_name": "checkpoints_iterator",
        "args": [
            {
                "name": "checkpointdir",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minintervalsecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "timeout",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "timeoutfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "initializetpusystem": {
        "code": "tf.tpu.experimental.initialize_tpu_system(cluster_resolver=None)",
        "function_name": "initialize_tpu_system",
        "args": [
            {
                "name": "clusterresolver",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "shutdowntpusystem": {
        "code": "tf.tpu.experimental.shutdown_tpu_system(cluster_resolver=None)",
        "function_name": "shutdown_tpu_system",
        "args": [
            {
                "name": "clusterresolver",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isbuiltwithrocm": {
        "code": "tf.test.is_built_with_rocm()",
        "function_name": "is_built_with_rocm",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "main": {
        "code": "tf.test.main(argv=None)",
        "function_name": "main",
        "args": [
            {
                "name": "argv",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isgpuavailable": {
        "code": "tf.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)",
        "function_name": "is_gpu_available",
        "args": [
            {
                "name": "cudaonly",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mincudacomputecapability",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isbuiltwithgpusupport": {
        "code": "tf.test.is_built_with_gpu_support()",
        "function_name": "is_built_with_gpu_support",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isbuiltwithcuda": {
        "code": "tf.test.is_built_with_cuda()",
        "function_name": "is_built_with_cuda",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "computegradient": {
        "code": "tf.test.compute_gradient(f,x,delta=0.001)",
        "function_name": "compute_gradient",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "delta",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "createlocalcluster": {
        "code": "tf.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)",
        "function_name": "create_local_cluster",
        "args": [
            {
                "name": "numworkers",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numps",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "protocol",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "workerconfig",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "psconfig",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "gpudevicename": {
        "code": "tf.test.gpu_device_name()",
        "function_name": "gpu_device_name",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertequalgraphdef": {
        "code": "tf.test.assert_equal_graph_def(expected,actual)",
        "function_name": "assert_equal_graph_def",
        "args": [
            {
                "name": "expected",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "actual",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getlinkflags": {
        "code": "tf.sysconfig.get_link_flags()",
        "function_name": "get_link_flags",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getinclude": {
        "code": "tf.sysconfig.get_include()",
        "function_name": "get_include",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getlib": {
        "code": "tf.sysconfig.get_lib()",
        "function_name": "get_lib",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "benchmarkconfig": {
        "code": "tf.test.benchmark_config()",
        "function_name": "benchmark_config",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "writerawpb": {
        "code": "tf.summary.experimental.write_raw_pb(tensor,step=None,name=None)",
        "function_name": "write_raw_pb",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getcompileflags": {
        "code": "tf.sysconfig.get_compile_flags()",
        "function_name": "get_compile_flags",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setstep": {
        "code": "tf.summary.experimental.set_step(step)",
        "function_name": "set_step",
        "args": [
            {
                "name": "step",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getstep": {
        "code": "tf.summary.experimental.get_step()",
        "function_name": "get_step",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "traceexport": {
        "code": "tf.summary.trace_export(name,step=None,profiler_outdir=None)",
        "function_name": "trace_export",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "profileroutdir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "write": {
        "code": "tf.summary.write(tag,tensor,step=None,metadata=None,name=None)",
        "function_name": "write",
        "args": [
            {
                "name": "tag",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "metadata",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "traceon": {
        "code": "tf.summary.trace_on(graph=True,profiler=False)",
        "function_name": "trace_on",
        "args": [
            {
                "name": "graph",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "profiler",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "traceoff": {
        "code": "tf.summary.trace_off()",
        "function_name": "trace_off",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "text": {
        "code": "tf.summary.text(name,data,step=None,description=None)",
        "function_name": "text",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "description",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "scalar": {
        "code": "tf.summary.scalar(name,data,step=None,description=None)",
        "function_name": "scalar",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "description",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "image": {
        "code": "tf.summary.image(name,data,step=None,max_outputs=3,description=None)",
        "function_name": "image",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxoutputs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "description",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "histogram": {
        "code": "tf.summary.histogram(name,data,step=None,buckets=None,description=None)",
        "function_name": "histogram",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "buckets",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "description",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "audio": {
        "code": "tf.summary.audio(name,data,sample_rate,step=None,max_outputs=3,encoding=None,description=None)",
        "function_name": "audio",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "samplerate",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxoutputs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "encoding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "description",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "createnoopwriter": {
        "code": "tf.summary.create_noop_writer()",
        "function_name": "create_noop_writer",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "createfilewriter": {
        "code": "tf.summary.create_file_writer(logdir,max_queue=None,flush_millis=None,filename_suffix=None,name=None)",
        "function_name": "create_file_writer",
        "args": [
            {
                "name": "logdir",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxqueue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "flushmillis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filenamesuffix",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "flush": {
        "code": "tf.summary.flush(writer=None,name=None)",
        "function_name": "flush",
        "args": [
            {
                "name": "writer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentjoin": {
        "code": "tf.strings.unsorted_segment_join(inputs,segment_ids,num_segments,separator='',name=None)",
        "function_name": "unsorted_segment_join",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "separator",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "upper": {
        "code": "tf.strings.upper(input,encoding='',name=None)",
        "function_name": "upper",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "encoding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodescript": {
        "code": "tf.strings.unicode_script(input,name=None)",
        "function_name": "unicode_script",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodesplit": {
        "code": "tf.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)",
        "function_name": "unicode_split",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "errors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacementchar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodesplitwithoffsets": {
        "code": "tf.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)",
        "function_name": "unicode_split_with_offsets",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "errors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacementchar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodedecode": {
        "code": "tf.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
        "function_name": "unicode_decode",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "errors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacementchar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacecontrolcharacters",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodetranscode": {
        "code": "tf.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
        "function_name": "unicode_transcode",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "errors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacementchar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacecontrolcharacters",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodedecodewithoffsets": {
        "code": "tf.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
        "function_name": "unicode_decode_with_offsets",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "errors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacementchar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacecontrolcharacters",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tohashbucketstrong": {
        "code": "tf.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)",
        "function_name": "to_hash_bucket_strong",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbuckets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unicodeencode": {
        "code": "tf.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)",
        "function_name": "unicode_encode",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputencoding",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "errors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replacementchar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tonumber": {
        "code": "tf.strings.to_number(input,out_type=tf.dtypes.float32,name=None)",
        "function_name": "to_number",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tohashbucketfast": {
        "code": "tf.strings.to_hash_bucket_fast(input,num_buckets,name=None)",
        "function_name": "to_hash_bucket_fast",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbuckets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tohashbucket": {
        "code": "tf.strings.to_hash_bucket(input,num_buckets,name=None)",
        "function_name": "to_hash_bucket",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbuckets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "substr": {
        "code": "tf.strings.substr(input,pos,len,unit='BYTE',name=None)",
        "function_name": "substr",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pos",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "len",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unit",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "split": {
        "code": "tf.split(value,num_or_size_splits,axis=0,num=None,name='split')",
        "function_name": "split",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numorsizesplits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "numorsizesplits"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "num",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "strip": {
        "code": "tf.strings.strip(input,name=None)",
        "function_name": "strip",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "regexreplace": {
        "code": "tf.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)",
        "function_name": "regex_replace",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pattern",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rewrite",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "replaceglobal",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "regexfullmatch": {
        "code": "tf.strings.regex_full_match(input,pattern,name=None)",
        "function_name": "regex_full_match",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pattern",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ngrams": {
        "code": "tf.strings.ngrams(data,ngram_width,separator='',pad_values=None,padding_width=None,preserve_short_sequences=False,name=None)",
        "function_name": "ngrams",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ngramwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "separator",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padvalues",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddingwidth",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "preserveshortsequences",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducejoin": {
        "code": "tf.strings.reduce_join(inputs,axis=None,keepdims=False,separator='',name=None)",
        "function_name": "reduce_join",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "separator",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "join": {
        "code": "tf.strings.join(inputs,separator='',name=None)",
        "function_name": "join",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "separator",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "length": {
        "code": "tf.strings.length(input,unit='BYTE',name=None)",
        "function_name": "length",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unit",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lower": {
        "code": "tf.strings.lower(input,encoding='',name=None)",
        "function_name": "lower",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "encoding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bytessplit": {
        "code": "tf.strings.bytes_split(input,name=None)",
        "function_name": "bytes_split",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "asstring": {
        "code": "tf.strings.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)",
        "function_name": "as_string",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "precision",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scientific",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shortest",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "width",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fill",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "toindicator": {
        "code": "tf.sparse.to_indicator(sp_input,vocab_size,name=None)",
        "function_name": "to_indicator",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "todense": {
        "code": "tf.keras.backend.to_dense(tensor)",
        "function_name": "to_dense",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "format": {
        "code": "tf.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)",
        "function_name": "format",
        "args": [
            {
                "name": "template",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "placeholder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "transpose": {
        "code": "tf.transpose(a,perm=None,conjugate=False,name='transpose')",
        "function_name": "transpose",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "perm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "perm"
            },
            {
                "name": "conjugate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sparsedensematmul": {
        "code": "tf.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)",
        "function_name": "sparse_dense_matmul",
        "args": [
            {
                "name": "spa",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjointa",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjointb",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "segmentsum": {
        "code": "tf.math.segment_sum(data,segment_ids,name=None)",
        "function_name": "segment_sum",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "retain": {
        "code": "tf.sparse.retain(sp_input,to_retain)",
        "function_name": "retain",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "toretain",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "softmax": {
        "code": "tf.keras.activations.softmax(x,axis=-1)",
        "function_name": "softmax",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reshape": {
        "code": "tf.reshape(tensor,shape,name=None)",
        "function_name": "reshape",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": "shape",
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "slice": {
        "code": "tf.slice(input_,begin,size,name=None)",
        "function_name": "slice",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "begin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "begin"
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "size"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "segmentsqrtn": {
        "code": "tf.sparse.segment_sqrt_n(data,indices,segment_ids,num_segments=None,name=None)",
        "function_name": "segment_sqrt_n",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "segmentmean": {
        "code": "tf.math.segment_mean(data,segment_ids,name=None)",
        "function_name": "segment_mean",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resetshape": {
        "code": "tf.sparse.reset_shape(sp_input,new_shape=None)",
        "function_name": "reset_shape",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "newshape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reorder": {
        "code": "tf.sparse.reorder(sp_input,name=None)",
        "function_name": "reorder",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducesum": {
        "code": "tf.math.reduce_sum(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_sum",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "minimum": {
        "code": "tf.keras.backend.minimum(x,y)",
        "function_name": "minimum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducemax": {
        "code": "tf.math.reduce_max(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_max",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "mask": {
        "code": "tf.sparse.mask(a,mask_indices,name=None)",
        "function_name": "mask",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maskindices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "maximum": {
        "code": "tf.keras.backend.maximum(x,y)",
        "function_name": "maximum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fromdense": {
        "code": "tf.sparse.from_dense(tensor,name=None)",
        "function_name": "from_dense",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fillemptyrows": {
        "code": "tf.sparse.fill_empty_rows(sp_input,default_value,name=None)",
        "function_name": "fill_empty_rows",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "eye": {
        "code": "tf.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)",
        "function_name": "eye",
        "args": [
            {
                "name": "numrows",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "numrows"
            },
            {
                "name": "numcolumns",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "numcolumns"
            },
            {
                "name": "batchshape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "batchshape"
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": "dtype"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "expanddims": {
        "code": "tf.expand_dims(input,axis,name=None)",
        "function_name": "expand_dims",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "crosshashed": {
        "code": "tf.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)",
        "function_name": "cross_hashed",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbuckets",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashkey",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stft": {
        "code": "tf.signal.stft(signals,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,pad_end=False,name=None)",
        "function_name": "stft",
        "args": [
            {
                "name": "signals",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "framelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "framelength"
            },
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "framestep"
            },
            {
                "name": "fftlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "fftlength"
            },
            {
                "name": "windowfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "windowfn"
            },
            {
                "name": "padend",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cross": {
        "code": "tf.linalg.cross(a,b,name=None)",
        "function_name": "cross",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "add": {
        "code": "tf.keras.layers.add(inputs,**kwargs)",
        "function_name": "add",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "concat": {
        "code": "tf.concat(values,axis,name='concat')",
        "function_name": "concat",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rfftd": {
        "code": "tf.signal.rfft3d(input_tensor,fft_length=None,name=None)",
        "function_name": "rfft3d",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fftlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rfft": {
        "code": "tf.signal.rfft(input_tensor,fft_length=None,name=None)",
        "function_name": "rfft",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fftlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "fftlength"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "overlapandadd": {
        "code": "tf.signal.overlap_and_add(signal,frame_step,name=None)",
        "function_name": "overlap_and_add",
        "args": [
            {
                "name": "signal",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lineartomelweightmatrix": {
        "code": "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)",
        "function_name": "linear_to_mel_weight_matrix",
        "args": [
            {
                "name": "nummelbins",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numspectrogrambins",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "samplerate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "loweredgehertz",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "upperedgehertz",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "mfccsfromlogmelspectrograms": {
        "code": "tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)",
        "function_name": "mfccs_from_log_mel_spectrograms",
        "args": [
            {
                "name": "logmelspectrograms",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "irfft": {
        "code": "tf.signal.irfft(input_tensor,fft_length=None,name=None)",
        "function_name": "irfft",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fftlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "irfftd": {
        "code": "tf.signal.irfft3d(input_tensor,fft_length=None,name=None)",
        "function_name": "irfft3d",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fftlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ifftshift": {
        "code": "tf.signal.ifftshift(x,axes=None,name=None)",
        "function_name": "ifftshift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "inversestftwindowfn": {
        "code": "tf.signal.inverse_stft_window_fn(frame_step,forward_window_fn=tf.signal.hann_window,name=None)",
        "function_name": "inverse_stft_window_fn",
        "args": [
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "forwardwindowfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "inversestft": {
        "code": "tf.signal.inverse_stft(stfts,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,name=None)",
        "function_name": "inverse_stft",
        "args": [
            {
                "name": "stfts",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "framelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fftlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "windowfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ifft": {
        "code": "tf.signal.ifft(input,name=None)",
        "function_name": "ifft",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "input"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ifftd": {
        "code": "tf.signal.ifft2d(input,name=None)",
        "function_name": "ifft2d",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "idct": {
        "code": "tf.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)",
        "function_name": "idct",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "type",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "n",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "norm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hammingwindow": {
        "code": "tf.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)",
        "function_name": "hamming_window",
        "args": [
            {
                "name": "windowlength",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "windowlength"
            },
            {
                "name": "periodic",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hannwindow": {
        "code": "tf.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)",
        "function_name": "hann_window",
        "args": [
            {
                "name": "windowlength",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "windowlength"
            },
            {
                "name": "periodic",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fftd": {
        "code": "tf.signal.fft2d(input,name=None)",
        "function_name": "fft2d",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dct": {
        "code": "tf.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)",
        "function_name": "dct",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "type",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "n",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "norm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fft": {
        "code": "tf.signal.fft(input,name=None)",
        "function_name": "fft",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "input"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "frame": {
        "code": "tf.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)",
        "function_name": "frame",
        "args": [
            {
                "name": "signal",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "signal"
            },
            {
                "name": "framelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "framelength"
            },
            {
                "name": "framestep",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "framestep"
            },
            {
                "name": "padend",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "padend"
            },
            {
                "name": "padvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "padvalue"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fftshift": {
        "code": "tf.signal.fftshift(x,axes=None,name=None)",
        "function_name": "fftshift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "union": {
        "code": "tf.sets.union(a,b,validate_indices=True)",
        "function_name": "union",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateindices",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "size": {
        "code": "tf.size(input,out_type=tf.dtypes.int32,name=None)",
        "function_name": "size",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "intersection": {
        "code": "tf.sets.intersection(a,b,validate_indices=True)",
        "function_name": "intersection",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateindices",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "load": {
        "code": "tf.saved_model.load(export_dir,tags=None)",
        "function_name": "load",
        "args": [
            {
                "name": "exportdir",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tags",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "difference": {
        "code": "tf.sets.difference(a,b,aminusb=True,validate_indices=True)",
        "function_name": "difference",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "aminusb",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateindices",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "save": {
        "code": "tf.saved_model.save(obj,export_dir,signatures=None,options=None)",
        "function_name": "save",
        "args": [
            {
                "name": "obj",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "exportdir",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "signatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "options",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "containssavedmodel": {
        "code": "tf.saved_model.contains_saved_model(export_dir)",
        "function_name": "contains_saved_model",
        "args": [
            {
                "name": "exportdir",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setglobalgenerator": {
        "code": "tf.random.experimental.set_global_generator(generator)",
        "function_name": "set_global_generator",
        "args": [
            {
                "name": "generator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "createrngstate": {
        "code": "tf.random.experimental.create_rng_state(seed,algorithm)",
        "function_name": "create_rng_state",
        "args": [
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "algorithm",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getglobalgenerator": {
        "code": "tf.random.experimental.get_global_generator()",
        "function_name": "get_global_generator",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "uniformcandidatesampler": {
        "code": "tf.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
        "function_name": "uniform_candidate_sampler",
        "args": [
            {
                "name": "trueclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unique",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rangemax",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "statelessuniform": {
        "code": "tf.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None)",
        "function_name": "stateless_uniform",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "uniform": {
        "code": "tf.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)",
        "function_name": "uniform",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "statelesstruncatednormal": {
        "code": "tf.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)",
        "function_name": "stateless_truncated_normal",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "stddev",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "truncatednormal": {
        "code": "tf.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)",
        "function_name": "truncated_normal",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "stddev",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "statelessnormal": {
        "code": "tf.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)",
        "function_name": "stateless_normal",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "stddev",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "shuffle": {
        "code": "tf.random.shuffle(value,seed=None,name=None)",
        "function_name": "shuffle",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "statelesscategorical": {
        "code": "tf.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)",
        "function_name": "stateless_categorical",
        "args": [
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsamples",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "poisson": {
        "code": "tf.random.poisson(shape,lam,dtype=tf.dtypes.float32,seed=None,name=None)",
        "function_name": "poisson",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lam",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setseed": {
        "code": "tf.random.set_seed(seed)",
        "function_name": "set_seed",
        "args": [
            {
                "name": "seed",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "normal": {
        "code": "tf.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)",
        "function_name": "normal",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": true,
                "optional": true,
                "torch": "mean",
                "tfjs": null
            },
            {
                "name": "stddev",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "gamma": {
        "code": "tf.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)",
        "function_name": "gamma",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "alpha",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "beta",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loguniformcandidatesampler": {
        "code": "tf.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
        "function_name": "log_uniform_candidate_sampler",
        "args": [
            {
                "name": "trueclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unique",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rangemax",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "learnedunigramcandidatesampler": {
        "code": "tf.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
        "function_name": "learned_unigram_candidate_sampler",
        "args": [
            {
                "name": "trueclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unique",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rangemax",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "allcandidatesampler": {
        "code": "tf.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)",
        "function_name": "all_candidate_sampler",
        "args": [
            {
                "name": "trueclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unique",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categorical": {
        "code": "tf.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)",
        "function_name": "categorical",
        "args": [
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsamples",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "segmentidstorowsplits": {
        "code": "tf.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,out_type=None,name=None)",
        "function_name": "segment_ids_to_row_splits",
        "args": [
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stack": {
        "code": "tf.stack(values,axis=0,name='stack')",
        "function_name": "stack",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fixedunigramcandidatesampler": {
        "code": "tf.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)",
        "function_name": "fixed_unigram_candidate_sampler",
        "args": [
            {
                "name": "trueclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unique",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rangemax",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabfile",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "distortion",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numreservedids",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numshards",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shard",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unigrams",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rowsplitstosegmentids": {
        "code": "tf.ragged.row_splits_to_segment_ids(splits,name=None,out_type=None)",
        "function_name": "row_splits_to_segment_ids",
        "args": [
            {
                "name": "splits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "range": {
        "code": "tf.range(limit,delta=1,dtype=None,name='range')tf.range(start,limit,delta=1,dtype=None,name='range')",
        "function_name": "range",
        "args": [
            {
                "name": "limit",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "limit",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "delta",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": "dtype"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "delta",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": "dtype"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stackdynamicpartitions": {
        "code": "tf.ragged.stack_dynamic_partitions(data,partitions,num_partitions,name=None)",
        "function_name": "stack_dynamic_partitions",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "partitions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numpartitions",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "mapflatvalues": {
        "code": "tf.ragged.map_flat_values(op,*args,**kwargs)",
        "function_name": "map_flat_values",
        "args": [
            {
                "name": "op",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "constant": {
        "code": "tf.constant(value,dtype=None,shape=None,name='Const')",
        "function_name": "constant",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "booleanmask": {
        "code": "tf.boolean_mask(tensor,mask,axis=None,name='boolean_mask')",
        "function_name": "boolean_mask",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mask",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "quantizeanddequantize": {
        "code": "tf.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)",
        "function_name": "quantize_and_dequantize",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputmin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputmax",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "signedinput",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rangegiven",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "roundmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fakequantwithminmaxvarsgradient": {
        "code": "tf.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)",
        "function_name": "fake_quant_with_min_max_vars_gradient",
        "args": [
            {
                "name": "gradients",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "min",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "max",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fakequantwithminmaxvarsperchannelgradient": {
        "code": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)",
        "function_name": "fake_quant_with_min_max_vars_per_channel_gradient",
        "args": [
            {
                "name": "gradients",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "min",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "max",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fakequantwithminmaxvarsperchannel": {
        "code": "tf.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)",
        "function_name": "fake_quant_with_min_max_vars_per_channel",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "min",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "max",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "quantize": {
        "code": "tf.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)",
        "function_name": "quantize",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minrange",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxrange",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "t",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "roundmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ensureminimumrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "quantizedconcat": {
        "code": "tf.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)",
        "function_name": "quantized_concat",
        "args": [
            {
                "name": "concatdim",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputmins",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputmaxes",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fakequantwithminmaxargsgradient": {
        "code": "tf.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)",
        "function_name": "fake_quant_with_min_max_args_gradient",
        "args": [
            {
                "name": "gradients",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "min",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "max",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fakequantwithminmaxvars": {
        "code": "tf.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)",
        "function_name": "fake_quant_with_min_max_vars",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "min",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "max",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fakequantwithminmaxargs": {
        "code": "tf.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)",
        "function_name": "fake_quant_with_min_max_args",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "min",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "max",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "swish": {
        "code": "tf.nn.swish(features)",
        "function_name": "swish",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "weightedmoments": {
        "code": "tf.nn.weighted_moments(x,axes,frequency_weights,keepdims=False,name=None)",
        "function_name": "weighted_moments",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "frequencyweights",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dequantize": {
        "code": "tf.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False)",
        "function_name": "dequantize",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minrange",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxrange",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "narrowrange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "withspacetobatch": {
        "code": "tf.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)",
        "function_name": "with_space_to_batch",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilationrate",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "op",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filtershape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "spatialdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sufficientstatistics": {
        "code": "tf.nn.sufficient_statistics(x,axes,shift=None,keepdims=False,name=None)",
        "function_name": "sufficient_statistics",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shift",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "weightedcrossentropywithlogits": {
        "code": "tf.nn.weighted_cross_entropy_with_logits(labels,logits,pos_weight,name=None)",
        "function_name": "weighted_cross_entropy_with_logits",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "posweight",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "spacetodepth": {
        "code": "tf.nn.space_to_depth(input,block_size,data_format='NHWC',name=None)",
        "function_name": "space_to_depth",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blocksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "softsign": {
        "code": "tf.keras.activations.softsign(x)",
        "function_name": "softsign",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sparsesoftmaxcrossentropywithlogits": {
        "code": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits,name=None)",
        "function_name": "sparse_softmax_cross_entropy_with_logits",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sigmoidcrossentropywithlogits": {
        "code": "tf.nn.sigmoid_cross_entropy_with_logits(labels=None,logits=None,name=None)",
        "function_name": "sigmoid_cross_entropy_with_logits",
        "args": [
            {
                "name": "labels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "separableconvd": {
        "code": "tf.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
        "function_name": "separable_conv2d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "depthwisekernel",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pointwisekernel",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dataformat"
            },
            {
                "name": "dilationrate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "selu": {
        "code": "tf.keras.activations.selu(x)",
        "function_name": "selu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "softmaxcrossentropywithlogits": {
        "code": "tf.nn.softmax_cross_entropy_with_logits(labels,logits,axis=-1,name=None)",
        "function_name": "softmax_cross_entropy_with_logits",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "scaleregularizationloss": {
        "code": "tf.nn.scale_regularization_loss(regularization_loss)",
        "function_name": "scale_regularization_loss",
        "args": [
            {
                "name": "regularizationloss",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "safeembeddinglookupsparse": {
        "code": "tf.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,max_norm=None,name=None)",
        "function_name": "safe_embedding_lookup_sparse",
        "args": [
            {
                "name": "embeddingweights",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sparseids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sparseweights",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "combiner",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultid",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxnorm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sampledsoftmaxloss": {
        "code": "tf.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,seed=None,name='sampled_softmax_loss')",
        "function_name": "sampled_softmax_loss",
        "args": [
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "biases",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sampledvalues",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "removeaccidentalhits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "relu": {
        "code": "tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0)",
        "function_name": "relu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "alpha",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "threshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "pool": {
        "code": "tf.nn.pool(input,window_shape,pooling_type,strides=None,padding='VALID',data_format=None,dilations=None,name=None)",
        "function_name": "pool",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "input"
            },
            {
                "name": "windowshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "windowshape"
            },
            {
                "name": "poolingtype",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "poolingtype"
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dilations"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nceloss": {
        "code": "tf.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,name='nce_loss')",
        "function_name": "nce_loss",
        "args": [
            {
                "name": "weights",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "biases",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsampled",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sampledvalues",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "removeaccidentalhits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "normalizemoments": {
        "code": "tf.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)",
        "function_name": "normalize_moments",
        "args": [
            {
                "name": "counts",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "meanss",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "variancess",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shift",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "moments": {
        "code": "tf.nn.moments(x,axes,shift=None,keepdims=False,name=None)",
        "function_name": "moments",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shift",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "maxpoold": {
        "code": "tf.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
        "function_name": "max_pool2d",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dataformat"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "maxpoolwithargmax": {
        "code": "tf.nn.max_pool_with_argmax(input,ksize,strides,padding,data_format='NHWC',output_dtype=tf.dtypes.int64,include_batch_in_index=False,name=None)",
        "function_name": "max_pool_with_argmax",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputdtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "includebatchinindex",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logsoftmax": {
        "code": "tf.nn.log_softmax(logits,axis=None,name=None)",
        "function_name": "log_softmax",
        "args": [
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "logits"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logpoissonloss": {
        "code": "tf.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)",
        "function_name": "log_poisson_loss",
        "args": [
            {
                "name": "targets",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "loginput",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "computefullloss",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "maxpool": {
        "code": "tf.nn.max_pool(input,ksize,strides,padding,data_format=None,name=None)",
        "function_name": "max_pool",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "localresponsenormalization": {
        "code": "tf.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)",
        "function_name": "local_response_normalization",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "depthradius",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "depthradius"
            },
            {
                "name": "bias",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "bias"
            },
            {
                "name": "alpha",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "alpha"
            },
            {
                "name": "beta",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "beta"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "leakyrelu": {
        "code": "tf.nn.leaky_relu(features,alpha=0.2,name=None)",
        "function_name": "leaky_relu",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "alpha",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "alpha"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lloss": {
        "code": "tf.nn.l2_loss(t,name=None)",
        "function_name": "l2_loss",
        "args": [
            {
                "name": "t",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fractionalavgpool": {
        "code": "tf.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)",
        "function_name": "fractional_avg_pool",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "poolingratio",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pseudorandom",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "overlapping",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fractionalmaxpool": {
        "code": "tf.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)",
        "function_name": "fractional_max_pool",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "poolingratio",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pseudorandom",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "overlapping",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "erosiond": {
        "code": "tf.nn.erosion2d(value,filters,strides,padding,data_format,dilations,name=None)",
        "function_name": "erosion2d",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dilationd": {
        "code": "tf.nn.dilation2d(input,filters,strides,padding,data_format,dilations,name=None)",
        "function_name": "dilation2d",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "embeddinglookupsparse": {
        "code": "tf.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,combiner=None,max_norm=None,name=None)",
        "function_name": "embedding_lookup_sparse",
        "args": [
            {
                "name": "params",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "spids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "spweights",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "combiner",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxnorm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "elu": {
        "code": "tf.keras.activations.elu(x,alpha=1.0)",
        "function_name": "elu",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "alpha",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dropout": {
        "code": "tf.keras.backend.dropout(x,level,noise_shape=None,seed=None)",
        "function_name": "dropout",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "level",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "noiseshape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "noiseshape"
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "seed"
            }
        ]
    },
    "embeddinglookup": {
        "code": "tf.nn.embedding_lookup(params,ids,max_norm=None,name=None)",
        "function_name": "embedding_lookup",
        "args": [
            {
                "name": "params",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxnorm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "depthtospace": {
        "code": "tf.nn.depth_to_space(input,block_size,data_format='NHWC',name=None)",
        "function_name": "depth_to_space",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blocksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "blocksize"
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dataformat"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "depthwiseconvdbackpropfilter": {
        "code": "tf.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)",
        "function_name": "depthwise_conv2d_backprop_filter",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filtersizes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outbackprop",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 6,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 7,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "depthwiseconvdbackpropinput": {
        "code": "tf.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)",
        "function_name": "depthwise_conv2d_backprop_input",
        "args": [
            {
                "name": "inputsizes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filter",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outbackprop",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 6,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 7,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctcloss": {
        "code": "tf.nn.ctc_loss(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)",
        "function_name": "ctc_loss",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labellength",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logitlength",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logitstimemajor",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unique",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blankindex",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctcuniquelabels": {
        "code": "tf.nn.ctc_unique_labels(labels,name=None)",
        "function_name": "ctc_unique_labels",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "depthwiseconvd": {
        "code": "tf.keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
        "function_name": "depthwise_conv2d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "depthwisekernel",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dataformat"
            },
            {
                "name": "dilationrate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctcgreedydecoder": {
        "code": "tf.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)",
        "function_name": "ctc_greedy_decoder",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sequencelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mergerepeated",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convtranspose": {
        "code": "tf.nn.conv_transpose(input,filters,output_shape,strides,padding='SAME',data_format=None,dilations=None,name=None)",
        "function_name": "conv_transpose",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convdtranspose": {
        "code": "tf.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
        "function_name": "conv2d_transpose",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "kernel",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "outputshape"
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilationrate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctcbeamsearchdecoder": {
        "code": "tf.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1)",
        "function_name": "ctc_beam_search_decoder",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sequencelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "beamwidth",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "toppaths",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "crelu": {
        "code": "tf.nn.crelu(features,axis=-1,name=None)",
        "function_name": "crelu",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convolution": {
        "code": "tf.nn.convolution(input,filters,strides=None,padding='VALID',data_format=None,dilations=None,name=None)",
        "function_name": "convolution",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dilations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convd": {
        "code": "tf.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)",
        "function_name": "conv1d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "kernel",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": "padding",
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dataformat"
            },
            {
                "name": "dilationrate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "computeaccidentalhits": {
        "code": "tf.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)",
        "function_name": "compute_accidental_hits",
        "args": [
            {
                "name": "trueclasses",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sampledcandidates",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numtrue",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchnormwithglobalnormalization": {
        "code": "tf.nn.batch_norm_with_global_normalization(input,mean,variance,beta,gamma,variance_epsilon,scale_after_normalization,name=None)",
        "function_name": "batch_norm_with_global_normalization",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "variance",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gamma",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "varianceepsilon",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scaleafternormalization",
                "is_kwarg": false,
                "optional": false,
                "index": 6,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "collapserepeated": {
        "code": "tf.nn.collapse_repeated(labels,seq_length,name=None)",
        "function_name": "collapse_repeated",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seqlength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchnormalization": {
        "code": "tf.keras.backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)",
        "function_name": "batch_normalization",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "var",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gamma",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "epsilon",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "biasadd": {
        "code": "tf.keras.backend.bias_add(x,bias,data_format=None)",
        "function_name": "bias_add",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bias",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "computeaverageloss": {
        "code": "tf.nn.compute_average_loss(per_example_loss,sample_weight=None,global_batch_size=None)",
        "function_name": "compute_average_loss",
        "args": [
            {
                "name": "perexampleloss",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sampleweight",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "globalbatchsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "avgpoold": {
        "code": "tf.nn.avg_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
        "function_name": "avg_pool2d",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "input",
                "tfjs": null
            },
            {
                "name": "ksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": "padding",
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dataformat"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "atrousconvd": {
        "code": "tf.nn.atrous_conv2d(value,filters,rate,padding,name=None)",
        "function_name": "atrous_conv2d",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rate",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "atrousconvdtranspose": {
        "code": "tf.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)",
        "function_name": "atrous_conv2d_transpose",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rate",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "avgpool": {
        "code": "tf.nn.avg_pool(input,ksize,strides,padding,data_format=None,name=None)",
        "function_name": "avg_pool",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ksize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "packsequenceas": {
        "code": "tf.nest.pack_sequence_as(structure,flat_sequence,expand_composites=False)",
        "function_name": "pack_sequence_as",
        "args": [
            {
                "name": "structure",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "flatsequence",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "expandcomposites",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertsamestructure": {
        "code": "tf.nest.assert_same_structure(nest1,nest2,check_types=True,expand_composites=False)",
        "function_name": "assert_same_structure",
        "args": [
            {
                "name": "nest",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "nest",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "checktypes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "expandcomposites",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convertgraphdef": {
        "code": "tf.mlir.experimental.convert_graph_def(graph_def,pass_pipeline='tf-standard-pipeline')",
        "function_name": "convert_graph_def",
        "args": [
            {
                "name": "graphdef",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "passpipeline",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "flatten": {
        "code": "tf.keras.backend.flatten(x)",
        "function_name": "flatten",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "mapstructure": {
        "code": "tf.nest.map_structure(func,*structure,**kwargs)",
        "function_name": "map_structure",
        "args": [
            {
                "name": "func",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "structure",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isnested": {
        "code": "tf.nest.is_nested(seq)",
        "function_name": "is_nested",
        "args": [
            {
                "name": "seq",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "zerofraction": {
        "code": "tf.math.zero_fraction(value,name=None)",
        "function_name": "zero_fraction",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "xdivy": {
        "code": "tf.math.xdivy(x,y,name=None)",
        "function_name": "xdivy",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "xlogy": {
        "code": "tf.math.xlogy(x,y,name=None)",
        "function_name": "xlogy",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "zeta": {
        "code": "tf.math.zeta(x,q,name=None)",
        "function_name": "zeta",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "q",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentsqrtn": {
        "code": "tf.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)",
        "function_name": "unsorted_segment_sqrt_n",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentprod": {
        "code": "tf.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)",
        "function_name": "unsorted_segment_prod",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentsum": {
        "code": "tf.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)",
        "function_name": "unsorted_segment_sum",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "segmentids"
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "numsegments"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentmean": {
        "code": "tf.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)",
        "function_name": "unsorted_segment_mean",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentmin": {
        "code": "tf.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)",
        "function_name": "unsorted_segment_min",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "truediv": {
        "code": "tf.math.truediv(x,y,name=None)",
        "function_name": "truediv",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unsortedsegmentmax": {
        "code": "tf.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)",
        "function_name": "unsorted_segment_max",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numsegments",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "topk": {
        "code": "tf.math.top_k(input,k=1,sorted=True,name=None)",
        "function_name": "top_k",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "k"
            },
            {
                "name": "sorted",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "sorted"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tanh": {
        "code": "tf.keras.activations.tanh(x)",
        "function_name": "tanh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "tan": {
        "code": "tf.math.tan(x,name=None)",
        "function_name": "tan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "squareddifference": {
        "code": "tf.math.squared_difference(x,y,name=None)",
        "function_name": "squared_difference",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "square": {
        "code": "tf.keras.backend.square(x)",
        "function_name": "square",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "sqrt": {
        "code": "tf.keras.backend.sqrt(x)",
        "function_name": "sqrt",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "subtract": {
        "code": "tf.keras.layers.subtract(inputs,**kwargs)",
        "function_name": "subtract",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sin": {
        "code": "tf.keras.backend.sin(x)",
        "function_name": "sin",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "sign": {
        "code": "tf.keras.backend.sign(x)",
        "function_name": "sign",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "sinh": {
        "code": "tf.math.sinh(x,name=None)",
        "function_name": "sinh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "softplus": {
        "code": "tf.keras.activations.softplus(x)",
        "function_name": "softplus",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "sigmoid": {
        "code": "tf.keras.activations.sigmoid(x)",
        "function_name": "sigmoid",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "round": {
        "code": "tf.keras.backend.round(x)",
        "function_name": "round",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "segmentprod": {
        "code": "tf.math.segment_prod(data,segment_ids,name=None)",
        "function_name": "segment_prod",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "segmentmin": {
        "code": "tf.math.segment_min(data,segment_ids,name=None)",
        "function_name": "segment_min",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rsqrt": {
        "code": "tf.math.rsqrt(x,name=None)",
        "function_name": "rsqrt",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "scalarmul": {
        "code": "tf.math.scalar_mul(scalar,x,name=None)",
        "function_name": "scalar_mul",
        "args": [
            {
                "name": "scalar",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "segmentmax": {
        "code": "tf.math.segment_max(data,segment_ids,name=None)",
        "function_name": "segment_max",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "segmentids",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducevariance": {
        "code": "tf.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_variance",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rint": {
        "code": "tf.math.rint(x,name=None)",
        "function_name": "rint",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducestd": {
        "code": "tf.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_std",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducemin": {
        "code": "tf.math.reduce_min(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_min",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducemean": {
        "code": "tf.math.reduce_mean(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_mean",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reduceprod": {
        "code": "tf.math.reduce_prod(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_prod",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reducelogsumexp": {
        "code": "tf.math.reduce_logsumexp(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_logsumexp",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reduceeuclideannorm": {
        "code": "tf.math.reduce_euclidean_norm(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_euclidean_norm",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reciprocalnonan": {
        "code": "tf.math.reciprocal_no_nan(x,name=None)",
        "function_name": "reciprocal_no_nan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reduceany": {
        "code": "tf.math.reduce_any(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_any",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "polygamma": {
        "code": "tf.math.polygamma(a,x,name=None)",
        "function_name": "polygamma",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "notequal": {
        "code": "tf.keras.backend.not_equal(x,y)",
        "function_name": "not_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reciprocal": {
        "code": "tf.math.reciprocal(x,name=None)",
        "function_name": "reciprocal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "real": {
        "code": "tf.math.real(input,name=None)",
        "function_name": "real",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "input"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "pow": {
        "code": "tf.keras.backend.pow(x,a)",
        "function_name": "pow",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "polyval": {
        "code": "tf.math.polyval(coeffs,x,name=None)",
        "function_name": "polyval",
        "args": [
            {
                "name": "coeffs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "negative": {
        "code": "tf.math.negative(x,name=None)",
        "function_name": "negative",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nextafter": {
        "code": "tf.math.nextafter(x1,x2,name=None)",
        "function_name": "nextafter",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ndtri": {
        "code": "tf.math.ndtri(x,name=None)",
        "function_name": "ndtri",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "multiplynonan": {
        "code": "tf.math.multiply_no_nan(x,y,name=None)",
        "function_name": "multiply_no_nan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logicalxor": {
        "code": "tf.math.logical_xor(x,y,name='LogicalXor')",
        "function_name": "logical_xor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logicaland": {
        "code": "tf.math.logical_and(x,y,name=None)",
        "function_name": "logical_and",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logicalnot": {
        "code": "tf.math.logical_not(x,name=None)",
        "function_name": "logical_not",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "multiply": {
        "code": "tf.keras.layers.multiply(inputs,**kwargs)",
        "function_name": "multiply",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logicalor": {
        "code": "tf.math.logical_or(x,y,name=None)",
        "function_name": "logical_or",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logsigmoid": {
        "code": "tf.math.log_sigmoid(x,name=None)",
        "function_name": "log_sigmoid",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "log": {
        "code": "tf.keras.backend.log(x)",
        "function_name": "log",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "logp": {
        "code": "tf.math.log1p(x,name=None)",
        "function_name": "log1p",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lgamma": {
        "code": "tf.math.lgamma(x,name=None)",
        "function_name": "lgamma",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lessequal": {
        "code": "tf.keras.backend.less_equal(x,y)",
        "function_name": "less_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "less": {
        "code": "tf.keras.backend.less(x,y)",
        "function_name": "less",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lnormalize": {
        "code": "tf.keras.backend.l2_normalize(x,axis=None)",
        "function_name": "l2_normalize",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lbeta": {
        "code": "tf.math.lbeta(x,name=None)",
        "function_name": "lbeta",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isnondecreasing": {
        "code": "tf.math.is_non_decreasing(x,name=None)",
        "function_name": "is_non_decreasing",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isstrictlyincreasing": {
        "code": "tf.math.is_strictly_increasing(x,name=None)",
        "function_name": "is_strictly_increasing",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isnan": {
        "code": "tf.math.is_nan(x,name=None)",
        "function_name": "is_nan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isfinite": {
        "code": "tf.math.is_finite(x,name=None)",
        "function_name": "is_finite",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isinf": {
        "code": "tf.math.is_inf(x,name=None)",
        "function_name": "is_inf",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "intopk": {
        "code": "tf.keras.backend.in_top_k(predictions,targets,k)",
        "function_name": "in_top_k",
        "args": [
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "igammac": {
        "code": "tf.math.igammac(a,x,name=None)",
        "function_name": "igammac",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "invertpermutation": {
        "code": "tf.math.invert_permutation(x,name=None)",
        "function_name": "invert_permutation",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "greaterequal": {
        "code": "tf.keras.backend.greater_equal(x,y)",
        "function_name": "greater_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "imag": {
        "code": "tf.math.imag(input,name=None)",
        "function_name": "imag",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "input"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "greater": {
        "code": "tf.keras.backend.greater(x,y)",
        "function_name": "greater",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "igamma": {
        "code": "tf.math.igamma(a,x,name=None)",
        "function_name": "igamma",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "floordiv": {
        "code": "tf.math.floordiv(x,y,name=None)",
        "function_name": "floordiv",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "floor": {
        "code": "tf.math.floor(x,name=None)",
        "function_name": "floor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "expm": {
        "code": "tf.linalg.expm(input,name=None)",
        "function_name": "expm",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "floormod": {
        "code": "tf.math.floormod(x,y,name=None)",
        "function_name": "floormod",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "exp": {
        "code": "tf.keras.backend.exp(x)",
        "function_name": "exp",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "erfc": {
        "code": "tf.math.erfc(x,name=None)",
        "function_name": "erfc",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "erfinv": {
        "code": "tf.math.erfinv(x,name=None)",
        "function_name": "erfinv",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "equal": {
        "code": "tf.keras.backend.equal(x,y)",
        "function_name": "equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dividenonan": {
        "code": "tf.math.divide_no_nan(x,y,name=None)",
        "function_name": "divide_no_nan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "erf": {
        "code": "tf.math.erf(x,name=None)",
        "function_name": "erf",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "divide": {
        "code": "tf.math.divide(x,y,name=None)",
        "function_name": "divide",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "digamma": {
        "code": "tf.math.digamma(x,name=None)",
        "function_name": "digamma",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cumulativelogsumexp": {
        "code": "tf.math.cumulative_logsumexp(x,axis=0,exclusive=False,reverse=False,name=None)",
        "function_name": "cumulative_logsumexp",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "exclusive",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "reverse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cumsum": {
        "code": "tf.keras.backend.cumsum(x,axis=0)",
        "function_name": "cumsum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            }
        ]
    },
    "cosh": {
        "code": "tf.math.cosh(x,name=None)",
        "function_name": "cosh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "conj": {
        "code": "tf.math.conj(x,name=None)",
        "function_name": "conj",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "confusionmatrix": {
        "code": "tf.math.confusion_matrix(labels,predictions,num_classes=None,weights=None,dtype=tf.dtypes.int32,name=None)",
        "function_name": "confusion_matrix",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "labels"
            },
            {
                "name": "predictions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "predictions"
            },
            {
                "name": "numclasses",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "numclasses"
            },
            {
                "name": "weights",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "countnonzero": {
        "code": "tf.math.count_nonzero(input,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None)",
        "function_name": "count_nonzero",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cumprod": {
        "code": "tf.keras.backend.cumprod(x,axis=0)",
        "function_name": "cumprod",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cos": {
        "code": "tf.keras.backend.cos(x)",
        "function_name": "cos",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "ceil": {
        "code": "tf.math.ceil(x,name=None)",
        "function_name": "ceil",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bincount": {
        "code": "tf.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32,name=None)",
        "function_name": "bincount",
        "args": [
            {
                "name": "arr",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "weights",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "betainc": {
        "code": "tf.math.betainc(a,b,x,name=None)",
        "function_name": "betainc",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "besseli": {
        "code": "tf.math.bessel_i0(x,name=None)",
        "function_name": "bessel_i0",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "besselie": {
        "code": "tf.math.bessel_i0e(x,name=None)",
        "function_name": "bessel_i0e",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "atan": {
        "code": "tf.math.atan(x,name=None)",
        "function_name": "atan",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "atanh": {
        "code": "tf.math.atanh(x,name=None)",
        "function_name": "atanh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "asin": {
        "code": "tf.math.asin(x,name=None)",
        "function_name": "asin",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "argmax": {
        "code": "tf.keras.backend.argmax(x,axis=-1)",
        "function_name": "argmax",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            }
        ]
    },
    "argmin": {
        "code": "tf.keras.backend.argmin(x,axis=-1)",
        "function_name": "argmin",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            }
        ]
    },
    "asinh": {
        "code": "tf.math.asinh(x,name=None)",
        "function_name": "asinh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "angle": {
        "code": "tf.math.angle(input,name=None)",
        "function_name": "angle",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "addn": {
        "code": "tf.math.add_n(inputs,name=None)",
        "function_name": "add_n",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "acosh": {
        "code": "tf.math.acosh(x,name=None)",
        "function_name": "acosh",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "acos": {
        "code": "tf.math.acos(x,name=None)",
        "function_name": "acos",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "accumulaten": {
        "code": "tf.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)",
        "function_name": "accumulate_n",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tensordtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "abs": {
        "code": "tf.keras.backend.abs(x)",
        "function_name": "abs",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            }
        ]
    },
    "loaddelegate": {
        "code": "tf.lite.experimental.load_delegate(library,options=None)",
        "function_name": "load_delegate",
        "args": [
            {
                "name": "library",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "options",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "trace": {
        "code": "tf.autograph.trace(*args)",
        "function_name": "trace",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tridiagonalsolve": {
        "code": "tf.linalg.tridiagonal_solve(diagonals,rhs,diagonals_format='compact',transpose_rhs=False,conjugate_rhs=False,name=None,partial_pivoting=True)",
        "function_name": "tridiagonal_solve",
        "args": [
            {
                "name": "diagonals",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "diagonalsformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "transposerhs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "conjugaterhs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "partialpivoting",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tridiagonalmatmul": {
        "code": "tf.linalg.tridiagonal_matmul(diagonals,rhs,diagonals_format='compact',name=None)",
        "function_name": "tridiagonal_matmul",
        "args": [
            {
                "name": "diagonals",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "diagonalsformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tensordiagpart": {
        "code": "tf.linalg.tensor_diag_part(input,name=None)",
        "function_name": "tensor_diag_part",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "triangularsolve": {
        "code": "tf.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)",
        "function_name": "triangular_solve",
        "args": [
            {
                "name": "matrix",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lower",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjoint",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tensordiag": {
        "code": "tf.linalg.tensor_diag(diagonal,name=None)",
        "function_name": "tensor_diag",
        "args": [
            {
                "name": "diagonal",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sqrtm": {
        "code": "tf.linalg.sqrtm(input,name=None)",
        "function_name": "sqrtm",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "svd": {
        "code": "tf.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)",
        "function_name": "svd",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fullmatrices",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "computeuv",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "solve": {
        "code": "tf.linalg.solve(matrix,rhs,adjoint=False,name=None)",
        "function_name": "solve",
        "args": [
            {
                "name": "matrix",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjoint",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setdiag": {
        "code": "tf.linalg.set_diag(input,diagonal,name='set_diag',k=0)",
        "function_name": "set_diag",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "diagonal",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "qr": {
        "code": "tf.linalg.qr(input,full_matrices=False,name=None)",
        "function_name": "qr",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fullmatrices",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "fullmatrices"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "slogdet": {
        "code": "tf.linalg.slogdet(input,name=None)",
        "function_name": "slogdet",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "pinv": {
        "code": "tf.linalg.pinv(a,rcond=None,validate_args=False,name=None)",
        "function_name": "pinv",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rcond",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateargs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "matvec": {
        "code": "tf.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)",
        "function_name": "matvec",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "transposea",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjointa",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "aissparse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bissparse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "matrixtranspose": {
        "code": "tf.linalg.matrix_transpose(a,name='matrix_transpose',conjugate=False)",
        "function_name": "matrix_transpose",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "conjugate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "normalize": {
        "code": "tf.keras.utils.normalize(x,axis=-1,order=2)",
        "function_name": "normalize",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "order",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "matmul": {
        "code": "tf.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)",
        "function_name": "matmul",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "a"
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "b"
            },
            {
                "name": "transposea",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "transposea"
            },
            {
                "name": "transposeb",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "transposeb"
            },
            {
                "name": "adjointa",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjointb",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "aissparse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bissparse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "matrixrank": {
        "code": "tf.linalg.matrix_rank(a,tol=None,validate_args=False,name=None)",
        "function_name": "matrix_rank",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tol",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateargs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lu": {
        "code": "tf.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)",
        "function_name": "lu",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputidxtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lureconstruct": {
        "code": "tf.linalg.lu_reconstruct(lower_upper,perm,validate_args=False,name=None)",
        "function_name": "lu_reconstruct",
        "args": [
            {
                "name": "lowerupper",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "perm",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateargs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lusolve": {
        "code": "tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)",
        "function_name": "lu_solve",
        "args": [
            {
                "name": "lowerupper",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "perm",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateargs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lumatrixinverse": {
        "code": "tf.linalg.lu_matrix_inverse(lower_upper,perm,validate_args=False,name=None)",
        "function_name": "lu_matrix_inverse",
        "args": [
            {
                "name": "lowerupper",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "perm",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "validateargs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logm": {
        "code": "tf.linalg.logm(input,name=None)",
        "function_name": "logm",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lstsq": {
        "code": "tf.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)",
        "function_name": "lstsq",
        "args": [
            {
                "name": "matrix",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lregularizer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fast",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logdet": {
        "code": "tf.linalg.logdet(matrix,name=None)",
        "function_name": "logdet",
        "args": [
            {
                "name": "matrix",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "inv": {
        "code": "tf.linalg.inv(input,adjoint=False,name=None)",
        "function_name": "inv",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "adjoint",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "globalnorm": {
        "code": "tf.linalg.global_norm(t_list,name=None)",
        "function_name": "global_norm",
        "args": [
            {
                "name": "tlist",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "diagpart": {
        "code": "tf.linalg.diag_part(input,name='diag_part',k=0,padding_value=0)",
        "function_name": "diag_part",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddingvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "eigh": {
        "code": "tf.linalg.eigh(tensor,name=None)",
        "function_name": "eigh",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "diag": {
        "code": "tf.linalg.diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0)",
        "function_name": "diag",
        "args": [
            {
                "name": "diagonal",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numrows",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numcols",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddingvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "eigvalsh": {
        "code": "tf.linalg.eigvalsh(tensor,name=None)",
        "function_name": "eigvalsh",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "choleskysolve": {
        "code": "tf.linalg.cholesky_solve(chol,rhs,name=None)",
        "function_name": "cholesky_solve",
        "args": [
            {
                "name": "chol",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rhs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cholesky": {
        "code": "tf.linalg.cholesky(input,name=None)",
        "function_name": "cholesky",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "det": {
        "code": "tf.linalg.det(input,name=None)",
        "function_name": "det",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bandpart": {
        "code": "tf.linalg.band_part(input,num_lower,num_upper,name=None)",
        "function_name": "band_part",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numlower",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "numlower"
            },
            {
                "name": "numupper",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "numupper"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "adjoint": {
        "code": "tf.linalg.adjoint(matrix,name=None)",
        "function_name": "adjoint",
        "args": [
            {
                "name": "matrix",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "serializekerasobject": {
        "code": "tf.keras.utils.serialize_keras_object(instance)",
        "function_name": "serialize_keras_object",
        "args": [
            {
                "name": "instance",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tocategorical": {
        "code": "tf.keras.utils.to_categorical(y,num_classes=None,dtype='float32')",
        "function_name": "to_categorical",
        "args": [
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numclasses",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "registerkerasserializable": {
        "code": "tf.keras.utils.register_keras_serializable(package='Custom',name=None)",
        "function_name": "register_keras_serializable",
        "args": [
            {
                "name": "package",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "plotmodel": {
        "code": "tf.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96)",
        "function_name": "plot_model",
        "args": [
            {
                "name": "model",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tofile",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "showshapes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "showlayernames",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rankdir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "expandnested",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dpi",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "multigpumodel": {
        "code": "tf.keras.utils.multi_gpu_model(model,gpus,cpu_merge=True,cpu_relocation=False)",
        "function_name": "multi_gpu_model",
        "args": [
            {
                "name": "model",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gpus",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cpumerge",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cpurelocation",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "modeltodot": {
        "code": "tf.keras.utils.model_to_dot(model,show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,subgraph=False)",
        "function_name": "model_to_dot",
        "args": [
            {
                "name": "model",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "showshapes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "showlayernames",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rankdir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "expandnested",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dpi",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "subgraph",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getsourceinputs": {
        "code": "tf.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)",
        "function_name": "get_source_inputs",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "layer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "nodeindex",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getfile": {
        "code": "tf.keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)",
        "function_name": "get_file",
        "args": [
            {
                "name": "fname",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "origin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "untar",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mdhash",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filehash",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cachesubdir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashalgorithm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "extract",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "archiveformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cachedir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getcustomobjects": {
        "code": "tf.keras.utils.get_custom_objects()",
        "function_name": "get_custom_objects",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "deserializekerasobject": {
        "code": "tf.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')",
        "function_name": "deserialize_keras_object",
        "args": [
            {
                "name": "identifier",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "moduleobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "printablemodulename",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "customobjectscope": {
        "code": "tf.keras.utils.custom_object_scope(*args)",
        "function_name": "custom_object_scope",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convertallkernelsinmodel": {
        "code": "tf.keras.utils.convert_all_kernels_in_model(model)",
        "function_name": "convert_all_kernels_in_model",
        "args": [
            {
                "name": "model",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "serialize": {
        "code": "serialize(value)",
        "function_name": "serialize",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "l": {
        "code": "tf.keras.regularizers.l1(l=0.01)",
        "function_name": "l1",
        "args": [
            {
                "name": "l",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ll": {
        "code": "tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)",
        "function_name": "l1_l2",
        "args": [
            {
                "name": "l",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "l",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "get": {
        "code": "tf.keras.activations.get(identifier)",
        "function_name": "get",
        "args": [
            {
                "name": "identifier",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tokenizerfromjson": {
        "code": "tf.keras.preprocessing.text.tokenizer_from_json(json_string)",
        "function_name": "tokenizer_from_json",
        "args": [
            {
                "name": "jsonstring",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "onehot": {
        "code": "tf.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)",
        "function_name": "one_hot",
        "args": [
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "indices"
            },
            {
                "name": "depth",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "depth"
            },
            {
                "name": "onvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "onvalue"
            },
            {
                "name": "offvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "offvalue"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "deserialize": {
        "code": "tf.keras.activations.deserialize(name,custom_objects=None)",
        "function_name": "deserialize",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "texttowordsequence": {
        "code": "tf.keras.preprocessing.text.text_to_word_sequence(text,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')",
        "function_name": "text_to_word_sequence",
        "args": [
            {
                "name": "text",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lt",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lower",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "split",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hashingtrick": {
        "code": "tf.keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')",
        "function_name": "hashing_trick",
        "args": [
            {
                "name": "text",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "n",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashfunction",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filters",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lt",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lower",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "split",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "skipgrams": {
        "code": "tf.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)",
        "function_name": "skipgrams",
        "args": [
            {
                "name": "sequence",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularysize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "windowsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "negativesamples",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shuffle",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "categorical",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "samplingtable",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "padsequences": {
        "code": "tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)",
        "function_name": "pad_sequences",
        "args": [
            {
                "name": "sequences",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxlen",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "truncating",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "value",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makesamplingtable": {
        "code": "tf.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)",
        "function_name": "make_sampling_table",
        "args": [
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "samplingfactor",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "saveimg": {
        "code": "tf.keras.preprocessing.image.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)",
        "function_name": "save_img",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fileformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scale",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomshift": {
        "code": "tf.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
        "function_name": "random_shift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "wrg",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hrg",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fillmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "interpolationorder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomzoom": {
        "code": "tf.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
        "function_name": "random_zoom",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "zoomrange",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fillmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "interpolationorder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randombrightness": {
        "code": "tf.image.random_brightness(image,max_delta,seed=None)",
        "function_name": "random_brightness",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxdelta",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomrotation": {
        "code": "tf.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
        "function_name": "random_rotation",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rg",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fillmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "interpolationorder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomshear": {
        "code": "tf.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
        "function_name": "random_shear",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "intensity",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fillmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "interpolationorder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomchannelshift": {
        "code": "tf.keras.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)",
        "function_name": "random_channel_shift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "intensityrange",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loadimg": {
        "code": "tf.keras.preprocessing.image.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')",
        "function_name": "load_img",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "grayscale",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colormode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "interpolation",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "imgtoarray": {
        "code": "tf.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)",
        "function_name": "img_to_array",
        "args": [
            {
                "name": "img",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "applychannelshift": {
        "code": "tf.keras.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)",
        "function_name": "apply_channel_shift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "intensity",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "arraytoimg": {
        "code": "tf.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True,dtype=None)",
        "function_name": "array_to_img",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scale",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "applyaffinetransform": {
        "code": "tf.keras.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=0,col_axis=1,channel_axis=2,fill_mode='nearest',cval=0.0,order=1)",
        "function_name": "apply_affine_transform",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "theta",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tx",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ty",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shear",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "zx",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "zy",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channelaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fillmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "order",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "applybrightnessshift": {
        "code": "tf.keras.preprocessing.image.apply_brightness_shift(x,brightness)",
        "function_name": "apply_brightness_shift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "brightness",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "savemodel": {
        "code": "tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None)",
        "function_name": "save_model",
        "args": [
            {
                "name": "model",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filepath",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "overwrite",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "includeoptimizer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "saveformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "signatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "options",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "modelfromyaml": {
        "code": "tf.keras.models.model_from_yaml(yaml_string,custom_objects=None)",
        "function_name": "model_from_yaml",
        "args": [
            {
                "name": "yamlstring",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "modelfromjson": {
        "code": "tf.keras.models.model_from_json(json_string,custom_objects=None)",
        "function_name": "model_from_json",
        "args": [
            {
                "name": "jsonstring",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loadmodel": {
        "code": "tf.keras.models.load_model(filepath,custom_objects=None,compile=True)",
        "function_name": "load_model",
        "args": [
            {
                "name": "filepath",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "compile",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "modelfromconfig": {
        "code": "tf.keras.models.model_from_config(config,custom_objects=None)",
        "function_name": "model_from_config",
        "args": [
            {
                "name": "config",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clonemodel": {
        "code": "tf.keras.models.clone_model(model,input_tensors=None,clone_function=None)",
        "function_name": "clone_model",
        "args": [
            {
                "name": "model",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputtensors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "clonefunction",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setpolicy": {
        "code": "tf.keras.mixed_precision.experimental.set_policy(policy)",
        "function_name": "set_policy",
        "args": [
            {
                "name": "policy",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "globalpolicy": {
        "code": "tf.keras.mixed_precision.experimental.global_policy()",
        "function_name": "global_policy",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "topkcategoricalaccuracy": {
        "code": "tf.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)",
        "function_name": "top_k_categorical_accuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sparsetopkcategoricalaccuracy": {
        "code": "tf.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)",
        "function_name": "sparse_top_k_categorical_accuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sparsecategoricalaccuracy": {
        "code": "tf.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)",
        "function_name": "sparse_categorical_accuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "ytrue"
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "ypred"
            }
        ]
    },
    "categoricalaccuracy": {
        "code": "tf.keras.metrics.categorical_accuracy(y_true,y_pred)",
        "function_name": "categorical_accuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "ytrue"
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "ypred"
            }
        ]
    },
    "binaryaccuracy": {
        "code": "tf.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)",
        "function_name": "binary_accuracy",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "ytrue"
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "ypred"
            },
            {
                "name": "threshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "logcosh": {
        "code": "tf.keras.losses.logcosh(y_true,y_pred)",
        "function_name": "logcosh",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cosinesimilarity": {
        "code": "tf.keras.losses.cosine_similarity(y_true,y_pred,axis=-1)",
        "function_name": "cosine_similarity",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categoricalhinge": {
        "code": "tf.keras.losses.categorical_hinge(y_true,y_pred)",
        "function_name": "categorical_hinge",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dot": {
        "code": "tf.keras.backend.dot(x,y)",
        "function_name": "dot",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "concatenate": {
        "code": "tf.keras.backend.concatenate(tensors,axis=-1)",
        "function_name": "concatenate",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "average": {
        "code": "tf.keras.layers.average(inputs,**kwargs)",
        "function_name": "average",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lecununiform": {
        "code": "tf.keras.initializers.lecun_uniform(seed=None)",
        "function_name": "lecun_uniform",
        "args": [
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "lecunnormal": {
        "code": "tf.keras.initializers.lecun_normal(seed=None)",
        "function_name": "lecun_normal",
        "args": [
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "heuniform": {
        "code": "tf.keras.initializers.he_uniform(seed=None)",
        "function_name": "he_uniform",
        "args": [
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "henormal": {
        "code": "tf.keras.initializers.he_normal(seed=None)",
        "function_name": "he_normal",
        "args": [
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "terminatekerasmultiprocessingpools": {
        "code": "tf.keras.experimental.terminate_keras_multiprocessing_pools(grace_period=0.1,use_sigkill=False)",
        "function_name": "terminate_keras_multiprocessing_pools",
        "args": [
            {
                "name": "graceperiod",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "usesigkill",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "modeltoestimator": {
        "code": "tf.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint')",
        "function_name": "model_to_estimator",
        "args": [
            {
                "name": "kerasmodel",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kerasmodelpath",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "customobjects",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "modeldir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "config",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "checkpointformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loaddata": {
        "code": "tf.keras.datasets.cifar100.load_data(label_mode='fine')",
        "function_name": "load_data",
        "args": [
            {
                "name": "labelmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getwordindex": {
        "code": "tf.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')",
        "function_name": "get_word_index",
        "args": [
            {
                "name": "path",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "variable": {
        "code": "tf.keras.backend.variable(value,dtype=None,name=None,constraint=None)",
        "function_name": "variable",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "dtype"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "name"
            },
            {
                "name": "constraint",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "zeroslike": {
        "code": "tf.zeros_like(input,dtype=None,name=None)",
        "function_name": "zeros_like",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "input",
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "zeros": {
        "code": "tf.zeros(shape,dtype=tf.dtypes.float32,name=None)",
        "function_name": "zeros",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "var": {
        "code": "tf.keras.backend.var(x,axis=None,keepdims=False)",
        "function_name": "var",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "updatesub": {
        "code": "tf.keras.backend.update_sub(x,decrement)",
        "function_name": "update_sub",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "decrement",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "updateadd": {
        "code": "tf.keras.backend.update_add(x,increment)",
        "function_name": "update_add",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "increment",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "update": {
        "code": "tf.keras.backend.update(x,new_x)",
        "function_name": "update",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "newx",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sum": {
        "code": "tf.keras.backend.sum(x,axis=None,keepdims=False)",
        "function_name": "sum",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "tile": {
        "code": "tf.tile(input,multiples,name=None)",
        "function_name": "tile",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "multiples",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "temporalpadding": {
        "code": "tf.keras.backend.temporal_padding(x,padding=(1,1))",
        "function_name": "temporal_padding",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "switch": {
        "code": "tf.keras.backend.switch(condition,then_expression,else_expression)",
        "function_name": "switch",
        "args": [
            {
                "name": "condition",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "thenexpression",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "elseexpression",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stopgradient": {
        "code": "tf.stop_gradient(input,name=None)",
        "function_name": "stop_gradient",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "std": {
        "code": "tf.keras.backend.std(x,axis=None,keepdims=False)",
        "function_name": "std",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "squeeze": {
        "code": "tf.squeeze(input,axis=None,name=None)",
        "function_name": "squeeze",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "input",
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "spatialdpadding": {
        "code": "tf.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)",
        "function_name": "spatial_3d_padding",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 5,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sparsecategoricalcrossentropy": {
        "code": "tf.keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)",
        "function_name": "sparse_categorical_crossentropy",
        "args": [
            {
                "name": "target",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "output",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fromlogits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "shape": {
        "code": "tf.shape(input,out_type=tf.dtypes.int32,name=None)",
        "function_name": "shape",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setvalue": {
        "code": "tf.keras.backend.set_value(x,value)",
        "function_name": "set_value",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setlearningphase": {
        "code": "tf.keras.backend.set_learning_phase(value)",
        "function_name": "set_learning_phase",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setfloatx": {
        "code": "tf.keras.backend.set_floatx(value)",
        "function_name": "set_floatx",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setimagedataformat": {
        "code": "tf.keras.backend.set_image_data_format(data_format)",
        "function_name": "set_image_data_format",
        "args": [
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setepsilon": {
        "code": "tf.keras.backend.set_epsilon(value)",
        "function_name": "set_epsilon",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rnn": {
        "code": "tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)",
        "function_name": "rnn",
        "args": [
            {
                "name": "stepfunction",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initialstates",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gobackwards",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "constants",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "unroll",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "timemajor",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "zerooutputformask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reverse": {
        "code": "tf.reverse(tensor,axis,name=None)",
        "function_name": "reverse",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resizevolumes": {
        "code": "tf.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)",
        "function_name": "resize_volumes",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "depthfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "heightfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "widthfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "repeat": {
        "code": "tf.repeat(input,repeats,axis=None,name=None)",
        "function_name": "repeat",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "repeats",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resetuids": {
        "code": "tf.keras.backend.reset_uids()",
        "function_name": "reset_uids",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "repeatelements": {
        "code": "tf.keras.backend.repeat_elements(x,rep,axis)",
        "function_name": "repeat_elements",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rep",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomuniform": {
        "code": "tf.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)",
        "function_name": "random_uniform",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxval",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resizeimages": {
        "code": "tf.keras.backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')",
        "function_name": "resize_images",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "heightfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "widthfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "interpolation",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomuniformvariable": {
        "code": "tf.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)",
        "function_name": "random_uniform_variable",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "low",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "high",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomnormalvariable": {
        "code": "tf.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)",
        "function_name": "random_normal_variable",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scale",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "printtensor": {
        "code": "tf.keras.backend.print_tensor(x,message='')",
        "function_name": "print_tensor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randombinomial": {
        "code": "tf.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)",
        "function_name": "random_binomial",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "p",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "poold": {
        "code": "tf.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')",
        "function_name": "pool2d",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "poolsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "poolmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomnormal": {
        "code": "tf.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)",
        "function_name": "random_normal",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mean",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "stddev",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "prod": {
        "code": "tf.keras.backend.prod(x,axis=None,keepdims=False)",
        "function_name": "prod",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "placeholder": {
        "code": "tf.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,ragged=False)",
        "function_name": "placeholder",
        "args": [
            {
                "name": "shape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ndim",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sparse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ragged",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ones": {
        "code": "tf.ones(shape,dtype=tf.dtypes.float32,name=None)",
        "function_name": "ones",
        "args": [
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "permutedimensions": {
        "code": "tf.keras.backend.permute_dimensions(x,pattern)",
        "function_name": "permute_dimensions",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pattern",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "namescope": {
        "code": "tf.keras.backend.name_scope(name)",
        "function_name": "name_scope",
        "args": [
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "normalizebatchintraining": {
        "code": "tf.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)",
        "function_name": "normalize_batch_in_training",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gamma",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "beta",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "reductionaxes",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "epsilon",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ndim": {
        "code": "tf.keras.backend.ndim(x)",
        "function_name": "ndim",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "movingaverageupdate": {
        "code": "tf.keras.backend.moving_average_update(x,value,momentum)",
        "function_name": "moving_average_update",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "momentum",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "oneslike": {
        "code": "tf.ones_like(input,dtype=None,name=None)",
        "function_name": "ones_like",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "input",
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "min": {
        "code": "tf.keras.backend.min(x,axis=None,keepdims=False)",
        "function_name": "min",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "mean": {
        "code": "tf.keras.backend.mean(x,axis=None,keepdims=False)",
        "function_name": "mean",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "mapfn": {
        "code": "tf.map_fn(fn,elems,dtype=None,parallel_iterations=None,back_prop=True,swap_memory=False,infer_shape=True,name=None)",
        "function_name": "map_fn",
        "args": [
            {
                "name": "fn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "elems",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paralleliterations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "backprop",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "swapmemory",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "infershape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "max": {
        "code": "tf.keras.backend.max(x,axis=None,keepdims=False)",
        "function_name": "max",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "localconvd": {
        "code": "tf.keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)",
        "function_name": "local_conv1d",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kernel",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kernelsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dataformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "learningphase": {
        "code": "tf.keras.backend.learning_phase()",
        "function_name": "learning_phase",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "manualvariableinitialization": {
        "code": "tf.keras.backend.manual_variable_initialization(value)",
        "function_name": "manual_variable_initialization",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "iskerastensor": {
        "code": "tf.keras.backend.is_keras_tensor(x)",
        "function_name": "is_keras_tensor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "issparse": {
        "code": "tf.keras.backend.is_sparse(tensor)",
        "function_name": "is_sparse",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "intestphase": {
        "code": "tf.keras.backend.in_test_phase(x,alt,training=None)",
        "function_name": "in_test_phase",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "alt",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "training",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "intrainphase": {
        "code": "tf.keras.backend.in_train_phase(x,alt,training=None)",
        "function_name": "in_train_phase",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "alt",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "training",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "intshape": {
        "code": "tf.keras.backend.int_shape(x)",
        "function_name": "int_shape",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "imagedataformat": {
        "code": "tf.keras.backend.image_data_format()",
        "function_name": "image_data_format",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hardsigmoid": {
        "code": "tf.keras.activations.hard_sigmoid(x)",
        "function_name": "hard_sigmoid",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "foldr": {
        "code": "tf.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)",
        "function_name": "foldr",
        "args": [
            {
                "name": "fn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "elems",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initializer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paralleliterations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "backprop",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "swapmemory",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getuid": {
        "code": "tf.keras.backend.get_uid(prefix='')",
        "function_name": "get_uid",
        "args": [
            {
                "name": "prefix",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "foldl": {
        "code": "tf.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)",
        "function_name": "foldl",
        "args": [
            {
                "name": "fn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "elems",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initializer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paralleliterations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "backprop",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "swapmemory",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "function": {
        "code": "tf.function(func=None,input_signature=None,autograph=True,experimental_implements=None,experimental_autograph_options=None,experimental_relax_shapes=False,experimental_compile=None)",
        "function_name": "function",
        "args": [
            {
                "name": "func",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputsignature",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "autograph",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "experimentalimplements",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "experimentalautographoptions",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "experimentalrelaxshapes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "experimentalcompile",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "floatx": {
        "code": "tf.keras.backend.floatx()",
        "function_name": "floatx",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getvalue": {
        "code": "tf.keras.backend.get_value(x)",
        "function_name": "get_value",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "eval": {
        "code": "tf.keras.backend.eval(x)",
        "function_name": "eval",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dtype": {
        "code": "tf.keras.backend.dtype(x)",
        "function_name": "dtype",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "epsilon": {
        "code": "tf.keras.backend.epsilon()",
        "function_name": "epsilon",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctclabeldensetosparse": {
        "code": "tf.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)",
        "function_name": "ctc_label_dense_to_sparse",
        "args": [
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labellengths",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctcdecode": {
        "code": "tf.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)",
        "function_name": "ctc_decode",
        "args": [
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputlength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "greedy",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "beamwidth",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "toppaths",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ctcbatchcost": {
        "code": "tf.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)",
        "function_name": "ctc_batch_cost",
        "args": [
            {
                "name": "ytrue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ypred",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputlength",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labellength",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "countparams": {
        "code": "tf.keras.backend.count_params(x)",
        "function_name": "count_params",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categoricalcrossentropy": {
        "code": "tf.keras.backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)",
        "function_name": "categorical_crossentropy",
        "args": [
            {
                "name": "target",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "output",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fromlogits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clip": {
        "code": "tf.keras.backend.clip(x,min_value,max_value)",
        "function_name": "clip",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minvalue",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxvalue",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "casttofloatx": {
        "code": "tf.keras.backend.cast_to_floatx(x)",
        "function_name": "cast_to_floatx",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cast": {
        "code": "tf.cast(x,dtype,name=None)",
        "function_name": "cast",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "dtype"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clearsession": {
        "code": "tf.keras.backend.clear_session()",
        "function_name": "clear_session",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchsetvalue": {
        "code": "tf.keras.backend.batch_set_value(tuples)",
        "function_name": "batch_set_value",
        "args": [
            {
                "name": "tuples",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "binarycrossentropy": {
        "code": "tf.keras.backend.binary_crossentropy(target,output,from_logits=False)",
        "function_name": "binary_crossentropy",
        "args": [
            {
                "name": "target",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "output",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fromlogits",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchgetvalue": {
        "code": "tf.keras.backend.batch_get_value(tensors)",
        "function_name": "batch_get_value",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchdot": {
        "code": "tf.keras.backend.batch_dot(x,y,axes=None)",
        "function_name": "batch_dot",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchflatten": {
        "code": "tf.keras.backend.batch_flatten(x)",
        "function_name": "batch_flatten",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "any": {
        "code": "tf.keras.backend.any(x,axis=None,keepdims=False)",
        "function_name": "any",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "all": {
        "code": "tf.keras.backend.all(x,axis=None,keepdims=False)",
        "function_name": "all",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "x"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            }
        ]
    },
    "backend": {
        "code": "tf.keras.backend.backend()",
        "function_name": "backend",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": ""
            }
        ]
    },
    "arange": {
        "code": "tf.keras.backend.arange(start,stop=None,step=1,dtype='int32')",
        "function_name": "arange",
        "args": [
            {
                "name": "start",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "start",
                "tfjs": null
            },
            {
                "name": "stop",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": "step",
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": "dtype",
                "tfjs": null
            }
        ]
    },
    "preprocessinput": {
        "code": "tf.keras.applications.densenet.preprocess_input(*args,**kwargs)",
        "function_name": "preprocess_input",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodepredictions": {
        "code": "tf.keras.applications.densenet.decode_predictions(*args,**kwargs)",
        "function_name": "decode_predictions",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "exponential": {
        "code": "Exponential(rate)=Gamma(concentration=1.,rate)",
        "function_name": "Exponential",
        "args": [
            {
                "name": "rate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "linear": {
        "code": "tf.keras.activations.linear(x)",
        "function_name": "linear",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "walk": {
        "code": "tf.io.gfile.walk(top,topdown=True,onerror=None)",
        "function_name": "walk",
        "args": [
            {
                "name": "top",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "topdown",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "onerror",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "mkdir": {
        "code": "tf.io.gfile.mkdir(path)",
        "function_name": "mkdir",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rmtree": {
        "code": "tf.io.gfile.rmtree(path)",
        "function_name": "rmtree",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makedirs": {
        "code": "tf.io.gfile.makedirs(path)",
        "function_name": "makedirs",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "remove": {
        "code": "tf.io.gfile.remove(path)",
        "function_name": "remove",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stat": {
        "code": "tf.io.gfile.stat(path)",
        "function_name": "stat",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rename": {
        "code": "tf.io.gfile.rename(src,dst,overwrite=False)",
        "function_name": "rename",
        "args": [
            {
                "name": "src",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dst",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "overwrite",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "listdir": {
        "code": "tf.io.gfile.listdir(path)",
        "function_name": "listdir",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isdir": {
        "code": "tf.io.gfile.isdir(path)",
        "function_name": "isdir",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "glob": {
        "code": "tf.io.gfile.glob(pattern)",
        "function_name": "glob",
        "args": [
            {
                "name": "pattern",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "copy": {
        "code": "tf.io.gfile.copy(src,dst,overwrite=False)",
        "function_name": "copy",
        "args": [
            {
                "name": "src",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dst",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "overwrite",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "writegraph": {
        "code": "tf.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)",
        "function_name": "write_graph",
        "args": [
            {
                "name": "graphorgraphdef",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logdir",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "astext",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "exists": {
        "code": "tf.io.gfile.exists(path)",
        "function_name": "exists",
        "args": [
            {
                "name": "path",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "writefile": {
        "code": "tf.io.write_file(filename,contents,name=None)",
        "function_name": "write_file",
        "args": [
            {
                "name": "filename",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "serializemanysparse": {
        "code": "tf.io.serialize_many_sparse(sp_input,out_type=tf.dtypes.string,name=None)",
        "function_name": "serialize_many_sparse",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "serializetensor": {
        "code": "tf.io.serialize_tensor(tensor,name=None)",
        "function_name": "serialize_tensor",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sparsetensor": {
        "code": "SparseTensor(indices=[[3,1],[20,0]],values=[0.5,-1.0]dense_shape=[100,3])",
        "function_name": "SparseTensor",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "values",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "denseshape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "serializesparse": {
        "code": "tf.io.serialize_sparse(sp_input,out_type=tf.dtypes.string,name=None)",
        "function_name": "serialize_sparse",
        "args": [
            {
                "name": "spinput",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "readfile": {
        "code": "tf.io.read_file(filename,name=None)",
        "function_name": "read_file",
        "args": [
            {
                "name": "filename",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parsesingleexample": {
        "code": "tf.io.parse_single_example(serialized,features,example_names=None,name=None)",
        "function_name": "parse_single_example",
        "args": [
            {
                "name": "serialized",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "examplenames",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parsetensor": {
        "code": "tf.io.parse_tensor(serialized,out_type,name=None)",
        "function_name": "parse_tensor",
        "args": [
            {
                "name": "serialized",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parsesequenceexample": {
        "code": "tf.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)",
        "function_name": "parse_sequence_example",
        "args": [
            {
                "name": "serialized",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "contextfeatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sequencefeatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "examplenames",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parsesinglesequenceexample": {
        "code": "tf.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)",
        "function_name": "parse_single_sequence_example",
        "args": [
            {
                "name": "serialized",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "contextfeatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sequencefeatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "examplename",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parseexample": {
        "code": "tf.io.parse_example(serialized,features,example_names=None,name=None)",
        "function_name": "parse_example",
        "args": [
            {
                "name": "serialized",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "examplenames",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "matchfilenamesonce": {
        "code": "tf.io.match_filenames_once(pattern,name=None)",
        "function_name": "match_filenames_once",
        "args": [
            {
                "name": "pattern",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isjpeg": {
        "code": "tf.io.is_jpeg(contents,name=None)",
        "function_name": "is_jpeg",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "matchingfiles": {
        "code": "tf.io.matching_files(pattern,name=None)",
        "function_name": "matching_files",
        "args": [
            {
                "name": "pattern",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "extractjpegshape": {
        "code": "tf.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)",
        "function_name": "extract_jpeg_shape",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "encodeproto": {
        "code": "tf.io.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)",
        "function_name": "encode_proto",
        "args": [
            {
                "name": "sizes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fieldnames",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "messagetype",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "descriptorsource",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "encodejpeg": {
        "code": "tf.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)",
        "function_name": "encode_jpeg",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "format",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "quality",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "progressive",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "optimizesize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "chromadownsampling",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "densityunit",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "xdensity",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ydensity",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "xmpmetadata",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "encodebase": {
        "code": "tf.io.encode_base64(input,pad=False,name=None)",
        "function_name": "encode_base64",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pad",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "deserializemanysparse": {
        "code": "tf.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)",
        "function_name": "deserialize_many_sparse",
        "args": [
            {
                "name": "serializedsparse",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rank",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decoderaw": {
        "code": "tf.io.decode_raw(input_bytes,out_type,little_endian=True,fixed_length=None,name=None)",
        "function_name": "decode_raw",
        "args": [
            {
                "name": "inputbytes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "littleendian",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fixedlength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodepng": {
        "code": "tf.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)",
        "function_name": "decode_png",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodejsonexample": {
        "code": "tf.io.decode_json_example(json_examples,name=None)",
        "function_name": "decode_json_example",
        "args": [
            {
                "name": "jsonexamples",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodeproto": {
        "code": "tf.io.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)",
        "function_name": "decode_proto",
        "args": [
            {
                "name": "bytes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "messagetype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fieldnames",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outputtypes",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "descriptorsource",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "messageformat",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sanitize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodeimage": {
        "code": "tf.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)",
        "function_name": "decode_image",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "expandanimations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodejpeg": {
        "code": "tf.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)",
        "function_name": "decode_jpeg",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ratio",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fancyupscaling",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tryrecovertruncated",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "acceptablefraction",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dctmethod",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodegif": {
        "code": "tf.io.decode_gif(contents,name=None)",
        "function_name": "decode_gif",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodecsv": {
        "code": "tf.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,name=None)",
        "function_name": "decode_csv",
        "args": [
            {
                "name": "records",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "recorddefaults",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fielddelim",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "usequotedelim",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "navalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "selectcols",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodebmp": {
        "code": "tf.io.decode_bmp(contents,channels=0,name=None)",
        "function_name": "decode_bmp",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodebase": {
        "code": "tf.io.decode_base64(input,name=None)",
        "function_name": "decode_base64",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodeandcropjpeg": {
        "code": "tf.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)",
        "function_name": "decode_and_crop_jpeg",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cropwindow",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "channels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ratio",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fancyupscaling",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tryrecovertruncated",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "acceptablefraction",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dctmethod",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodecompressed": {
        "code": "tf.io.decode_compressed(bytes,compression_type='',name=None)",
        "function_name": "decode_compressed",
        "args": [
            {
                "name": "bytes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "compressiontype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "yiqtorgb": {
        "code": "tf.image.yiq_to_rgb(images)",
        "function_name": "yiq_to_rgb",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "yuvtorgb": {
        "code": "tf.image.yuv_to_rgb(images)",
        "function_name": "yuv_to_rgb",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "totalvariation": {
        "code": "tf.image.total_variation(images,name=None)",
        "function_name": "total_variation",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ssimmultiscale": {
        "code": "tf.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)",
        "function_name": "ssim_multiscale",
        "args": [
            {
                "name": "img",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "img",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxval",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "powerfactors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filtersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filtersigma",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rot": {
        "code": "tf.image.rot90(image,k=1,name=None)",
        "function_name": "rot90",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rgbtoyuv": {
        "code": "tf.image.rgb_to_yuv(images)",
        "function_name": "rgb_to_yuv",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ssim": {
        "code": "tf.image.ssim(img1,img2,max_val,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)",
        "function_name": "ssim",
        "args": [
            {
                "name": "img",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "img",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxval",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filtersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "filtersigma",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "k",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sobeledges": {
        "code": "tf.image.sobel_edges(image)",
        "function_name": "sobel_edges",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sampledistortedboundingbox": {
        "code": "tf.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=0,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)",
        "function_name": "sample_distorted_bounding_box",
        "args": [
            {
                "name": "imagesize",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "boundingboxes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minobjectcovered",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "aspectratiorange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "arearange",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxattempts",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "useimageifnoboundingboxes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rgbtoyiq": {
        "code": "tf.image.rgb_to_yiq(images)",
        "function_name": "rgb_to_yiq",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rgbtohsv": {
        "code": "tf.image.rgb_to_hsv(images,name=None)",
        "function_name": "rgb_to_hsv",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resizewithcroporpad": {
        "code": "tf.image.resize_with_crop_or_pad(image,target_height,target_width)",
        "function_name": "resize_with_crop_or_pad",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetheight",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rgbtograyscale": {
        "code": "tf.image.rgb_to_grayscale(images,name=None)",
        "function_name": "rgb_to_grayscale",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resize": {
        "code": "tf.image.resize(images,size,method=ResizeMethod.BILINEAR,preserve_aspect_ratio=False,antialias=False,name=None)",
        "function_name": "resize",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "method",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "preserveaspectratio",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "antialias",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "resizewithpad": {
        "code": "tf.image.resize_with_pad(image,target_height,target_width,method=ResizeMethod.BILINEAR,antialias=False)",
        "function_name": "resize_with_pad",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetheight",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "method",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "antialias",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomsaturation": {
        "code": "tf.image.random_saturation(image,lower,upper,seed=None)",
        "function_name": "random_saturation",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lower",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "upper",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomflipleftright": {
        "code": "tf.image.random_flip_left_right(image,seed=None)",
        "function_name": "random_flip_left_right",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomflipupdown": {
        "code": "tf.image.random_flip_up_down(image,seed=None)",
        "function_name": "random_flip_up_down",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomhue": {
        "code": "tf.image.random_hue(image,max_delta,seed=None)",
        "function_name": "random_hue",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxdelta",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomjpegquality": {
        "code": "tf.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)",
        "function_name": "random_jpeg_quality",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minjpegquality",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxjpegquality",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomcrop": {
        "code": "tf.image.random_crop(value,size,seed=None,name=None)",
        "function_name": "random_crop",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "randomcontrast": {
        "code": "tf.image.random_contrast(image,lower,upper,seed=None)",
        "function_name": "random_contrast",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "lower",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "upper",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nonmaxsuppressionwithscores": {
        "code": "tf.image.non_max_suppression_with_scores(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),soft_nms_sigma=0.0,name=None)",
        "function_name": "non_max_suppression_with_scores",
        "args": [
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxoutputsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "iouthreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scorethreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "softnmssigma",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "perimagestandardization": {
        "code": "tf.image.per_image_standardization(image)",
        "function_name": "per_image_standardization",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "padtoboundingbox": {
        "code": "tf.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)",
        "function_name": "pad_to_bounding_box",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "offsetheight",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "offsetwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetheight",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "psnr": {
        "code": "tf.image.psnr(a,b,max_val,name=None)",
        "function_name": "psnr",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxval",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nonmaxsuppressionpadded": {
        "code": "tf.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None)",
        "function_name": "non_max_suppression_padded",
        "args": [
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxoutputsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "iouthreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scorethreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padtomaxoutputsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nonmaxsuppressionoverlaps": {
        "code": "tf.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)",
        "function_name": "non_max_suppression_overlaps",
        "args": [
            {
                "name": "overlaps",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxoutputsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "overlapthreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scorethreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nonmaxsuppression": {
        "code": "tf.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)",
        "function_name": "non_max_suppression",
        "args": [
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "boxes"
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "scores"
            },
            {
                "name": "maxoutputsize",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "maxoutputsize"
            },
            {
                "name": "iouthreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "iouthreshold"
            },
            {
                "name": "scorethreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "scorethreshold"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "imagegradients": {
        "code": "tf.image.image_gradients(image)",
        "function_name": "image_gradients",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hsvtorgb": {
        "code": "tf.image.hsv_to_rgb(images,name=None)",
        "function_name": "hsv_to_rgb",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "grayscaletorgb": {
        "code": "tf.image.grayscale_to_rgb(images,name=None)",
        "function_name": "grayscale_to_rgb",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "flipupdown": {
        "code": "tf.image.flip_up_down(image)",
        "function_name": "flip_up_down",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "generateboundingboxproposals": {
        "code": "tf.image.generate_bounding_box_proposals(scores,bbox_deltas,image_info,anchors,nms_threshold=0.7,pre_nms_topn=6000,min_size=16,post_nms_topn=300,name=None)",
        "function_name": "generate_bounding_box_proposals",
        "args": [
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bboxdeltas",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "imageinfo",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "anchors",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "nmsthreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "prenmstopn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "postnmstopn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "flipleftright": {
        "code": "tf.image.flip_left_right(image)",
        "function_name": "flip_left_right",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "extractglimpse": {
        "code": "tf.image.extract_glimpse(input,size,offsets,centered=True,normalized=True,noise='uniform',name=None)",
        "function_name": "extract_glimpse",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "size",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "offsets",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "centered",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "normalized",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "noise",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "encodepng": {
        "code": "tf.image.encode_png(image,compression=-1,name=None)",
        "function_name": "encode_png",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "compression",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "extractpatches": {
        "code": "tf.image.extract_patches(images,sizes,strides,rates,padding,name=None)",
        "function_name": "extract_patches",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sizes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rates",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "drawboundingboxes": {
        "code": "tf.image.draw_bounding_boxes(images,boxes,colors,name=None)",
        "function_name": "draw_bounding_boxes",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "colors",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "croptoboundingbox": {
        "code": "tf.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)",
        "function_name": "crop_to_bounding_box",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "offsetheight",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "offsetwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetheight",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetwidth",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "combinednonmaxsuppression": {
        "code": "tf.image.combined_non_max_suppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_per_class=False,clip_boxes=True,name=None)",
        "function_name": "combined_non_max_suppression",
        "args": [
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scores",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxoutputsizeperclass",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxtotalsize",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "iouthreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "scorethreshold",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padperclass",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "clipboxes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "centralcrop": {
        "code": "tf.image.central_crop(image,central_fraction)",
        "function_name": "central_crop",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "centralfraction",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "adjustsaturation": {
        "code": "tf.image.adjust_saturation(image,saturation_factor,name=None)",
        "function_name": "adjust_saturation",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "saturationfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": "saturationfactor",
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cropandresize": {
        "code": "tf.image.crop_and_resize(image,boxes,box_indices,crop_size,method='bilinear',extrapolation_value=0,name=None)",
        "function_name": "crop_and_resize",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "image"
            },
            {
                "name": "boxes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "boxes"
            },
            {
                "name": "boxindices",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cropsize",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": "cropsize"
            },
            {
                "name": "method",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "extrapolationvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "extrapolationvalue"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "convertimagedtype": {
        "code": "tf.image.convert_image_dtype(image,dtype,saturate=False,name=None)",
        "function_name": "convert_image_dtype",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "saturate",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "adjustjpegquality": {
        "code": "tf.image.adjust_jpeg_quality(image,jpeg_quality,name=None)",
        "function_name": "adjust_jpeg_quality",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "jpegquality",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "adjusthue": {
        "code": "tf.image.adjust_hue(image,delta,name=None)",
        "function_name": "adjust_hue",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "delta",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "adjustgamma": {
        "code": "tf.image.adjust_gamma(image,gamma=1,gain=1)",
        "function_name": "adjust_gamma",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "gamma",
                "is_kwarg": true,
                "optional": true,
                "torch": "gamma",
                "tfjs": null
            },
            {
                "name": "gain",
                "is_kwarg": true,
                "optional": true,
                "torch": "gain",
                "tfjs": null
            }
        ]
    },
    "adjustcontrast": {
        "code": "tf.image.adjust_contrast(images,contrast_factor)",
        "function_name": "adjust_contrast",
        "args": [
            {
                "name": "images",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "contrastfactor",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": "contrastfactor",
                "tfjs": null
            }
        ]
    },
    "adjustbrightness": {
        "code": "tf.image.adjust_brightness(image,delta)",
        "function_name": "adjust_brightness",
        "args": [
            {
                "name": "image",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "delta",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "weightedcategoricalcolumn": {
        "code": "tf.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)",
        "function_name": "weighted_categorical_column",
        "args": [
            {
                "name": "categoricalcolumn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "weightfeaturekey",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "importgraphdef": {
        "code": "tf.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)",
        "function_name": "import_graph_def",
        "args": [
            {
                "name": "graphdef",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputmap",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "returnelements",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "opdict",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "produceroplist",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sharedembeddings": {
        "code": "tf.feature_column.shared_embeddings(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)",
        "function_name": "shared_embeddings",
        "args": [
            {
                "name": "categoricalcolumns",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dimension",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "combiner",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initializer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sharedembeddingcollectionname",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ckpttoloadfrom",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tensornameinckpt",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxnorm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "trainable",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sequencenumericcolumn": {
        "code": "tf.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)",
        "function_name": "sequence_numeric_column",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "normalizerfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "indicatorcolumn": {
        "code": "tf.feature_column.indicator_column(categorical_column)",
        "function_name": "indicator_column",
        "args": [
            {
                "name": "categoricalcolumn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sequencecategoricalcolumnwithidentity": {
        "code": "tf.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)",
        "function_name": "sequence_categorical_column_with_identity",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbuckets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sequencecategoricalcolumnwithvocabularylist": {
        "code": "tf.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)",
        "function_name": "sequence_categorical_column_with_vocabulary_list",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularylist",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numoovbuckets",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makeparseexamplespec": {
        "code": "tf.feature_column.make_parse_example_spec(feature_columns)",
        "function_name": "make_parse_example_spec",
        "args": [
            {
                "name": "featurecolumns",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sequencecategoricalcolumnwithvocabularyfile": {
        "code": "tf.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)",
        "function_name": "sequence_categorical_column_with_vocabulary_file",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularyfile",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularysize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numoovbuckets",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sequencecategoricalcolumnwithhashbucket": {
        "code": "tf.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)",
        "function_name": "sequence_categorical_column_with_hash_bucket",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashbucketsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "embeddingcolumn": {
        "code": "tf.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)",
        "function_name": "embedding_column",
        "args": [
            {
                "name": "categoricalcolumn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dimension",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "combiner",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initializer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ckpttoloadfrom",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tensornameinckpt",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxnorm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "trainable",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "numericcolumn": {
        "code": "tf.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)",
        "function_name": "numeric_column",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "normalizerfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "crossedcolumn": {
        "code": "tf.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)",
        "function_name": "crossed_column",
        "args": [
            {
                "name": "keys",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashbucketsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashkey",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categoricalcolumnwithvocabularylist": {
        "code": "tf.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)",
        "function_name": "categorical_column_with_vocabulary_list",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularylist",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numoovbuckets",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bucketizedcolumn": {
        "code": "tf.feature_column.bucketized_column(source_column,boundaries)",
        "function_name": "bucketized_column",
        "args": [
            {
                "name": "sourcecolumn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "boundaries",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categoricalcolumnwithvocabularyfile": {
        "code": "tf.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,dtype=tf.dtypes.string,default_value=None,num_oov_buckets=0)",
        "function_name": "categorical_column_with_vocabulary_file",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularyfile",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "vocabularysize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numoovbuckets",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categoricalcolumnwithhashbucket": {
        "code": "tf.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)",
        "function_name": "categorical_column_with_hash_bucket",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hashbucketsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "categoricalcolumnwithidentity": {
        "code": "tf.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)",
        "function_name": "categorical_column_with_identity",
        "args": [
            {
                "name": "key",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numbuckets",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultvalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "buildrawservinginputreceiverfn": {
        "code": "tf.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)",
        "function_name": "build_raw_serving_input_receiver_fn",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultbatchsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assignaturedef": {
        "code": "as_signature_def(receiver_tensors)",
        "function_name": "as_signature_def",
        "args": [
            {
                "name": "receivertensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "buildparsingservinginputreceiverfn": {
        "code": "tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)",
        "function_name": "build_parsing_serving_input_receiver_fn",
        "args": [
            {
                "name": "featurespec",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultbatchsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stopifnoincreasehook": {
        "code": "tf.estimator.experimental.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
        "function_name": "stop_if_no_increase_hook",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "metricname",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxstepswithoutincrease",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "evaldir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minsteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stopiflowerhook": {
        "code": "tf.estimator.experimental.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
        "function_name": "stop_if_lower_hook",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "metricname",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "threshold",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "evaldir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minsteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stopifnodecreasehook": {
        "code": "tf.estimator.experimental.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
        "function_name": "stop_if_no_decrease_hook",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "metricname",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxstepswithoutdecrease",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "evaldir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minsteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makestopatcheckpointstephook": {
        "code": "tf.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)",
        "function_name": "make_stop_at_checkpoint_step_hook",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "laststep",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "waitafterfilechecksecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stopifhigherhook": {
        "code": "tf.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
        "function_name": "stop_if_higher_hook",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "metricname",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "threshold",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "evaldir",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "minsteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "deftraininputfn": {
        "code": "deftrain_input_fn():...returntrain_datasetdefeval_input_fn():...returneval_datasetestimator=tf.estimator.DNNClassifier(...)evaluator=tf.estimator.experimental.InMemoryEvaluatorHook(estimator,eval_input_fn)estimator.train(train_input_fn,hooks=[evaluator])",
        "function_name": "deftrain_input_fn",
        "args": [
            {
                "name": "evalinputfnestimatortraintraininputfn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "returntraindatasetdefevalinputfnreturnevaldatasetestimator",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "hooks",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makeearlystoppinghook": {
        "code": "tf.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)",
        "function_name": "make_early_stopping_hook",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shouldstopfn",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysecs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "runeverysteps",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "calllogitfn": {
        "code": "tf.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)",
        "function_name": "call_logit_fn",
        "args": [
            {
                "name": "logitfn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mode",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "params",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "config",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "buildrawsupervisedinputreceiverfn": {
        "code": "tf.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)",
        "function_name": "build_raw_supervised_input_receiver_fn",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labels",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "defaultbatchsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "trainandevaluate": {
        "code": "tf.estimator.train_and_evaluate(estimator,train_spec,eval_spec)",
        "function_name": "train_and_evaluate",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "trainspec",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "evalspec",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "aftercreatesession": {
        "code": "after_create_session(session,coord)",
        "function_name": "after_create_session",
        "args": [
            {
                "name": "session",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "coord",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "regressorparseexamplespec": {
        "code": "tf.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)",
        "function_name": "regressor_parse_example_spec",
        "args": [
            {
                "name": "featurecolumns",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labelkey",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labeldtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labeldefault",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labeldimension",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "weightcolumn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "createestimatorspec": {
        "code": "create_estimator_spec(features,mode,logits,labels=None,optimizer=None,trainable_variables=None,train_op_fn=None,update_ops=None,regularization_losses=None)",
        "function_name": "create_estimator_spec",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "mode",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logits",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "optimizer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "trainablevariables",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "trainopfn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "updateops",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "regularizationlosses",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "export": {
        "code": "export(estimator,export_path,checkpoint_path,eval_result,is_the_final_export)",
        "function_name": "export",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "exportpath",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "checkpointpath",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "evalresult",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "isthefinalexport",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "classifierparseexamplespec": {
        "code": "tf.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)",
        "function_name": "classifier_parse_example_spec",
        "args": [
            {
                "name": "featurecolumns",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labelkey",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labeldtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labeldefault",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "weightcolumn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "addmetrics": {
        "code": "tf.estimator.add_metrics(estimator,metric_fn)",
        "function_name": "add_metrics",
        "args": [
            {
                "name": "estimator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "metricfn",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "asdtype": {
        "code": "tf.dtypes.as_dtype(type_value)",
        "function_name": "as_dtype",
        "args": [
            {
                "name": "typevalue",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "complex": {
        "code": "tf.dtypes.complex(real,imag,name=None)",
        "function_name": "complex",
        "args": [
            {
                "name": "real",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "real"
            },
            {
                "name": "imag",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "imag"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "experimentaldistributedataset": {
        "code": "experimental_distribute_dataset(dataset)",
        "function_name": "experimental_distribute_dataset",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "saturatecast": {
        "code": "tf.dtypes.saturate_cast(value,dtype,name=None)",
        "function_name": "saturate_cast",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clusterspec": {
        "code": "cluster_spec()",
        "function_name": "cluster_spec",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "incrossreplicacontext": {
        "code": "tf.distribute.in_cross_replica_context()",
        "function_name": "in_cross_replica_context",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "hasstrategy": {
        "code": "tf.distribute.has_strategy()",
        "function_name": "has_strategy",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "experimentalsetstrategy": {
        "code": "tf.distribute.experimental_set_strategy(strategy)",
        "function_name": "experimental_set_strategy",
        "args": [
            {
                "name": "strategy",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getreplicacontext": {
        "code": "tf.distribute.get_replica_context()",
        "function_name": "get_replica_context",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getstrategy": {
        "code": "tf.distribute.get_strategy()",
        "function_name": "get_strategy",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "enabledumpdebuginfo": {
        "code": "tf.debugging.experimental.enable_dump_debug_info(dump_root,tensor_debug_mode=DEFAULT_TENSOR_DEBUG_MODE,circular_buffer_size=1000,op_regex=None,tensor_dtypes=None)",
        "function_name": "enable_dump_debug_info",
        "args": [
            {
                "name": "dumproot",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tensordebugmode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "circularbuffersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "opregex",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tensordtypes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "enablechecknumerics": {
        "code": "tf.debugging.enable_check_numerics(stack_height_limit=30,path_length_limit=50)",
        "function_name": "enable_check_numerics",
        "args": [
            {
                "name": "stackheightlimit",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "pathlengthlimit",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getlogdeviceplacement": {
        "code": "tf.debugging.get_log_device_placement()",
        "function_name": "get_log_device_placement",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "disablechecknumerics": {
        "code": "tf.debugging.disable_check_numerics()",
        "function_name": "disable_check_numerics",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "disabledumpdebuginfo": {
        "code": "tf.debugging.experimental.disable_dump_debug_info()",
        "function_name": "disable_dump_debug_info",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setlogdeviceplacement": {
        "code": "tf.debugging.set_log_device_placement(enabled)",
        "function_name": "set_log_device_placement",
        "args": [
            {
                "name": "enabled",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "checknumerics": {
        "code": "tf.debugging.check_numerics(tensor,message,name=None)",
        "function_name": "check_numerics",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "isnumerictensor": {
        "code": "tf.debugging.is_numeric_tensor(tensor)",
        "function_name": "is_numeric_tensor",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertshapes": {
        "code": "tf.debugging.assert_shapes(shapes,data=None,summarize=None,message=None,name=None)",
        "function_name": "assert_shapes",
        "args": [
            {
                "name": "shapes",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertsamefloatdtype": {
        "code": "tf.debugging.assert_same_float_dtype(tensors=None,dtype=None)",
        "function_name": "assert_same_float_dtype",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "asserttype": {
        "code": "tf.debugging.assert_type(tensor,tf_type,message=None,name=None)",
        "function_name": "assert_type",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tftype",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertscalar": {
        "code": "tf.debugging.assert_scalar(tensor,message=None,name=None)",
        "function_name": "assert_scalar",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertrankin": {
        "code": "tf.debugging.assert_rank_in(x,ranks,message=None,name=None)",
        "function_name": "assert_rank_in",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ranks",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertrankatleast": {
        "code": "tf.debugging.assert_rank_at_least(x,rank,message=None,name=None)",
        "function_name": "assert_rank_at_least",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rank",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertrank": {
        "code": "tf.debugging.assert_rank(x,rank,message=None,name=None)",
        "function_name": "assert_rank",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rank",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertnonpositive": {
        "code": "tf.debugging.assert_non_positive(x,message=None,summarize=None,name=None)",
        "function_name": "assert_non_positive",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertproperiterable": {
        "code": "tf.debugging.assert_proper_iterable(values)",
        "function_name": "assert_proper_iterable",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertnoneequal": {
        "code": "tf.debugging.assert_none_equal(x,y,summarize=None,message=None,name=None)",
        "function_name": "assert_none_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertnonnegative": {
        "code": "tf.debugging.assert_non_negative(x,message=None,summarize=None,name=None)",
        "function_name": "assert_non_negative",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertpositive": {
        "code": "tf.debugging.assert_positive(x,message=None,summarize=None,name=None)",
        "function_name": "assert_positive",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertnear": {
        "code": "tf.debugging.assert_near(x,y,rtol=None,atol=None,message=None,summarize=None,name=None)",
        "function_name": "assert_near",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rtol",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "atol",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertnegative": {
        "code": "tf.debugging.assert_negative(x,message=None,summarize=None,name=None)",
        "function_name": "assert_negative",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertless": {
        "code": "tf.debugging.assert_less(x,y,message=None,summarize=None,name=None)",
        "function_name": "assert_less",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertlessequal": {
        "code": "tf.debugging.assert_less_equal(x,y,message=None,summarize=None,name=None)",
        "function_name": "assert_less_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertgreaterequal": {
        "code": "tf.debugging.assert_greater_equal(x,y,message=None,summarize=None,name=None)",
        "function_name": "assert_greater_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertinteger": {
        "code": "tf.debugging.assert_integer(x,message=None,name=None)",
        "function_name": "assert_integer",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertgreater": {
        "code": "tf.debugging.assert_greater(x,y,message=None,summarize=None,name=None)",
        "function_name": "assert_greater",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertequal": {
        "code": "tf.debugging.assert_equal(x,y,message=None,summarize=None,name=None)",
        "function_name": "assert_equal",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assert": {
        "code": "tf.debugging.Assert(condition,data,summarize=None,name=None)",
        "function_name": "Assert",
        "args": [
            {
                "name": "condition",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "summarize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "assertallfinite": {
        "code": "tf.debugging.assert_all_finite(x,message,name=None)",
        "function_name": "assert_all_finite",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "message",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unique": {
        "code": "tf.unique(x,out_idx=tf.dtypes.int32,name=None)",
        "function_name": "unique",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outidx",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unbatch": {
        "code": "tf.data.experimental.unbatch()",
        "function_name": "unbatch",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tovariant": {
        "code": "tf.data.experimental.to_variant(dataset)",
        "function_name": "to_variant",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "takewhile": {
        "code": "tf.data.experimental.take_while(predicate)",
        "function_name": "take_while",
        "args": [
            {
                "name": "predicate",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "scan": {
        "code": "tf.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)",
        "function_name": "scan",
        "args": [
            {
                "name": "fn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "elems",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initializer",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paralleliterations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "backprop",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "swapmemory",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "infershape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "reverse",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "shuffleandrepeat": {
        "code": "tf.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)",
        "function_name": "shuffle_and_repeat",
        "args": [
            {
                "name": "buffersize",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "count",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "samplefromdatasets": {
        "code": "tf.data.experimental.sample_from_datasets(datasets,weights=None,seed=None)",
        "function_name": "sample_from_datasets",
        "args": [
            {
                "name": "datasets",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "weights",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rejectionresample": {
        "code": "tf.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)",
        "function_name": "rejection_resample",
        "args": [
            {
                "name": "classfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "targetdist",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "initialdist",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parseexampledataset": {
        "code": "tf.data.experimental.parse_example_dataset(features,num_parallel_calls=1)",
        "function_name": "parse_example_dataset",
        "args": [
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numparallelcalls",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "prefetchtodevice": {
        "code": "tf.data.experimental.prefetch_to_device(device,buffer_size=None)",
        "function_name": "prefetch_to_device",
        "args": [
            {
                "name": "device",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "buffersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parallelinterleave": {
        "code": "tf.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)",
        "function_name": "parallel_interleave",
        "args": [
            {
                "name": "mapfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "cyclelength",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blocklength",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sloppy",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bufferoutputelements",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "prefetchinputelements",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "mapandbatch": {
        "code": "tf.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)",
        "function_name": "map_and_batch",
        "args": [
            {
                "name": "mapfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "batchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numparallelbatches",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dropremainder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numparallelcalls",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makesaveablefromiterator": {
        "code": "tf.data.experimental.make_saveable_from_iterator(iterator)",
        "function_name": "make_saveable_from_iterator",
        "args": [
            {
                "name": "iterator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makecsvdataset": {
        "code": "tf.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,num_parallel_reads=None,sloppy=False,num_rows_for_inference=100,compression_type=None,ignore_errors=False)",
        "function_name": "make_csv_dataset",
        "args": [
            {
                "name": "filepattern",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "batchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "columnnames",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "columndefaults",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labelname",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "selectcolumns",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "fielddelim",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "usequotedelim",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "navalue",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "header",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numepochs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shuffle",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shufflebuffersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shuffleseed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "prefetchbuffersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numparallelreads",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sloppy",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numrowsforinference",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "compressiontype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ignoreerrors",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "latencystats": {
        "code": "tf.data.experimental.latency_stats(tag)",
        "function_name": "latency_stats",
        "args": [
            {
                "name": "tag",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makebatchedfeaturesdataset": {
        "code": "tf.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=None,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,reader_num_threads=None,parser_num_threads=None,sloppy_ordering=False,drop_final_batch=False)",
        "function_name": "make_batched_features_dataset",
        "args": [
            {
                "name": "filepattern",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "batchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "features",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "reader",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "labelkey",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "readerargs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numepochs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shuffle",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shufflebuffersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shuffleseed",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "prefetchbuffersize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "readernumthreads",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "parsernumthreads",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sloppyordering",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dropfinalbatch",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ignoreerrors": {
        "code": "tf.data.experimental.ignore_errors()",
        "function_name": "ignore_errors",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "groupbywindow": {
        "code": "tf.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)",
        "function_name": "group_by_window",
        "args": [
            {
                "name": "keyfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "reducefunc",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "windowsize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "windowsizefunc",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getsingleelement": {
        "code": "tf.data.experimental.get_single_element(dataset)",
        "function_name": "get_single_element",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getstructure": {
        "code": "tf.data.experimental.get_structure(dataset_or_iterator)",
        "function_name": "get_structure",
        "args": [
            {
                "name": "datasetoriterator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getnextasoptional": {
        "code": "tf.data.experimental.get_next_as_optional(iterator)",
        "function_name": "get_next_as_optional",
        "args": [
            {
                "name": "iterator",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fromvariant": {
        "code": "tf.data.experimental.from_variant(variant,structure)",
        "function_name": "from_variant",
        "args": [
            {
                "name": "variant",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "structure",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "groupbyreducer": {
        "code": "tf.data.experimental.group_by_reducer(key_func,reducer)",
        "function_name": "group_by_reducer",
        "args": [
            {
                "name": "keyfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "reducer",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "enumeratedataset": {
        "code": "tf.data.experimental.enumerate_dataset(start=0)",
        "function_name": "enumerate_dataset",
        "args": [
            {
                "name": "start",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "densetosparsebatch": {
        "code": "tf.data.experimental.dense_to_sparse_batch(batch_size,row_shape)",
        "function_name": "dense_to_sparse_batch",
        "args": [
            {
                "name": "batchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "densetoraggedbatch": {
        "code": "tf.data.experimental.dense_to_ragged_batch(batch_size,drop_remainder=False,row_splits_dtype=tf.dtypes.int64)",
        "function_name": "dense_to_ragged_batch",
        "args": [
            {
                "name": "batchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dropremainder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "rowsplitsdtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "counter": {
        "code": "tf.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)",
        "function_name": "Counter",
        "args": [
            {
                "name": "start",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "step",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "copytodevice": {
        "code": "tf.data.experimental.copy_to_device(target_device,source_device='/cpu:0')",
        "function_name": "copy_to_device",
        "args": [
            {
                "name": "targetdevice",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "sourcedevice",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "choosefromdatasets": {
        "code": "tf.data.experimental.choose_from_datasets(datasets,choice_dataset)",
        "function_name": "choose_from_datasets",
        "args": [
            {
                "name": "datasets",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "choicedataset",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cardinality": {
        "code": "tf.data.experimental.cardinality(dataset)",
        "function_name": "cardinality",
        "args": [
            {
                "name": "dataset",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bytesproducedstats": {
        "code": "tf.data.experimental.bytes_produced_stats(tag)",
        "function_name": "bytes_produced_stats",
        "args": [
            {
                "name": "tag",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bucketbysequencelength": {
        "code": "tf.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False,drop_remainder=False)",
        "function_name": "bucket_by_sequence_length",
        "args": [
            {
                "name": "elementlengthfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bucketboundaries",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "bucketbatchsizes",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddedshapes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddingvalues",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padtobucketboundary",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "nopadding",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dropremainder",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setintraopparallelismthreads": {
        "code": "tf.config.threading.set_intra_op_parallelism_threads(num_threads)",
        "function_name": "set_intra_op_parallelism_threads",
        "args": [
            {
                "name": "numthreads",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setinteropparallelismthreads": {
        "code": "tf.config.threading.set_inter_op_parallelism_threads(num_threads)",
        "function_name": "set_inter_op_parallelism_threads",
        "args": [
            {
                "name": "numthreads",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getintraopparallelismthreads": {
        "code": "tf.config.threading.get_intra_op_parallelism_threads()",
        "function_name": "get_intra_op_parallelism_threads",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getinteropparallelismthreads": {
        "code": "tf.config.threading.get_inter_op_parallelism_threads()",
        "function_name": "get_inter_op_parallelism_threads",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getexperimentaloptions": {
        "code": "tf.config.optimizer.get_experimental_options()",
        "function_name": "get_experimental_options",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setjit": {
        "code": "tf.config.optimizer.set_jit(enabled)",
        "function_name": "set_jit",
        "args": [
            {
                "name": "enabled",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setexperimentaloptions": {
        "code": "tf.config.optimizer.set_experimental_options(options)",
        "function_name": "set_experimental_options",
        "args": [
            {
                "name": "options",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getjit": {
        "code": "tf.config.optimizer.get_jit()",
        "function_name": "get_jit",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setsynchronousexecution": {
        "code": "tf.config.experimental.set_synchronous_execution(enable)",
        "function_name": "set_synchronous_execution",
        "args": [
            {
                "name": "enable",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setmemorygrowth": {
        "code": "tf.config.experimental.set_memory_growth(device,enable)",
        "function_name": "set_memory_growth",
        "args": [
            {
                "name": "device",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "enable",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setdevicepolicy": {
        "code": "tf.config.experimental.set_device_policy(device_policy)",
        "function_name": "set_device_policy",
        "args": [
            {
                "name": "devicepolicy",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getmemorygrowth": {
        "code": "tf.config.experimental.get_memory_growth(device)",
        "function_name": "get_memory_growth",
        "args": [
            {
                "name": "device",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getdevicepolicy": {
        "code": "tf.config.experimental.get_device_policy()",
        "function_name": "get_device_policy",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getsynchronousexecution": {
        "code": "tf.config.experimental.get_synchronous_execution()",
        "function_name": "get_synchronous_execution",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "disablemlirbridge": {
        "code": "tf.config.experimental.disable_mlir_bridge()",
        "function_name": "disable_mlir_bridge",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "enablemlirbridge": {
        "code": "tf.config.experimental.enable_mlir_bridge()",
        "function_name": "enable_mlir_bridge",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setsoftdeviceplacement": {
        "code": "tf.config.set_soft_device_placement(enabled)",
        "function_name": "set_soft_device_placement",
        "args": [
            {
                "name": "enabled",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setvisibledevices": {
        "code": "tf.config.set_visible_devices(devices,device_type=None)",
        "function_name": "set_visible_devices",
        "args": [
            {
                "name": "devices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "devicetype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setlogicaldeviceconfiguration": {
        "code": "tf.config.set_logical_device_configuration(device,logical_devices)",
        "function_name": "set_logical_device_configuration",
        "args": [
            {
                "name": "device",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "logicaldevices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "listphysicaldevices": {
        "code": "tf.config.list_physical_devices(device_type=None)",
        "function_name": "list_physical_devices",
        "args": [
            {
                "name": "devicetype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "listlogicaldevices": {
        "code": "tf.config.list_logical_devices(device_type=None)",
        "function_name": "list_logical_devices",
        "args": [
            {
                "name": "devicetype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getvisibledevices": {
        "code": "tf.config.get_visible_devices(device_type=None)",
        "function_name": "get_visible_devices",
        "args": [
            {
                "name": "devicetype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getsoftdeviceplacement": {
        "code": "tf.config.get_soft_device_placement()",
        "function_name": "get_soft_device_placement",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "experimentalrunfunctionseagerly": {
        "code": "tf.config.experimental_run_functions_eagerly(run_eagerly)",
        "function_name": "experimental_run_functions_eagerly",
        "args": [
            {
                "name": "runeagerly",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "experimentalconnecttohost": {
        "code": "tf.config.experimental_connect_to_host(remote_host=None,job_name='worker')",
        "function_name": "experimental_connect_to_host",
        "args": [
            {
                "name": "remotehost",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "jobname",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "getlogicaldeviceconfiguration": {
        "code": "tf.config.get_logical_device_configuration(device)",
        "function_name": "get_logical_device_configuration",
        "args": [
            {
                "name": "device",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "experimentalfunctionsruneagerly": {
        "code": "tf.config.experimental_functions_run_eagerly()",
        "function_name": "experimental_functions_run_eagerly",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "experimentalconnecttocluster": {
        "code": "tf.config.experimental_connect_to_cluster(cluster_spec_or_resolver,job_name='localhost',task_index=0,protocol=None,make_master_device_default=True)",
        "function_name": "experimental_connect_to_cluster",
        "args": [
            {
                "name": "clusterspecorresolver",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "jobname",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "taskindex",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "protocol",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "makemasterdevicedefault",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "graph": {
        "code": "withtf.Graph().as_default():...addoperationstothegraph...#CreateaSessionManagerthatwillcheckpointthemodelin'/tmp/mydir'.sm=SessionManager()sess=sm.prepare_session(master,init_op,saver,checkpoint_dir)#Usethesessiontotrainthegraph.whileTrue:sess.run(&lt;my_train_op&gt;)",
        "function_name": "Graph",
        "args": [
            {
                "name": "initop",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "saver",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "checkpointdirusethesessiontotrainthegraphwhiletruesessrunltmytrainopgt",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "asdefaultaddoperationstothegraphcreateasessionmanagerthatwillcheckpointthemodelintmpmydirsm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "createsession": {
        "code": "create_session()",
        "function_name": "create_session",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "defmyop": {
        "code": "defmy_op(a,b,c,name=None):withtf.name_scope(\"MyOp\")asscope:a=tf.convert_to_tensor(a,name=\"a\")b=tf.convert_to_tensor(b,name=\"b\")c=tf.convert_to_tensor(c,name=\"c\")#Definesomecomputationthatuses`a`,`b`,and`c`.returnfoo_op(...,name=scope)",
        "function_name": "defmy_op",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "c",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "andcreturnfooop",
                "is_kwarg": false,
                "optional": false,
                "index": 4,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "flagtype": {
        "code": "flag_type()",
        "function_name": "flag_type",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rightshift": {
        "code": "tf.bitwise.right_shift(x,y,name=None)",
        "function_name": "right_shift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bitwisexor": {
        "code": "tf.bitwise.bitwise_xor(x,y,name=None)",
        "function_name": "bitwise_xor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "invert": {
        "code": "tf.bitwise.invert(x,name=None)",
        "function_name": "invert",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bitwiseand": {
        "code": "tf.bitwise.bitwise_and(x,y,name=None)",
        "function_name": "bitwise_and",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "leftshift": {
        "code": "tf.bitwise.left_shift(x,y,name=None)",
        "function_name": "left_shift",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bitwiseor": {
        "code": "tf.bitwise.bitwise_or(x,y,name=None)",
        "function_name": "bitwise_or",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "donotconvert": {
        "code": "tf.autograph.experimental.do_not_convert(func=None)",
        "function_name": "do_not_convert",
        "args": [
            {
                "name": "func",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "setverbosity": {
        "code": "tf.autograph.set_verbosity(level,alsologtostdout=False)",
        "function_name": "set_verbosity",
        "args": [
            {
                "name": "level",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "alsologtostdout",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tograph": {
        "code": "tf.autograph.to_graph(entity,recursive=True,experimental_optional_features=None)",
        "function_name": "to_graph",
        "args": [
            {
                "name": "entity",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "recursive",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "experimentaloptionalfeatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tocode": {
        "code": "tf.autograph.to_code(entity,recursive=True,experimental_optional_features=None)",
        "function_name": "to_code",
        "args": [
            {
                "name": "entity",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "recursive",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "experimentaloptionalfeatures",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "encodewav": {
        "code": "tf.audio.encode_wav(audio,sample_rate,name=None)",
        "function_name": "encode_wav",
        "args": [
            {
                "name": "audio",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "samplerate",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "decodewav": {
        "code": "tf.audio.decode_wav(contents,desired_channels=-1,desired_samples=-1,name=None)",
        "function_name": "decode_wav",
        "args": [
            {
                "name": "contents",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "desiredchannels",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "desiredsamples",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "vectorizedmap": {
        "code": "tf.vectorized_map(fn,elems)",
        "function_name": "vectorized_map",
        "args": [
            {
                "name": "fn",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "elems",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "where": {
        "code": "tf.where(condition,x=None,y=None,name=None)",
        "function_name": "where",
        "args": [
            {
                "name": "condition",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "condition",
                "tfjs": "condition"
            },
            {
                "name": "x",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "whileloop": {
        "code": "tf.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,maximum_iterations=None,name=None)",
        "function_name": "while_loop",
        "args": [
            {
                "name": "cond",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "body",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "loopvars",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shapeinvariants",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paralleliterations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "backprop",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "swapmemory",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maximumiterations",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "uniquewithcounts": {
        "code": "tf.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)",
        "function_name": "unique_with_counts",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outidx",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unstack": {
        "code": "tf.unstack(value,num=None,axis=0,name='unstack')",
        "function_name": "unstack",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "num",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "unravelindex": {
        "code": "tf.unravel_index(indices,dims,name=None)",
        "function_name": "unravel_index",
        "args": [
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dims",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "truncatemod": {
        "code": "tf.truncatemod(x,y,name=None)",
        "function_name": "truncatemod",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tuple": {
        "code": "tf.tuple(tensors,control_inputs=None,name=None)",
        "function_name": "tuple",
        "args": [
            {
                "name": "tensors",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "controlinputs",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "truncatediv": {
        "code": "tf.truncatediv(x,y,name=None)",
        "function_name": "truncatediv",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "timestamp": {
        "code": "tf.timestamp(name=None)",
        "function_name": "timestamp",
        "args": [
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tensorscatterndadd": {
        "code": "tf.tensor_scatter_nd_add(tensor,indices,updates,name=None)",
        "function_name": "tensor_scatter_nd_add",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "updates",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tensorscatterndsub": {
        "code": "tf.tensor_scatter_nd_sub(tensor,indices,updates,name=None)",
        "function_name": "tensor_scatter_nd_sub",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "updates",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tensorscatterndupdate": {
        "code": "tf.tensor_scatter_nd_update(tensor,indices,updates,name=None)",
        "function_name": "tensor_scatter_nd_update",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "updates",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "tensordot": {
        "code": "tf.tensordot(a,b,axes,name=None)",
        "function_name": "tensordot",
        "args": [
            {
                "name": "a",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "b",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "switchcase": {
        "code": "tf.switch_case(branch_index,branch_fns,default=None,name='switch_case')",
        "function_name": "switch_case",
        "args": [
            {
                "name": "branchindex",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "branchfns",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "default",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "stridedslice": {
        "code": "tf.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)",
        "function_name": "strided_slice",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "begin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "begin"
            },
            {
                "name": "end",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "end"
            },
            {
                "name": "strides",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "strides"
            },
            {
                "name": "beginmask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "beginmask"
            },
            {
                "name": "endmask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "endmask"
            },
            {
                "name": "ellipsismask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "ellipsismask"
            },
            {
                "name": "newaxismask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "newaxismask"
            },
            {
                "name": "shrinkaxismask",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "shrinkaxismask"
            },
            {
                "name": "var",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "spacetobatch": {
        "code": "tf.space_to_batch(input,block_shape,paddings,name=None)",
        "function_name": "space_to_batch",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blockshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddings",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "spacetobatchnd": {
        "code": "tf.space_to_batch_nd(input,block_shape,paddings,name=None)",
        "function_name": "space_to_batch_nd",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blockshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "blockshape"
            },
            {
                "name": "paddings",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "paddings"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sort": {
        "code": "tf.sort(values,axis=-1,direction='ASCENDING',name=None)",
        "function_name": "sort",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "direction",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "shapen": {
        "code": "tf.shape_n(input,out_type=tf.dtypes.int32,name=None)",
        "function_name": "shape_n",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "searchsorted": {
        "code": "tf.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)",
        "function_name": "searchsorted",
        "args": [
            {
                "name": "sortedsequence",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "side",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "outtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "sequencemask": {
        "code": "tf.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)",
        "function_name": "sequence_mask",
        "args": [
            {
                "name": "lengths",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxlen",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "scatternd": {
        "code": "tf.scatter_nd(indices,updates,shape,name=None)",
        "function_name": "scatter_nd",
        "args": [
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": "indices"
            },
            {
                "name": "updates",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "updates"
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "shape"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "roll": {
        "code": "tf.roll(input,shift,axis,name=None)",
        "function_name": "roll",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shift",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "requiredspacetobatchpaddings": {
        "code": "tf.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)",
        "function_name": "required_space_to_batch_paddings",
        "args": [
            {
                "name": "inputshape",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blockshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "basepaddings",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reversesequence": {
        "code": "tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None)",
        "function_name": "reverse_sequence",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seqlengths",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "seqaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "batchaxis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "reduceall": {
        "code": "tf.reduce_all(input_tensor,axis=None,keepdims=False,name=None)",
        "function_name": "reduce_all",
        "args": [
            {
                "name": "inputtensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "registertensorconversionfunction": {
        "code": "tf.register_tensor_conversion_function(base_type,conversion_func,priority=100)",
        "function_name": "register_tensor_conversion_function",
        "args": [
            {
                "name": "basetype",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "conversionfunc",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "priority",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "recomputegrad": {
        "code": "tf.recompute_grad(f)",
        "function_name": "recompute_grad",
        "args": [
            {
                "name": "f",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "realdiv": {
        "code": "tf.realdiv(x,y,name=None)",
        "function_name": "realdiv",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "y",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "rank": {
        "code": "tf.rank(input,name=None)",
        "function_name": "rank",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "print": {
        "code": "tf.print(*inputs,**kwargs)",
        "function_name": "print",
        "args": [
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "pyfunction": {
        "code": "tf.py_function(func,inp,Tout,name=None)",
        "function_name": "py_function",
        "args": [
            {
                "name": "func",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inp",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tout",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "parallelstack": {
        "code": "tf.parallel_stack(values,name='parallel_stack')",
        "function_name": "parallel_stack",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "pad": {
        "code": "tf.pad(tensor,paddings,mode='CONSTANT',constant_values=0,name=None)",
        "function_name": "pad",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "paddings",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "paddings"
            },
            {
                "name": "mode",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "constantvalues",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "numpyfunction": {
        "code": "tf.numpy_function(func,inp,Tout,name=None)",
        "function_name": "numpy_function",
        "args": [
            {
                "name": "func",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inp",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "tout",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "norm": {
        "code": "tf.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None)",
        "function_name": "norm",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ord",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "ord"
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "axis"
            },
            {
                "name": "keepdims",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": "keepdims"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "noop": {
        "code": "tf.no_op(name=None)",
        "function_name": "no_op",
        "args": [
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nogradient": {
        "code": "tf.no_gradient(op_type)",
        "function_name": "no_gradient",
        "args": [
            {
                "name": "optype",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "nondifferentiablebatchfunction": {
        "code": "tf.nondifferentiable_batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10,autograph=True)",
        "function_name": "nondifferentiable_batch_function",
        "args": [
            {
                "name": "numbatchthreads",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxbatchsize",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "batchtimeoutmicros",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "allowedbatchsizes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "maxenqueuedbatches",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "autograph",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "meshgrid": {
        "code": "tf.meshgrid(*args,**kwargs)",
        "function_name": "meshgrid",
        "args": [
            {
                "name": "args",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "maketensorproto": {
        "code": "tf.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)",
        "function_name": "make_tensor_proto",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "verifyshape",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "allowbroadcast",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loadoplibrary": {
        "code": "tf.load_op_library(library_filename)",
        "function_name": "load_op_library",
        "args": [
            {
                "name": "libraryfilename",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "loadlibrary": {
        "code": "tf.load_library(library_location)",
        "function_name": "load_library",
        "args": [
            {
                "name": "librarylocation",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "makendarray": {
        "code": "tf.make_ndarray(tensor)",
        "function_name": "make_ndarray",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "linspace": {
        "code": "tf.linspace(start,stop,num,name=None)",
        "function_name": "linspace",
        "args": [
            {
                "name": "start",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": "start",
                "tfjs": "start"
            },
            {
                "name": "stop",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "stop"
            },
            {
                "name": "num",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "num"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "istensor": {
        "code": "tf.is_tensor(x)",
        "function_name": "is_tensor",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fingerprint": {
        "code": "tf.fingerprint(data,method='farmhash64',name=None)",
        "function_name": "fingerprint",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "method",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "fill": {
        "code": "tf.fill(dims,value,name=None)",
        "function_name": "fill",
        "args": [
            {
                "name": "dims",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "value"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "extractvolumepatches": {
        "code": "tf.extract_volume_patches(input,ksizes,strides,padding,name=None)",
        "function_name": "extract_volume_patches",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "ksizes",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strides",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "padding",
                "is_kwarg": false,
                "optional": false,
                "index": 3,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "ensureshape": {
        "code": "tf.ensure_shape(x,shape,name=None)",
        "function_name": "ensure_shape",
        "args": [
            {
                "name": "x",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "eigvals": {
        "code": "tf.eigvals(tensor,name=None)",
        "function_name": "eigvals",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "executingeagerly": {
        "code": "tf.executing_eagerly()",
        "function_name": "executing_eagerly",
        "args": [
            {
                "name": "",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "einsum": {
        "code": "tf.einsum(equation,*inputs,**kwargs)",
        "function_name": "einsum",
        "args": [
            {
                "name": "equation",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "inputs",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "kwargs",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "eig": {
        "code": "tf.eig(tensor,name=None)",
        "function_name": "eig",
        "args": [
            {
                "name": "tensor",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "editdistance": {
        "code": "tf.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')",
        "function_name": "edit_distance",
        "args": [
            {
                "name": "hypothesis",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "truth",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "normalize",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dynamicstitch": {
        "code": "tf.dynamic_stitch(indices,data,name=None)",
        "function_name": "dynamic_stitch",
        "args": [
            {
                "name": "indices",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "dynamicpartition": {
        "code": "tf.dynamic_partition(data,partitions,num_partitions,name=None)",
        "function_name": "dynamic_partition",
        "args": [
            {
                "name": "data",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "partitions",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "numpartitions",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "customgradient": {
        "code": "tf.custom_gradient(f=None)",
        "function_name": "custom_gradient",
        "args": [
            {
                "name": "f",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "controldependencies": {
        "code": "tf.control_dependencies(control_inputs)",
        "function_name": "control_dependencies",
        "args": [
            {
                "name": "controlinputs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "device": {
        "code": "tf.device(device_name)",
        "function_name": "device",
        "args": [
            {
                "name": "devicename",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "converttotensor": {
        "code": "tf.convert_to_tensor(value,dtype=None,dtype_hint=None,name=None)",
        "function_name": "convert_to_tensor",
        "args": [
            {
                "name": "value",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtype",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "dtypehint",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "cond": {
        "code": "tf.cond(pred,true_fn=None,false_fn=None,name=None)",
        "function_name": "cond",
        "args": [
            {
                "name": "pred",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "truefn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "falsefn",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clipbyvalue": {
        "code": "tf.clip_by_value(t,clip_value_min,clip_value_max,name=None)",
        "function_name": "clip_by_value",
        "args": [
            {
                "name": "t",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "clipvaluemin",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "clipvaluemin"
            },
            {
                "name": "clipvaluemax",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": "clipvaluemax"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clipbynorm": {
        "code": "tf.clip_by_norm(t,clip_norm,axes=None,name=None)",
        "function_name": "clip_by_norm",
        "args": [
            {
                "name": "t",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "clipnorm",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axes",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "clipbyglobalnorm": {
        "code": "tf.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)",
        "function_name": "clip_by_global_norm",
        "args": [
            {
                "name": "tlist",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "clipnorm",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "usenorm",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "case": {
        "code": "tf.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')",
        "function_name": "case",
        "args": [
            {
                "name": "predfnpairs",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "default",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "exclusive",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "strict",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "broadcastto": {
        "code": "tf.broadcast_to(input,shape,name=None)",
        "function_name": "broadcast_to",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": "shape"
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "broadcaststaticshape": {
        "code": "tf.broadcast_static_shape(shape_x,shape_y)",
        "function_name": "broadcast_static_shape",
        "args": [
            {
                "name": "shapex",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shapey",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "broadcastdynamicshape": {
        "code": "tf.broadcast_dynamic_shape(shape_x,shape_y)",
        "function_name": "broadcast_dynamic_shape",
        "args": [
            {
                "name": "shapex",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "shapey",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "bitcast": {
        "code": "tf.bitcast(input,type,name=None)",
        "function_name": "bitcast",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "type",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "argsort": {
        "code": "tf.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)",
        "function_name": "argsort",
        "args": [
            {
                "name": "values",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "axis",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "direction",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "stable",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    },
    "batchtospace": {
        "code": "tf.batch_to_space(input,block_shape,crops,name=None)",
        "function_name": "batch_to_space",
        "args": [
            {
                "name": "input",
                "is_kwarg": false,
                "optional": false,
                "index": 0,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "blockshape",
                "is_kwarg": false,
                "optional": false,
                "index": 1,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "crops",
                "is_kwarg": false,
                "optional": false,
                "index": 2,
                "torch": null,
                "tfjs": null
            },
            {
                "name": "name",
                "is_kwarg": true,
                "optional": true,
                "torch": null,
                "tfjs": null
            }
        ]
    }
}