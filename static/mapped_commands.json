{
    "tf": {
        "histogramfixedwidth": {
            "code": "tf.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)",
            "function_name": "histogram_fixed_width",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "valuerange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "nbins",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "histogram_fixed_width"
            ]
        },
        "hessians": {
            "code": "tf.hessians(ys,xs,gate_gradients=False,aggregation_method=None,name='hessians')",
            "function_name": "hessians",
            "args": [
                {
                    "name": "ys",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "xs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gategradients",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "aggregationmethod",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "hessians"
            ]
        },
        "guaranteeconst": {
            "code": "tf.guarantee_const(input,name=None)",
            "function_name": "guarantee_const",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "guarantee_const"
            ]
        },
        "identityn": {
            "code": "tf.identity_n(input,name=None)",
            "function_name": "identity_n",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "identity_n"
            ]
        },
        "identity": {
            "code": "tf.identity(input,name=None)",
            "function_name": "identity",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "name",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "identity"
            ]
        },
        "histogramfixedwidthbins": {
            "code": "tf.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)",
            "function_name": "histogram_fixed_width_bins",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "valuerange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "nbins",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "histogram_fixed_width_bins"
            ]
        },
        "gradpassthrough": {
            "code": "tf.grad_pass_through(f)",
            "function_name": "grad_pass_through",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "grad_pass_through"
            ]
        },
        "gradients": {
            "code": "tf.keras.backend.gradients(loss,variables)",
            "function_name": "gradients",
            "args": [
                {
                    "name": "loss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "variables",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "gradients"
            ]
        },
        "getstaticvalue": {
            "code": "tf.get_static_value(tensor,partial=False)",
            "function_name": "get_static_value",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "partial",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "get_static_value"
            ]
        },
        "getlogger": {
            "code": "tf.get_logger()",
            "function_name": "get_logger",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "get_logger"
            ]
        },
        "gathernd": {
            "code": "tf.gather_nd(params,indices,batch_dims=0,name=None)",
            "function_name": "gather_nd",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "indices"
                },
                {
                    "name": "batchdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "gather_nd"
            ]
        },
        "gather": {
            "code": "tf.keras.backend.gather(reference,indices)",
            "function_name": "gather",
            "args": [
                {
                    "name": "reference",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "indices"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "gather"
            ]
        },
        "jitscope": {
            "code": "tf.xla.experimental.jit_scope(*args,**kwds)",
            "function_name": "jit_scope",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwds",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "xla",
                "experimental",
                "jit_scope"
            ]
        },
        "group": {
            "code": "tf.group(*inputs,**kwargs)",
            "function_name": "group",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "group"
            ]
        },
        "compile": {
            "code": "tf.xla.experimental.compile(computation,inputs=None)",
            "function_name": "compile",
            "args": [
                {
                    "name": "computation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "xla",
                "experimental",
                "compile"
            ]
        },
        "enablemixedprecisiongraphrewrite": {
            "code": "tf.train.experimental.enable_mixed_precision_graph_rewrite(opt,loss_scale='dynamic')",
            "function_name": "enable_mixed_precision_graph_rewrite",
            "args": [
                {
                    "name": "opt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lossscale",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "experimental",
                "enable_mixed_precision_graph_rewrite"
            ]
        },
        "disablemixedprecisiongraphrewrite": {
            "code": "tf.train.experimental.disable_mixed_precision_graph_rewrite()",
            "function_name": "disable_mixed_precision_graph_rewrite",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "experimental",
                "disable_mixed_precision_graph_rewrite"
            ]
        },
        "loadcheckpoint": {
            "code": "tf.train.load_checkpoint(ckpt_dir_or_file)",
            "function_name": "load_checkpoint",
            "args": [
                {
                    "name": "ckptdirorfile",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "load_checkpoint"
            ]
        },
        "loadvariable": {
            "code": "tf.train.load_variable(ckpt_dir_or_file,name)",
            "function_name": "load_variable",
            "args": [
                {
                    "name": "ckptdirorfile",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "load_variable"
            ]
        },
        "listvariables": {
            "code": "tf.train.list_variables(ckpt_dir_or_file)",
            "function_name": "list_variables",
            "args": [
                {
                    "name": "ckptdirorfile",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "list_variables"
            ]
        },
        "latestcheckpoint": {
            "code": "tf.train.latest_checkpoint(checkpoint_dir,latest_filename=None)",
            "function_name": "latest_checkpoint",
            "args": [
                {
                    "name": "checkpointdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "latestfilename",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "latest_checkpoint"
            ]
        },
        "getcheckpointstate": {
            "code": "tf.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)",
            "function_name": "get_checkpoint_state",
            "args": [
                {
                    "name": "checkpointdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "latestfilename",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "get_checkpoint_state"
            ]
        },
        "checkpointsiterator": {
            "code": "tf.train.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)",
            "function_name": "checkpoints_iterator",
            "args": [
                {
                    "name": "checkpointdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minintervalsecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "timeout",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "timeoutfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "checkpoints_iterator"
            ]
        },
        "initializetpusystem": {
            "code": "tf.tpu.experimental.initialize_tpu_system(cluster_resolver=None)",
            "function_name": "initialize_tpu_system",
            "args": [
                {
                    "name": "clusterresolver",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tpu",
                "experimental",
                "initialize_tpu_system"
            ]
        },
        "shutdowntpusystem": {
            "code": "tf.tpu.experimental.shutdown_tpu_system(cluster_resolver=None)",
            "function_name": "shutdown_tpu_system",
            "args": [
                {
                    "name": "clusterresolver",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tpu",
                "experimental",
                "shutdown_tpu_system"
            ]
        },
        "isbuiltwithrocm": {
            "code": "tf.test.is_built_with_rocm()",
            "function_name": "is_built_with_rocm",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "is_built_with_rocm"
            ]
        },
        "main": {
            "code": "tf.test.main(argv=None)",
            "function_name": "main",
            "args": [
                {
                    "name": "argv",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "main"
            ]
        },
        "isgpuavailable": {
            "code": "tf.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)",
            "function_name": "is_gpu_available",
            "args": [
                {
                    "name": "cudaonly",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mincudacomputecapability",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "is_gpu_available"
            ]
        },
        "isbuiltwithgpusupport": {
            "code": "tf.test.is_built_with_gpu_support()",
            "function_name": "is_built_with_gpu_support",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "is_built_with_gpu_support"
            ]
        },
        "isbuiltwithcuda": {
            "code": "tf.test.is_built_with_cuda()",
            "function_name": "is_built_with_cuda",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "is_built_with_cuda"
            ]
        },
        "computegradient": {
            "code": "tf.test.compute_gradient(f,x,delta=0.001)",
            "function_name": "compute_gradient",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "compute_gradient"
            ]
        },
        "createlocalcluster": {
            "code": "tf.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)",
            "function_name": "create_local_cluster",
            "args": [
                {
                    "name": "numworkers",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "protocol",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "workerconfig",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "psconfig",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "create_local_cluster"
            ]
        },
        "gpudevicename": {
            "code": "tf.test.gpu_device_name()",
            "function_name": "gpu_device_name",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "gpu_device_name"
            ]
        },
        "assertequalgraphdef": {
            "code": "tf.test.assert_equal_graph_def(expected,actual)",
            "function_name": "assert_equal_graph_def",
            "args": [
                {
                    "name": "expected",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "actual",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "assert_equal_graph_def"
            ]
        },
        "getlinkflags": {
            "code": "tf.sysconfig.get_link_flags()",
            "function_name": "get_link_flags",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sysconfig",
                "get_link_flags"
            ]
        },
        "getinclude": {
            "code": "tf.sysconfig.get_include()",
            "function_name": "get_include",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sysconfig",
                "get_include"
            ]
        },
        "getlib": {
            "code": "tf.sysconfig.get_lib()",
            "function_name": "get_lib",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sysconfig",
                "get_lib"
            ]
        },
        "benchmarkconfig": {
            "code": "tf.test.benchmark_config()",
            "function_name": "benchmark_config",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "test",
                "benchmark_config"
            ]
        },
        "writerawpb": {
            "code": "tf.summary.experimental.write_raw_pb(tensor,step=None,name=None)",
            "function_name": "write_raw_pb",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "experimental",
                "write_raw_pb"
            ]
        },
        "getcompileflags": {
            "code": "tf.sysconfig.get_compile_flags()",
            "function_name": "get_compile_flags",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sysconfig",
                "get_compile_flags"
            ]
        },
        "setstep": {
            "code": "tf.summary.experimental.set_step(step)",
            "function_name": "set_step",
            "args": [
                {
                    "name": "step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "experimental",
                "set_step"
            ]
        },
        "getstep": {
            "code": "tf.summary.experimental.get_step()",
            "function_name": "get_step",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "experimental",
                "get_step"
            ]
        },
        "traceexport": {
            "code": "tf.summary.trace_export(name,step=None,profiler_outdir=None)",
            "function_name": "trace_export",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "profileroutdir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "trace_export"
            ]
        },
        "write": {
            "code": "tf.summary.write(tag,tensor,step=None,metadata=None,name=None)",
            "function_name": "write",
            "args": [
                {
                    "name": "tag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "metadata",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "write"
            ]
        },
        "traceon": {
            "code": "tf.summary.trace_on(graph=True,profiler=False)",
            "function_name": "trace_on",
            "args": [
                {
                    "name": "graph",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "profiler",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "trace_on"
            ]
        },
        "traceoff": {
            "code": "tf.summary.trace_off()",
            "function_name": "trace_off",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "trace_off"
            ]
        },
        "text": {
            "code": "tf.summary.text(name,data,step=None,description=None)",
            "function_name": "text",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "text"
            ]
        },
        "scalar": {
            "code": "tf.summary.scalar(name,data,step=None,description=None)",
            "function_name": "scalar",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "scalar"
            ]
        },
        "image": {
            "code": "tf.summary.image(name,data,step=None,max_outputs=3,description=None)",
            "function_name": "image",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxoutputs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "image"
            ]
        },
        "histogram": {
            "code": "tf.summary.histogram(name,data,step=None,buckets=None,description=None)",
            "function_name": "histogram",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "buckets",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "histogram"
            ]
        },
        "audio": {
            "code": "tf.summary.audio(name,data,sample_rate,step=None,max_outputs=3,encoding=None,description=None)",
            "function_name": "audio",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "samplerate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxoutputs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "encoding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "audio"
            ]
        },
        "createnoopwriter": {
            "code": "tf.summary.create_noop_writer()",
            "function_name": "create_noop_writer",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "create_noop_writer"
            ]
        },
        "createfilewriter": {
            "code": "tf.summary.create_file_writer(logdir,max_queue=None,flush_millis=None,filename_suffix=None,name=None)",
            "function_name": "create_file_writer",
            "args": [
                {
                    "name": "logdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxqueue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "flushmillis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filenamesuffix",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "create_file_writer"
            ]
        },
        "flush": {
            "code": "tf.summary.flush(writer=None,name=None)",
            "function_name": "flush",
            "args": [
                {
                    "name": "writer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "flush"
            ]
        },
        "unsortedsegmentjoin": {
            "code": "tf.strings.unsorted_segment_join(inputs,segment_ids,num_segments,separator='',name=None)",
            "function_name": "unsorted_segment_join",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unsorted_segment_join"
            ]
        },
        "upper": {
            "code": "tf.strings.upper(input,encoding='',name=None)",
            "function_name": "upper",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "encoding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "upper"
            ]
        },
        "unicodescript": {
            "code": "tf.strings.unicode_script(input,name=None)",
            "function_name": "unicode_script",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_script"
            ]
        },
        "unicodesplit": {
            "code": "tf.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)",
            "function_name": "unicode_split",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacementchar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_split"
            ]
        },
        "unicodesplitwithoffsets": {
            "code": "tf.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)",
            "function_name": "unicode_split_with_offsets",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacementchar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_split_with_offsets"
            ]
        },
        "unicodedecode": {
            "code": "tf.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
            "function_name": "unicode_decode",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacementchar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacecontrolcharacters",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_decode"
            ]
        },
        "unicodetranscode": {
            "code": "tf.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
            "function_name": "unicode_transcode",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacementchar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacecontrolcharacters",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_transcode"
            ]
        },
        "unicodedecodewithoffsets": {
            "code": "tf.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
            "function_name": "unicode_decode_with_offsets",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacementchar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacecontrolcharacters",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_decode_with_offsets"
            ]
        },
        "tohashbucketstrong": {
            "code": "tf.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)",
            "function_name": "to_hash_bucket_strong",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbuckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_hash_bucket_strong"
            ]
        },
        "unicodeencode": {
            "code": "tf.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)",
            "function_name": "unicode_encode",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputencoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replacementchar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_encode"
            ]
        },
        "tonumber": {
            "code": "tf.strings.to_number(input,out_type=tf.dtypes.float32,name=None)",
            "function_name": "to_number",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_number"
            ]
        },
        "tohashbucketfast": {
            "code": "tf.strings.to_hash_bucket_fast(input,num_buckets,name=None)",
            "function_name": "to_hash_bucket_fast",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbuckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_hash_bucket_fast"
            ]
        },
        "tohashbucket": {
            "code": "tf.strings.to_hash_bucket(input,num_buckets,name=None)",
            "function_name": "to_hash_bucket",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbuckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_hash_bucket"
            ]
        },
        "substr": {
            "code": "tf.strings.substr(input,pos,len,unit='BYTE',name=None)",
            "function_name": "substr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pos",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "len",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unit",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "substr"
            ]
        },
        "split": {
            "code": "tf.split(value,num_or_size_splits,axis=0,num=None,name='split')",
            "function_name": "split",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numorsizesplits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "numorsizesplits"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "num",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "split"
            ]
        },
        "strip": {
            "code": "tf.strings.strip(input,name=None)",
            "function_name": "strip",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "strip"
            ]
        },
        "regexreplace": {
            "code": "tf.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)",
            "function_name": "regex_replace",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rewrite",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "replaceglobal",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "regex_replace"
            ]
        },
        "regexfullmatch": {
            "code": "tf.strings.regex_full_match(input,pattern,name=None)",
            "function_name": "regex_full_match",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "regex_full_match"
            ]
        },
        "ngrams": {
            "code": "tf.strings.ngrams(data,ngram_width,separator='',pad_values=None,padding_width=None,preserve_short_sequences=False,name=None)",
            "function_name": "ngrams",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ngramwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padvalues",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddingwidth",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "preserveshortsequences",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "ngrams"
            ]
        },
        "reducejoin": {
            "code": "tf.strings.reduce_join(inputs,axis=None,keepdims=False,separator='',name=None)",
            "function_name": "reduce_join",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "reduce_join"
            ]
        },
        "join": {
            "code": "tf.strings.join(inputs,separator='',name=None)",
            "function_name": "join",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "join"
            ]
        },
        "length": {
            "code": "tf.strings.length(input,unit='BYTE',name=None)",
            "function_name": "length",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unit",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "length"
            ]
        },
        "lower": {
            "code": "tf.strings.lower(input,encoding='',name=None)",
            "function_name": "lower",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "encoding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "lower"
            ]
        },
        "bytessplit": {
            "code": "tf.strings.bytes_split(input,name=None)",
            "function_name": "bytes_split",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "bytes_split"
            ]
        },
        "asstring": {
            "code": "tf.strings.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)",
            "function_name": "as_string",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "precision",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scientific",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shortest",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "width",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fill",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "as_string"
            ]
        },
        "toindicator": {
            "code": "tf.sparse.to_indicator(sp_input,vocab_size,name=None)",
            "function_name": "to_indicator",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "to_indicator"
            ]
        },
        "todense": {
            "code": "tf.keras.backend.to_dense(tensor)",
            "function_name": "to_dense",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "to_dense"
            ]
        },
        "format": {
            "code": "tf.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)",
            "function_name": "format",
            "args": [
                {
                    "name": "template",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "placeholder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "format"
            ]
        },
        "transpose": {
            "code": "tf.transpose(a,perm=None,conjugate=False,name='transpose')",
            "function_name": "transpose",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "perm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "perm"
                },
                {
                    "name": "conjugate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "transpose"
            ]
        },
        "sparsedensematmul": {
            "code": "tf.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)",
            "function_name": "sparse_dense_matmul",
            "args": [
                {
                    "name": "spa",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjointa",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjointb",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "sparse_dense_matmul"
            ]
        },
        "segmentsum": {
            "code": "tf.math.segment_sum(data,segment_ids,name=None)",
            "function_name": "segment_sum",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_sum"
            ]
        },
        "retain": {
            "code": "tf.sparse.retain(sp_input,to_retain)",
            "function_name": "retain",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "toretain",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "retain"
            ]
        },
        "softmax": {
            "code": "tf.keras.activations.softmax(x,axis=-1)",
            "function_name": "softmax",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "softmax"
            ]
        },
        "reshape": {
            "code": "tf.reshape(tensor,shape,name=None)",
            "function_name": "reshape",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "shape",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "reshape"
            ]
        },
        "slice": {
            "code": "tf.slice(input_,begin,size,name=None)",
            "function_name": "slice",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "begin"
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "size"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "slice"
            ]
        },
        "segmentsqrtn": {
            "code": "tf.sparse.segment_sqrt_n(data,indices,segment_ids,num_segments=None,name=None)",
            "function_name": "segment_sqrt_n",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "segment_sqrt_n"
            ]
        },
        "segmentmean": {
            "code": "tf.math.segment_mean(data,segment_ids,name=None)",
            "function_name": "segment_mean",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_mean"
            ]
        },
        "resetshape": {
            "code": "tf.sparse.reset_shape(sp_input,new_shape=None)",
            "function_name": "reset_shape",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "newshape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "reset_shape"
            ]
        },
        "reorder": {
            "code": "tf.sparse.reorder(sp_input,name=None)",
            "function_name": "reorder",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "reorder"
            ]
        },
        "reducesum": {
            "code": "tf.math.reduce_sum(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_sum",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_sum"
            ]
        },
        "minimum": {
            "code": "tf.keras.backend.minimum(x,y)",
            "function_name": "minimum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "minimum"
            ]
        },
        "reducemax": {
            "code": "tf.math.reduce_max(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_max",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_max"
            ]
        },
        "mask": {
            "code": "tf.sparse.mask(a,mask_indices,name=None)",
            "function_name": "mask",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maskindices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "mask"
            ]
        },
        "maximum": {
            "code": "tf.keras.backend.maximum(x,y)",
            "function_name": "maximum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "maximum"
            ]
        },
        "fromdense": {
            "code": "tf.sparse.from_dense(tensor,name=None)",
            "function_name": "from_dense",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "from_dense"
            ]
        },
        "fillemptyrows": {
            "code": "tf.sparse.fill_empty_rows(sp_input,default_value,name=None)",
            "function_name": "fill_empty_rows",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "fill_empty_rows"
            ]
        },
        "eye": {
            "code": "tf.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)",
            "function_name": "eye",
            "args": [
                {
                    "name": "numrows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "numrows"
                },
                {
                    "name": "numcolumns",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "numcolumns"
                },
                {
                    "name": "batchshape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "batchshape"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "eye"
            ]
        },
        "expanddims": {
            "code": "tf.expand_dims(input,axis,name=None)",
            "function_name": "expand_dims",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "expand_dims"
            ]
        },
        "crosshashed": {
            "code": "tf.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)",
            "function_name": "cross_hashed",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbuckets",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashkey",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "cross_hashed"
            ]
        },
        "stft": {
            "code": "tf.signal.stft(signals,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,pad_end=False,name=None)",
            "function_name": "stft",
            "args": [
                {
                    "name": "signals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "framelength"
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "framestep"
                },
                {
                    "name": "fftlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "fftlength"
                },
                {
                    "name": "windowfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "windowfn"
                },
                {
                    "name": "padend",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "stft"
            ]
        },
        "cross": {
            "code": "tf.linalg.cross(a,b,name=None)",
            "function_name": "cross",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "cross"
            ]
        },
        "add": {
            "code": "tf.keras.layers.add(inputs,**kwargs)",
            "function_name": "add",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "add"
            ]
        },
        "concat": {
            "code": "tf.concat(values,axis,name='concat')",
            "function_name": "concat",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "concat"
            ]
        },
        "rfftd": {
            "code": "tf.signal.rfft3d(input_tensor,fft_length=None,name=None)",
            "function_name": "rfft3d",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "rfft3d"
            ]
        },
        "rfft": {
            "code": "tf.signal.rfft(input_tensor,fft_length=None,name=None)",
            "function_name": "rfft",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "fftlength"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "rfft"
            ]
        },
        "overlapandadd": {
            "code": "tf.signal.overlap_and_add(signal,frame_step,name=None)",
            "function_name": "overlap_and_add",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "overlap_and_add"
            ]
        },
        "lineartomelweightmatrix": {
            "code": "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)",
            "function_name": "linear_to_mel_weight_matrix",
            "args": [
                {
                    "name": "nummelbins",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numspectrogrambins",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "samplerate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "loweredgehertz",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "upperedgehertz",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "linear_to_mel_weight_matrix"
            ]
        },
        "mfccsfromlogmelspectrograms": {
            "code": "tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)",
            "function_name": "mfccs_from_log_mel_spectrograms",
            "args": [
                {
                    "name": "logmelspectrograms",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "mfccs_from_log_mel_spectrograms"
            ]
        },
        "irfft": {
            "code": "tf.signal.irfft(input_tensor,fft_length=None,name=None)",
            "function_name": "irfft",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "irfft"
            ]
        },
        "irfftd": {
            "code": "tf.signal.irfft3d(input_tensor,fft_length=None,name=None)",
            "function_name": "irfft3d",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "irfft3d"
            ]
        },
        "ifftshift": {
            "code": "tf.signal.ifftshift(x,axes=None,name=None)",
            "function_name": "ifftshift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifftshift"
            ]
        },
        "inversestftwindowfn": {
            "code": "tf.signal.inverse_stft_window_fn(frame_step,forward_window_fn=tf.signal.hann_window,name=None)",
            "function_name": "inverse_stft_window_fn",
            "args": [
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "forwardwindowfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "inverse_stft_window_fn"
            ]
        },
        "inversestft": {
            "code": "tf.signal.inverse_stft(stfts,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,name=None)",
            "function_name": "inverse_stft",
            "args": [
                {
                    "name": "stfts",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "windowfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "inverse_stft"
            ]
        },
        "ifft": {
            "code": "tf.signal.ifft(input,name=None)",
            "function_name": "ifft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifft"
            ]
        },
        "ifftd": {
            "code": "tf.signal.ifft2d(input,name=None)",
            "function_name": "ifft2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifft2d"
            ]
        },
        "idct": {
            "code": "tf.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)",
            "function_name": "idct",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "type",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "n",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "norm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "idct"
            ]
        },
        "hammingwindow": {
            "code": "tf.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)",
            "function_name": "hamming_window",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "windowlength",
                    "tfjs": "windowlength"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "periodic",
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hamming_window"
            ]
        },
        "hannwindow": {
            "code": "tf.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)",
            "function_name": "hann_window",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "windowlength",
                    "tfjs": "windowlength"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "periodic",
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hann_window"
            ]
        },
        "fftd": {
            "code": "tf.signal.fft2d(input,name=None)",
            "function_name": "fft2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fft2d"
            ]
        },
        "dct": {
            "code": "tf.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)",
            "function_name": "dct",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "type",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "n",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "norm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "dct"
            ]
        },
        "fft": {
            "code": "tf.signal.fft(input,name=None)",
            "function_name": "fft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fft"
            ]
        },
        "frame": {
            "code": "tf.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)",
            "function_name": "frame",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "signal"
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "framelength"
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "framestep"
                },
                {
                    "name": "padend",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "padend"
                },
                {
                    "name": "padvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "padvalue"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "frame"
            ]
        },
        "fftshift": {
            "code": "tf.signal.fftshift(x,axes=None,name=None)",
            "function_name": "fftshift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fftshift"
            ]
        },
        "union": {
            "code": "tf.sets.union(a,b,validate_indices=True)",
            "function_name": "union",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateindices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sets",
                "union"
            ]
        },
        "size": {
            "code": "tf.size(input,out_type=tf.dtypes.int32,name=None)",
            "function_name": "size",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "size"
            ]
        },
        "intersection": {
            "code": "tf.sets.intersection(a,b,validate_indices=True)",
            "function_name": "intersection",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateindices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sets",
                "intersection"
            ]
        },
        "load": {
            "code": "tf.saved_model.load(export_dir,tags=None)",
            "function_name": "load",
            "args": [
                {
                    "name": "exportdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tags",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "load"
            ]
        },
        "difference": {
            "code": "tf.sets.difference(a,b,aminusb=True,validate_indices=True)",
            "function_name": "difference",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "aminusb",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateindices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sets",
                "difference"
            ]
        },
        "save": {
            "code": "tf.saved_model.save(obj,export_dir,signatures=None,options=None)",
            "function_name": "save",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "exportdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "signatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "options",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "save"
            ]
        },
        "containssavedmodel": {
            "code": "tf.saved_model.contains_saved_model(export_dir)",
            "function_name": "contains_saved_model",
            "args": [
                {
                    "name": "exportdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "contains_saved_model"
            ]
        },
        "setglobalgenerator": {
            "code": "tf.random.experimental.set_global_generator(generator)",
            "function_name": "set_global_generator",
            "args": [
                {
                    "name": "generator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "set_global_generator"
            ]
        },
        "createrngstate": {
            "code": "tf.random.experimental.create_rng_state(seed,algorithm)",
            "function_name": "create_rng_state",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "algorithm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "create_rng_state"
            ]
        },
        "getglobalgenerator": {
            "code": "tf.random.experimental.get_global_generator()",
            "function_name": "get_global_generator",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "get_global_generator"
            ]
        },
        "uniformcandidatesampler": {
            "code": "tf.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
            "function_name": "uniform_candidate_sampler",
            "args": [
                {
                    "name": "trueclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rangemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "uniform_candidate_sampler"
            ]
        },
        "statelessuniform": {
            "code": "tf.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None)",
            "function_name": "stateless_uniform",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_uniform"
            ]
        },
        "uniform": {
            "code": "tf.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "uniform",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "uniform"
            ]
        },
        "statelesstruncatednormal": {
            "code": "tf.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)",
            "function_name": "stateless_truncated_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_truncated_normal"
            ]
        },
        "truncatednormal": {
            "code": "tf.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)",
            "function_name": "truncated_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "truncated_normal"
            ]
        },
        "statelessnormal": {
            "code": "tf.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)",
            "function_name": "stateless_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_normal"
            ]
        },
        "shuffle": {
            "code": "tf.random.shuffle(value,seed=None,name=None)",
            "function_name": "shuffle",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "shuffle"
            ]
        },
        "statelesscategorical": {
            "code": "tf.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)",
            "function_name": "stateless_categorical",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsamples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_categorical"
            ]
        },
        "poisson": {
            "code": "tf.random.poisson(shape,lam,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "poisson",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lam",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "poisson"
            ]
        },
        "setseed": {
            "code": "tf.random.set_seed(seed)",
            "function_name": "set_seed",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "set_seed"
            ]
        },
        "normal": {
            "code": "tf.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "mean",
                    "tfjs": null
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "normal"
            ]
        },
        "gamma": {
            "code": "tf.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "gamma",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "gamma"
            ]
        },
        "loguniformcandidatesampler": {
            "code": "tf.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
            "function_name": "log_uniform_candidate_sampler",
            "args": [
                {
                    "name": "trueclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rangemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "log_uniform_candidate_sampler"
            ]
        },
        "learnedunigramcandidatesampler": {
            "code": "tf.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
            "function_name": "learned_unigram_candidate_sampler",
            "args": [
                {
                    "name": "trueclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rangemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "learned_unigram_candidate_sampler"
            ]
        },
        "allcandidatesampler": {
            "code": "tf.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)",
            "function_name": "all_candidate_sampler",
            "args": [
                {
                    "name": "trueclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "all_candidate_sampler"
            ]
        },
        "categorical": {
            "code": "tf.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)",
            "function_name": "categorical",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsamples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "categorical"
            ]
        },
        "segmentidstorowsplits": {
            "code": "tf.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,out_type=None,name=None)",
            "function_name": "segment_ids_to_row_splits",
            "args": [
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "segment_ids_to_row_splits"
            ]
        },
        "stack": {
            "code": "tf.stack(values,axis=0,name='stack')",
            "function_name": "stack",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "stack"
            ]
        },
        "fixedunigramcandidatesampler": {
            "code": "tf.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)",
            "function_name": "fixed_unigram_candidate_sampler",
            "args": [
                {
                    "name": "trueclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rangemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabfile",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "distortion",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numreservedids",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numshards",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shard",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unigrams",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "fixed_unigram_candidate_sampler"
            ]
        },
        "rowsplitstosegmentids": {
            "code": "tf.ragged.row_splits_to_segment_ids(splits,name=None,out_type=None)",
            "function_name": "row_splits_to_segment_ids",
            "args": [
                {
                    "name": "splits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "row_splits_to_segment_ids"
            ]
        },
        "range": {
            "code": "tf.range(limit,delta=1,dtype=None,name='range')tf.range(start,limit,delta=1,dtype=None,name='range')",
            "function_name": "range",
            "args": [
                {
                    "name": "limit",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "limit",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "range"
            ]
        },
        "stackdynamicpartitions": {
            "code": "tf.ragged.stack_dynamic_partitions(data,partitions,num_partitions,name=None)",
            "function_name": "stack_dynamic_partitions",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "partitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numpartitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "stack_dynamic_partitions"
            ]
        },
        "mapflatvalues": {
            "code": "tf.ragged.map_flat_values(op,*args,**kwargs)",
            "function_name": "map_flat_values",
            "args": [
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "map_flat_values"
            ]
        },
        "constant": {
            "code": "tf.constant(value,dtype=None,shape=None,name='Const')",
            "function_name": "constant",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "constant"
            ]
        },
        "booleanmask": {
            "code": "tf.boolean_mask(tensor,mask,axis=None,name='boolean_mask')",
            "function_name": "boolean_mask",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "boolean_mask"
            ]
        },
        "quantizeanddequantize": {
            "code": "tf.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)",
            "function_name": "quantize_and_dequantize",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputmin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputmax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "signedinput",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rangegiven",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "roundmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "quantize_and_dequantize"
            ]
        },
        "fakequantwithminmaxvarsgradient": {
            "code": "tf.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars_gradient",
            "args": [
                {
                    "name": "gradients",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars_gradient"
            ]
        },
        "fakequantwithminmaxvarsperchannelgradient": {
            "code": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars_per_channel_gradient",
            "args": [
                {
                    "name": "gradients",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars_per_channel_gradient"
            ]
        },
        "fakequantwithminmaxvarsperchannel": {
            "code": "tf.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars_per_channel",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars_per_channel"
            ]
        },
        "quantize": {
            "code": "tf.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)",
            "function_name": "quantize",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minrange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxrange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "roundmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ensureminimumrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "quantize"
            ]
        },
        "quantizedconcat": {
            "code": "tf.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)",
            "function_name": "quantized_concat",
            "args": [
                {
                    "name": "concatdim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputmins",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputmaxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "quantized_concat"
            ]
        },
        "fakequantwithminmaxargsgradient": {
            "code": "tf.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_args_gradient",
            "args": [
                {
                    "name": "gradients",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "min",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_args_gradient"
            ]
        },
        "fakequantwithminmaxvars": {
            "code": "tf.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars"
            ]
        },
        "fakequantwithminmaxargs": {
            "code": "tf.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_args",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "min",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_args"
            ]
        },
        "swish": {
            "code": "tf.nn.swish(features)",
            "function_name": "swish",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "swish"
            ]
        },
        "weightedmoments": {
            "code": "tf.nn.weighted_moments(x,axes,frequency_weights,keepdims=False,name=None)",
            "function_name": "weighted_moments",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "frequencyweights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "weighted_moments"
            ]
        },
        "dequantize": {
            "code": "tf.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False)",
            "function_name": "dequantize",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minrange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxrange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "narrowrange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "dequantize"
            ]
        },
        "withspacetobatch": {
            "code": "tf.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)",
            "function_name": "with_space_to_batch",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilationrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filtershape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "spatialdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "with_space_to_batch"
            ]
        },
        "sufficientstatistics": {
            "code": "tf.nn.sufficient_statistics(x,axes,shift=None,keepdims=False,name=None)",
            "function_name": "sufficient_statistics",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shift",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sufficient_statistics"
            ]
        },
        "weightedcrossentropywithlogits": {
            "code": "tf.nn.weighted_cross_entropy_with_logits(labels,logits,pos_weight,name=None)",
            "function_name": "weighted_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "posweight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "weighted_cross_entropy_with_logits"
            ]
        },
        "spacetodepth": {
            "code": "tf.nn.space_to_depth(input,block_size,data_format='NHWC',name=None)",
            "function_name": "space_to_depth",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blocksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "space_to_depth"
            ]
        },
        "softsign": {
            "code": "tf.keras.activations.softsign(x)",
            "function_name": "softsign",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "softsign"
            ]
        },
        "sparsesoftmaxcrossentropywithlogits": {
            "code": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits,name=None)",
            "function_name": "sparse_softmax_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sparse_softmax_cross_entropy_with_logits"
            ]
        },
        "sigmoidcrossentropywithlogits": {
            "code": "tf.nn.sigmoid_cross_entropy_with_logits(labels=None,logits=None,name=None)",
            "function_name": "sigmoid_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sigmoid_cross_entropy_with_logits"
            ]
        },
        "separableconvd": {
            "code": "tf.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "separable_conv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "depthwisekernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pointwisekernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dataformat"
                },
                {
                    "name": "dilationrate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "separable_conv2d"
            ]
        },
        "selu": {
            "code": "tf.keras.activations.selu(x)",
            "function_name": "selu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "selu"
            ]
        },
        "softmaxcrossentropywithlogits": {
            "code": "tf.nn.softmax_cross_entropy_with_logits(labels,logits,axis=-1,name=None)",
            "function_name": "softmax_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "softmax_cross_entropy_with_logits"
            ]
        },
        "scaleregularizationloss": {
            "code": "tf.nn.scale_regularization_loss(regularization_loss)",
            "function_name": "scale_regularization_loss",
            "args": [
                {
                    "name": "regularizationloss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "scale_regularization_loss"
            ]
        },
        "safeembeddinglookupsparse": {
            "code": "tf.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,max_norm=None,name=None)",
            "function_name": "safe_embedding_lookup_sparse",
            "args": [
                {
                    "name": "embeddingweights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sparseids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sparseweights",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultid",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "safe_embedding_lookup_sparse"
            ]
        },
        "sampledsoftmaxloss": {
            "code": "tf.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,seed=None,name='sampled_softmax_loss')",
            "function_name": "sampled_softmax_loss",
            "args": [
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "biases",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sampledvalues",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "removeaccidentalhits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sampled_softmax_loss"
            ]
        },
        "relu": {
            "code": "tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0)",
            "function_name": "relu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "relu"
            ]
        },
        "pool": {
            "code": "tf.nn.pool(input,window_shape,pooling_type,strides=None,padding='VALID',data_format=None,dilations=None,name=None)",
            "function_name": "pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "input"
                },
                {
                    "name": "windowshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "windowshape"
                },
                {
                    "name": "poolingtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "poolingtype"
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dilations"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "pool"
            ]
        },
        "nceloss": {
            "code": "tf.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,name='nce_loss')",
            "function_name": "nce_loss",
            "args": [
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "biases",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sampledvalues",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "removeaccidentalhits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "nce_loss"
            ]
        },
        "normalizemoments": {
            "code": "tf.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)",
            "function_name": "normalize_moments",
            "args": [
                {
                    "name": "counts",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "meanss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "variancess",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shift",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "normalize_moments"
            ]
        },
        "moments": {
            "code": "tf.nn.moments(x,axes,shift=None,keepdims=False,name=None)",
            "function_name": "moments",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shift",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "moments"
            ]
        },
        "maxpoold": {
            "code": "tf.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
            "function_name": "max_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dataformat"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool2d"
            ]
        },
        "maxpoolwithargmax": {
            "code": "tf.nn.max_pool_with_argmax(input,ksize,strides,padding,data_format='NHWC',output_dtype=tf.dtypes.int64,include_batch_in_index=False,name=None)",
            "function_name": "max_pool_with_argmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputdtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "includebatchinindex",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool_with_argmax"
            ]
        },
        "logsoftmax": {
            "code": "tf.nn.log_softmax(logits,axis=None,name=None)",
            "function_name": "log_softmax",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "logits"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "log_softmax"
            ]
        },
        "logpoissonloss": {
            "code": "tf.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)",
            "function_name": "log_poisson_loss",
            "args": [
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "loginput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "computefullloss",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "log_poisson_loss"
            ]
        },
        "maxpool": {
            "code": "tf.nn.max_pool(input,ksize,strides,padding,data_format=None,name=None)",
            "function_name": "max_pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool"
            ]
        },
        "localresponsenormalization": {
            "code": "tf.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)",
            "function_name": "local_response_normalization",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "depthradius",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "depthradius"
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "bias"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "alpha"
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "beta"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "local_response_normalization"
            ]
        },
        "leakyrelu": {
            "code": "tf.nn.leaky_relu(features,alpha=0.2,name=None)",
            "function_name": "leaky_relu",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "alpha"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "leaky_relu"
            ]
        },
        "lloss": {
            "code": "tf.nn.l2_loss(t,name=None)",
            "function_name": "l2_loss",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "l2_loss"
            ]
        },
        "fractionalavgpool": {
            "code": "tf.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)",
            "function_name": "fractional_avg_pool",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "poolingratio",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pseudorandom",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "overlapping",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "fractional_avg_pool"
            ]
        },
        "fractionalmaxpool": {
            "code": "tf.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)",
            "function_name": "fractional_max_pool",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "poolingratio",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pseudorandom",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "overlapping",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "fractional_max_pool"
            ]
        },
        "erosiond": {
            "code": "tf.nn.erosion2d(value,filters,strides,padding,data_format,dilations,name=None)",
            "function_name": "erosion2d",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "erosion2d"
            ]
        },
        "dilationd": {
            "code": "tf.nn.dilation2d(input,filters,strides,padding,data_format,dilations,name=None)",
            "function_name": "dilation2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "dilation2d"
            ]
        },
        "embeddinglookupsparse": {
            "code": "tf.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,combiner=None,max_norm=None,name=None)",
            "function_name": "embedding_lookup_sparse",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "spids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "spweights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "embedding_lookup_sparse"
            ]
        },
        "elu": {
            "code": "tf.keras.activations.elu(x,alpha=1.0)",
            "function_name": "elu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "alpha",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "elu"
            ]
        },
        "dropout": {
            "code": "tf.keras.backend.dropout(x,level,noise_shape=None,seed=None)",
            "function_name": "dropout",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "level",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "noiseshape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "noiseshape"
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "seed"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "dropout"
            ]
        },
        "embeddinglookup": {
            "code": "tf.nn.embedding_lookup(params,ids,max_norm=None,name=None)",
            "function_name": "embedding_lookup",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "embedding_lookup"
            ]
        },
        "depthtospace": {
            "code": "tf.nn.depth_to_space(input,block_size,data_format='NHWC',name=None)",
            "function_name": "depth_to_space",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blocksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "blocksize"
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dataformat"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "depth_to_space"
            ]
        },
        "depthwiseconvdbackpropfilter": {
            "code": "tf.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)",
            "function_name": "depthwise_conv2d_backprop_filter",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filtersizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outbackprop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 6,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 7,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "depthwise_conv2d_backprop_filter"
            ]
        },
        "depthwiseconvdbackpropinput": {
            "code": "tf.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)",
            "function_name": "depthwise_conv2d_backprop_input",
            "args": [
                {
                    "name": "inputsizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outbackprop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 6,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 7,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "depthwise_conv2d_backprop_input"
            ]
        },
        "ctcloss": {
            "code": "tf.nn.ctc_loss(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)",
            "function_name": "ctc_loss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labellength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logitlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logitstimemajor",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unique",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blankindex",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_loss"
            ]
        },
        "ctcuniquelabels": {
            "code": "tf.nn.ctc_unique_labels(labels,name=None)",
            "function_name": "ctc_unique_labels",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_unique_labels"
            ]
        },
        "depthwiseconvd": {
            "code": "tf.keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "depthwise_conv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "depthwisekernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dataformat"
                },
                {
                    "name": "dilationrate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "depthwise_conv2d"
            ]
        },
        "ctcgreedydecoder": {
            "code": "tf.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)",
            "function_name": "ctc_greedy_decoder",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sequencelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mergerepeated",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_greedy_decoder"
            ]
        },
        "convtranspose": {
            "code": "tf.nn.conv_transpose(input,filters,output_shape,strides,padding='SAME',data_format=None,dilations=None,name=None)",
            "function_name": "conv_transpose",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "conv_transpose"
            ]
        },
        "convdtranspose": {
            "code": "tf.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "conv2d_transpose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "outputshape"
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilationrate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "conv2d_transpose"
            ]
        },
        "ctcbeamsearchdecoder": {
            "code": "tf.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1)",
            "function_name": "ctc_beam_search_decoder",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sequencelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "beamwidth",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "toppaths",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_beam_search_decoder"
            ]
        },
        "crelu": {
            "code": "tf.nn.crelu(features,axis=-1,name=None)",
            "function_name": "crelu",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "crelu"
            ]
        },
        "convolution": {
            "code": "tf.nn.convolution(input,filters,strides=None,padding='VALID',data_format=None,dilations=None,name=None)",
            "function_name": "convolution",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "convolution"
            ]
        },
        "convd": {
            "code": "tf.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)",
            "function_name": "conv1d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "padding",
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dataformat"
                },
                {
                    "name": "dilationrate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "conv1d"
            ]
        },
        "computeaccidentalhits": {
            "code": "tf.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)",
            "function_name": "compute_accidental_hits",
            "args": [
                {
                    "name": "trueclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sampledcandidates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numtrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "compute_accidental_hits"
            ]
        },
        "batchnormwithglobalnormalization": {
            "code": "tf.nn.batch_norm_with_global_normalization(input,mean,variance,beta,gamma,variance_epsilon,scale_after_normalization,name=None)",
            "function_name": "batch_norm_with_global_normalization",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "variance",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "varianceepsilon",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scaleafternormalization",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 6,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "batch_norm_with_global_normalization"
            ]
        },
        "collapserepeated": {
            "code": "tf.nn.collapse_repeated(labels,seq_length,name=None)",
            "function_name": "collapse_repeated",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seqlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "collapse_repeated"
            ]
        },
        "batchnormalization": {
            "code": "tf.keras.backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)",
            "function_name": "batch_normalization",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "var",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_normalization"
            ]
        },
        "biasadd": {
            "code": "tf.keras.backend.bias_add(x,bias,data_format=None)",
            "function_name": "bias_add",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bias",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "bias_add"
            ]
        },
        "computeaverageloss": {
            "code": "tf.nn.compute_average_loss(per_example_loss,sample_weight=None,global_batch_size=None)",
            "function_name": "compute_average_loss",
            "args": [
                {
                    "name": "perexampleloss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sampleweight",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "globalbatchsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "compute_average_loss"
            ]
        },
        "avgpoold": {
            "code": "tf.nn.avg_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
            "function_name": "avg_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": "padding",
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dataformat"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "avg_pool2d"
            ]
        },
        "atrousconvd": {
            "code": "tf.nn.atrous_conv2d(value,filters,rate,padding,name=None)",
            "function_name": "atrous_conv2d",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "atrous_conv2d"
            ]
        },
        "atrousconvdtranspose": {
            "code": "tf.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)",
            "function_name": "atrous_conv2d_transpose",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "atrous_conv2d_transpose"
            ]
        },
        "avgpool": {
            "code": "tf.nn.avg_pool(input,ksize,strides,padding,data_format=None,name=None)",
            "function_name": "avg_pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "avg_pool"
            ]
        },
        "packsequenceas": {
            "code": "tf.nest.pack_sequence_as(structure,flat_sequence,expand_composites=False)",
            "function_name": "pack_sequence_as",
            "args": [
                {
                    "name": "structure",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "flatsequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "expandcomposites",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "pack_sequence_as"
            ]
        },
        "assertsamestructure": {
            "code": "tf.nest.assert_same_structure(nest1,nest2,check_types=True,expand_composites=False)",
            "function_name": "assert_same_structure",
            "args": [
                {
                    "name": "nest",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "nest",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "checktypes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "expandcomposites",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "assert_same_structure"
            ]
        },
        "convertgraphdef": {
            "code": "tf.mlir.experimental.convert_graph_def(graph_def,pass_pipeline='tf-standard-pipeline')",
            "function_name": "convert_graph_def",
            "args": [
                {
                    "name": "graphdef",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "passpipeline",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "mlir",
                "experimental",
                "convert_graph_def"
            ]
        },
        "flatten": {
            "code": "tf.keras.backend.flatten(x)",
            "function_name": "flatten",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "flatten"
            ]
        },
        "mapstructure": {
            "code": "tf.nest.map_structure(func,*structure,**kwargs)",
            "function_name": "map_structure",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "structure",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "map_structure"
            ]
        },
        "isnested": {
            "code": "tf.nest.is_nested(seq)",
            "function_name": "is_nested",
            "args": [
                {
                    "name": "seq",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "is_nested"
            ]
        },
        "zerofraction": {
            "code": "tf.math.zero_fraction(value,name=None)",
            "function_name": "zero_fraction",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "zero_fraction"
            ]
        },
        "xdivy": {
            "code": "tf.math.xdivy(x,y,name=None)",
            "function_name": "xdivy",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "xdivy"
            ]
        },
        "xlogy": {
            "code": "tf.math.xlogy(x,y,name=None)",
            "function_name": "xlogy",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "xlogy"
            ]
        },
        "zeta": {
            "code": "tf.math.zeta(x,q,name=None)",
            "function_name": "zeta",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "q",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "zeta"
            ]
        },
        "unsortedsegmentsqrtn": {
            "code": "tf.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_sqrt_n",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_sqrt_n"
            ]
        },
        "unsortedsegmentprod": {
            "code": "tf.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_prod",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_prod"
            ]
        },
        "unsortedsegmentsum": {
            "code": "tf.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_sum",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "segmentids"
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "numsegments"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_sum"
            ]
        },
        "unsortedsegmentmean": {
            "code": "tf.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_mean",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_mean"
            ]
        },
        "unsortedsegmentmin": {
            "code": "tf.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_min",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_min"
            ]
        },
        "truediv": {
            "code": "tf.math.truediv(x,y,name=None)",
            "function_name": "truediv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "truediv"
            ]
        },
        "unsortedsegmentmax": {
            "code": "tf.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_max",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_max"
            ]
        },
        "topk": {
            "code": "tf.math.top_k(input,k=1,sorted=True,name=None)",
            "function_name": "top_k",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "k",
                    "tfjs": "k"
                },
                {
                    "name": "sorted",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "sorted",
                    "tfjs": "sorted"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "top_k"
            ]
        },
        "tanh": {
            "code": "tf.keras.activations.tanh(x)",
            "function_name": "tanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "tanh"
            ]
        },
        "tan": {
            "code": "tf.math.tan(x,name=None)",
            "function_name": "tan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "tan"
            ]
        },
        "squareddifference": {
            "code": "tf.math.squared_difference(x,y,name=None)",
            "function_name": "squared_difference",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "squared_difference"
            ]
        },
        "square": {
            "code": "tf.keras.backend.square(x)",
            "function_name": "square",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "square"
            ]
        },
        "sqrt": {
            "code": "tf.keras.backend.sqrt(x)",
            "function_name": "sqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sqrt"
            ]
        },
        "subtract": {
            "code": "tf.keras.layers.subtract(inputs,**kwargs)",
            "function_name": "subtract",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "subtract"
            ]
        },
        "sin": {
            "code": "tf.keras.backend.sin(x)",
            "function_name": "sin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sin"
            ]
        },
        "sign": {
            "code": "tf.keras.backend.sign(x)",
            "function_name": "sign",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sign"
            ]
        },
        "sinh": {
            "code": "tf.math.sinh(x,name=None)",
            "function_name": "sinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "sinh"
            ]
        },
        "softplus": {
            "code": "tf.keras.activations.softplus(x)",
            "function_name": "softplus",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "softplus"
            ]
        },
        "sigmoid": {
            "code": "tf.keras.activations.sigmoid(x)",
            "function_name": "sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "sigmoid"
            ]
        },
        "round": {
            "code": "tf.keras.backend.round(x)",
            "function_name": "round",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "round"
            ]
        },
        "segmentprod": {
            "code": "tf.math.segment_prod(data,segment_ids,name=None)",
            "function_name": "segment_prod",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_prod"
            ]
        },
        "segmentmin": {
            "code": "tf.math.segment_min(data,segment_ids,name=None)",
            "function_name": "segment_min",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_min"
            ]
        },
        "rsqrt": {
            "code": "tf.math.rsqrt(x,name=None)",
            "function_name": "rsqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "rsqrt"
            ]
        },
        "scalarmul": {
            "code": "tf.math.scalar_mul(scalar,x,name=None)",
            "function_name": "scalar_mul",
            "args": [
                {
                    "name": "scalar",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "scalar_mul"
            ]
        },
        "segmentmax": {
            "code": "tf.math.segment_max(data,segment_ids,name=None)",
            "function_name": "segment_max",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_max"
            ]
        },
        "reducevariance": {
            "code": "tf.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_variance",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_variance"
            ]
        },
        "rint": {
            "code": "tf.math.rint(x,name=None)",
            "function_name": "rint",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "rint"
            ]
        },
        "reducestd": {
            "code": "tf.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_std",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_std"
            ]
        },
        "reducemin": {
            "code": "tf.math.reduce_min(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_min",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_min"
            ]
        },
        "reducemean": {
            "code": "tf.math.reduce_mean(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_mean",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_mean"
            ]
        },
        "reduceprod": {
            "code": "tf.math.reduce_prod(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_prod",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_prod"
            ]
        },
        "reducelogsumexp": {
            "code": "tf.math.reduce_logsumexp(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_logsumexp",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_logsumexp"
            ]
        },
        "reduceeuclideannorm": {
            "code": "tf.math.reduce_euclidean_norm(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_euclidean_norm",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_euclidean_norm"
            ]
        },
        "reciprocalnonan": {
            "code": "tf.math.reciprocal_no_nan(x,name=None)",
            "function_name": "reciprocal_no_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reciprocal_no_nan"
            ]
        },
        "reduceany": {
            "code": "tf.math.reduce_any(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_any",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_any"
            ]
        },
        "polygamma": {
            "code": "tf.math.polygamma(a,x,name=None)",
            "function_name": "polygamma",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "polygamma"
            ]
        },
        "notequal": {
            "code": "tf.keras.backend.not_equal(x,y)",
            "function_name": "not_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "not_equal"
            ]
        },
        "reciprocal": {
            "code": "tf.math.reciprocal(x,name=None)",
            "function_name": "reciprocal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reciprocal"
            ]
        },
        "real": {
            "code": "tf.math.real(input,name=None)",
            "function_name": "real",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "real"
            ]
        },
        "pow": {
            "code": "tf.keras.backend.pow(x,a)",
            "function_name": "pow",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "pow"
            ]
        },
        "polyval": {
            "code": "tf.math.polyval(coeffs,x,name=None)",
            "function_name": "polyval",
            "args": [
                {
                    "name": "coeffs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "polyval"
            ]
        },
        "negative": {
            "code": "tf.math.negative(x,name=None)",
            "function_name": "negative",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "negative"
            ]
        },
        "nextafter": {
            "code": "tf.math.nextafter(x1,x2,name=None)",
            "function_name": "nextafter",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "nextafter"
            ]
        },
        "ndtri": {
            "code": "tf.math.ndtri(x,name=None)",
            "function_name": "ndtri",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "ndtri"
            ]
        },
        "multiplynonan": {
            "code": "tf.math.multiply_no_nan(x,y,name=None)",
            "function_name": "multiply_no_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "multiply_no_nan"
            ]
        },
        "logicalxor": {
            "code": "tf.math.logical_xor(x,y,name='LogicalXor')",
            "function_name": "logical_xor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_xor"
            ]
        },
        "logicaland": {
            "code": "tf.math.logical_and(x,y,name=None)",
            "function_name": "logical_and",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_and"
            ]
        },
        "logicalnot": {
            "code": "tf.math.logical_not(x,name=None)",
            "function_name": "logical_not",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_not"
            ]
        },
        "multiply": {
            "code": "tf.keras.layers.multiply(inputs,**kwargs)",
            "function_name": "multiply",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "multiply"
            ]
        },
        "logicalor": {
            "code": "tf.math.logical_or(x,y,name=None)",
            "function_name": "logical_or",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_or"
            ]
        },
        "logsigmoid": {
            "code": "tf.math.log_sigmoid(x,name=None)",
            "function_name": "log_sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "log_sigmoid"
            ]
        },
        "log": {
            "code": "tf.keras.backend.log(x)",
            "function_name": "log",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "log"
            ]
        },
        "logp": {
            "code": "tf.math.log1p(x,name=None)",
            "function_name": "log1p",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "log1p"
            ]
        },
        "lgamma": {
            "code": "tf.math.lgamma(x,name=None)",
            "function_name": "lgamma",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "lgamma"
            ]
        },
        "lessequal": {
            "code": "tf.keras.backend.less_equal(x,y)",
            "function_name": "less_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "less_equal"
            ]
        },
        "less": {
            "code": "tf.keras.backend.less(x,y)",
            "function_name": "less",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "less"
            ]
        },
        "lnormalize": {
            "code": "tf.keras.backend.l2_normalize(x,axis=None)",
            "function_name": "l2_normalize",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "l2_normalize"
            ]
        },
        "lbeta": {
            "code": "tf.math.lbeta(x,name=None)",
            "function_name": "lbeta",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "lbeta"
            ]
        },
        "isnondecreasing": {
            "code": "tf.math.is_non_decreasing(x,name=None)",
            "function_name": "is_non_decreasing",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_non_decreasing"
            ]
        },
        "isstrictlyincreasing": {
            "code": "tf.math.is_strictly_increasing(x,name=None)",
            "function_name": "is_strictly_increasing",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_strictly_increasing"
            ]
        },
        "isnan": {
            "code": "tf.math.is_nan(x,name=None)",
            "function_name": "is_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_nan"
            ]
        },
        "isfinite": {
            "code": "tf.math.is_finite(x,name=None)",
            "function_name": "is_finite",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_finite"
            ]
        },
        "isinf": {
            "code": "tf.math.is_inf(x,name=None)",
            "function_name": "is_inf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_inf"
            ]
        },
        "intopk": {
            "code": "tf.keras.backend.in_top_k(predictions,targets,k)",
            "function_name": "in_top_k",
            "args": [
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "in_top_k"
            ]
        },
        "igammac": {
            "code": "tf.math.igammac(a,x,name=None)",
            "function_name": "igammac",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "igammac"
            ]
        },
        "invertpermutation": {
            "code": "tf.math.invert_permutation(x,name=None)",
            "function_name": "invert_permutation",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "invert_permutation"
            ]
        },
        "greaterequal": {
            "code": "tf.keras.backend.greater_equal(x,y)",
            "function_name": "greater_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "greater_equal"
            ]
        },
        "imag": {
            "code": "tf.math.imag(input,name=None)",
            "function_name": "imag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "imag"
            ]
        },
        "greater": {
            "code": "tf.keras.backend.greater(x,y)",
            "function_name": "greater",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "greater"
            ]
        },
        "igamma": {
            "code": "tf.math.igamma(a,x,name=None)",
            "function_name": "igamma",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "igamma"
            ]
        },
        "floordiv": {
            "code": "tf.math.floordiv(x,y,name=None)",
            "function_name": "floordiv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "floordiv"
            ]
        },
        "floor": {
            "code": "tf.math.floor(x,name=None)",
            "function_name": "floor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "floor"
            ]
        },
        "expm": {
            "code": "tf.linalg.expm(input,name=None)",
            "function_name": "expm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "expm"
            ]
        },
        "floormod": {
            "code": "tf.math.floormod(x,y,name=None)",
            "function_name": "floormod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "floormod"
            ]
        },
        "exp": {
            "code": "tf.keras.backend.exp(x)",
            "function_name": "exp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "exp"
            ]
        },
        "erfc": {
            "code": "tf.math.erfc(x,name=None)",
            "function_name": "erfc",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "erfc"
            ]
        },
        "erfinv": {
            "code": "tf.math.erfinv(x,name=None)",
            "function_name": "erfinv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "erfinv"
            ]
        },
        "equal": {
            "code": "tf.keras.backend.equal(x,y)",
            "function_name": "equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "equal"
            ]
        },
        "dividenonan": {
            "code": "tf.math.divide_no_nan(x,y,name=None)",
            "function_name": "divide_no_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "divide_no_nan"
            ]
        },
        "erf": {
            "code": "tf.math.erf(x,name=None)",
            "function_name": "erf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "erf"
            ]
        },
        "divide": {
            "code": "tf.math.divide(x,y,name=None)",
            "function_name": "divide",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "divide"
            ]
        },
        "digamma": {
            "code": "tf.math.digamma(x,name=None)",
            "function_name": "digamma",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "digamma"
            ]
        },
        "cumulativelogsumexp": {
            "code": "tf.math.cumulative_logsumexp(x,axis=0,exclusive=False,reverse=False,name=None)",
            "function_name": "cumulative_logsumexp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "exclusive",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "reverse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "cumulative_logsumexp"
            ]
        },
        "cumsum": {
            "code": "tf.keras.backend.cumsum(x,axis=0)",
            "function_name": "cumsum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cumsum"
            ]
        },
        "cosh": {
            "code": "tf.math.cosh(x,name=None)",
            "function_name": "cosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "cosh"
            ]
        },
        "conj": {
            "code": "tf.math.conj(x,name=None)",
            "function_name": "conj",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "conj"
            ]
        },
        "confusionmatrix": {
            "code": "tf.math.confusion_matrix(labels,predictions,num_classes=None,weights=None,dtype=tf.dtypes.int32,name=None)",
            "function_name": "confusion_matrix",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "labels"
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "predictions"
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "numclasses"
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "confusion_matrix"
            ]
        },
        "countnonzero": {
            "code": "tf.math.count_nonzero(input,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None)",
            "function_name": "count_nonzero",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "count_nonzero"
            ]
        },
        "cumprod": {
            "code": "tf.keras.backend.cumprod(x,axis=0)",
            "function_name": "cumprod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cumprod"
            ]
        },
        "cos": {
            "code": "tf.keras.backend.cos(x)",
            "function_name": "cos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cos"
            ]
        },
        "ceil": {
            "code": "tf.math.ceil(x,name=None)",
            "function_name": "ceil",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "ceil"
            ]
        },
        "bincount": {
            "code": "tf.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32,name=None)",
            "function_name": "bincount",
            "args": [
                {
                    "name": "arr",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "weights",
                    "tfjs": null
                },
                {
                    "name": "minlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "minlength",
                    "tfjs": null
                },
                {
                    "name": "maxlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bincount"
            ]
        },
        "betainc": {
            "code": "tf.math.betainc(a,b,x,name=None)",
            "function_name": "betainc",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "betainc"
            ]
        },
        "besseli": {
            "code": "tf.math.bessel_i0(x,name=None)",
            "function_name": "bessel_i0",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bessel_i0"
            ]
        },
        "besselie": {
            "code": "tf.math.bessel_i0e(x,name=None)",
            "function_name": "bessel_i0e",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bessel_i0e"
            ]
        },
        "atan": {
            "code": "tf.math.atan(x,name=None)",
            "function_name": "atan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "atan"
            ]
        },
        "atanh": {
            "code": "tf.math.atanh(x,name=None)",
            "function_name": "atanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "atanh"
            ]
        },
        "asin": {
            "code": "tf.math.asin(x,name=None)",
            "function_name": "asin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "asin"
            ]
        },
        "argmax": {
            "code": "tf.keras.backend.argmax(x,axis=-1)",
            "function_name": "argmax",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "argmax"
            ]
        },
        "argmin": {
            "code": "tf.keras.backend.argmin(x,axis=-1)",
            "function_name": "argmin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "argmin"
            ]
        },
        "asinh": {
            "code": "tf.math.asinh(x,name=None)",
            "function_name": "asinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "asinh"
            ]
        },
        "angle": {
            "code": "tf.math.angle(input,name=None)",
            "function_name": "angle",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "angle"
            ]
        },
        "addn": {
            "code": "tf.math.add_n(inputs,name=None)",
            "function_name": "add_n",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "add_n"
            ]
        },
        "acosh": {
            "code": "tf.math.acosh(x,name=None)",
            "function_name": "acosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "acosh"
            ]
        },
        "acos": {
            "code": "tf.math.acos(x,name=None)",
            "function_name": "acos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "acos"
            ]
        },
        "accumulaten": {
            "code": "tf.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)",
            "function_name": "accumulate_n",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tensordtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "accumulate_n"
            ]
        },
        "abs": {
            "code": "tf.keras.backend.abs(x)",
            "function_name": "abs",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "abs"
            ]
        },
        "loaddelegate": {
            "code": "tf.lite.experimental.load_delegate(library,options=None)",
            "function_name": "load_delegate",
            "args": [
                {
                    "name": "library",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "options",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "lite",
                "experimental",
                "load_delegate"
            ]
        },
        "trace": {
            "code": "tf.autograph.trace(*args)",
            "function_name": "trace",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "trace"
            ]
        },
        "tridiagonalsolve": {
            "code": "tf.linalg.tridiagonal_solve(diagonals,rhs,diagonals_format='compact',transpose_rhs=False,conjugate_rhs=False,name=None,partial_pivoting=True)",
            "function_name": "tridiagonal_solve",
            "args": [
                {
                    "name": "diagonals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "diagonalsformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "transposerhs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "conjugaterhs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "partialpivoting",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tridiagonal_solve"
            ]
        },
        "tridiagonalmatmul": {
            "code": "tf.linalg.tridiagonal_matmul(diagonals,rhs,diagonals_format='compact',name=None)",
            "function_name": "tridiagonal_matmul",
            "args": [
                {
                    "name": "diagonals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "diagonalsformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tridiagonal_matmul"
            ]
        },
        "tensordiagpart": {
            "code": "tf.linalg.tensor_diag_part(input,name=None)",
            "function_name": "tensor_diag_part",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tensor_diag_part"
            ]
        },
        "triangularsolve": {
            "code": "tf.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)",
            "function_name": "triangular_solve",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjoint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "triangular_solve"
            ]
        },
        "tensordiag": {
            "code": "tf.linalg.tensor_diag(diagonal,name=None)",
            "function_name": "tensor_diag",
            "args": [
                {
                    "name": "diagonal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tensor_diag"
            ]
        },
        "sqrtm": {
            "code": "tf.linalg.sqrtm(input,name=None)",
            "function_name": "sqrtm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "sqrtm"
            ]
        },
        "svd": {
            "code": "tf.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)",
            "function_name": "svd",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fullmatrices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "computeuv",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "computeuv",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "svd"
            ]
        },
        "solve": {
            "code": "tf.linalg.solve(matrix,rhs,adjoint=False,name=None)",
            "function_name": "solve",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjoint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "solve"
            ]
        },
        "setdiag": {
            "code": "tf.linalg.set_diag(input,diagonal,name='set_diag',k=0)",
            "function_name": "set_diag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "diagonal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "set_diag"
            ]
        },
        "qr": {
            "code": "tf.linalg.qr(input,full_matrices=False,name=None)",
            "function_name": "qr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "fullmatrices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "fullmatrices"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "qr"
            ]
        },
        "slogdet": {
            "code": "tf.linalg.slogdet(input,name=None)",
            "function_name": "slogdet",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "slogdet"
            ]
        },
        "pinv": {
            "code": "tf.linalg.pinv(a,rcond=None,validate_args=False,name=None)",
            "function_name": "pinv",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rcond",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateargs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "pinv"
            ]
        },
        "matvec": {
            "code": "tf.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)",
            "function_name": "matvec",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "transposea",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjointa",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "aissparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bissparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matvec"
            ]
        },
        "matrixtranspose": {
            "code": "tf.linalg.matrix_transpose(a,name='matrix_transpose',conjugate=False)",
            "function_name": "matrix_transpose",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "conjugate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matrix_transpose"
            ]
        },
        "normalize": {
            "code": "tf.keras.utils.normalize(x,axis=-1,order=2)",
            "function_name": "normalize",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "order",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "normalize"
            ]
        },
        "matmul": {
            "code": "tf.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)",
            "function_name": "matmul",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "b"
                },
                {
                    "name": "transposea",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "transposea"
                },
                {
                    "name": "transposeb",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "transposeb"
                },
                {
                    "name": "adjointa",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjointb",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "aissparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bissparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matmul"
            ]
        },
        "matrixrank": {
            "code": "tf.linalg.matrix_rank(a,tol=None,validate_args=False,name=None)",
            "function_name": "matrix_rank",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tol",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "tol",
                    "tfjs": null
                },
                {
                    "name": "validateargs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matrix_rank"
            ]
        },
        "lu": {
            "code": "tf.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)",
            "function_name": "lu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputidxtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu"
            ]
        },
        "lureconstruct": {
            "code": "tf.linalg.lu_reconstruct(lower_upper,perm,validate_args=False,name=None)",
            "function_name": "lu_reconstruct",
            "args": [
                {
                    "name": "lowerupper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateargs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu_reconstruct"
            ]
        },
        "lusolve": {
            "code": "tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)",
            "function_name": "lu_solve",
            "args": [
                {
                    "name": "lowerupper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateargs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu_solve"
            ]
        },
        "lumatrixinverse": {
            "code": "tf.linalg.lu_matrix_inverse(lower_upper,perm,validate_args=False,name=None)",
            "function_name": "lu_matrix_inverse",
            "args": [
                {
                    "name": "lowerupper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "validateargs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu_matrix_inverse"
            ]
        },
        "logm": {
            "code": "tf.linalg.logm(input,name=None)",
            "function_name": "logm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "logm"
            ]
        },
        "lstsq": {
            "code": "tf.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)",
            "function_name": "lstsq",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lregularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fast",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lstsq"
            ]
        },
        "logdet": {
            "code": "tf.linalg.logdet(matrix,name=None)",
            "function_name": "logdet",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "logdet"
            ]
        },
        "inv": {
            "code": "tf.linalg.inv(input,adjoint=False,name=None)",
            "function_name": "inv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjoint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "inv"
            ]
        },
        "globalnorm": {
            "code": "tf.linalg.global_norm(t_list,name=None)",
            "function_name": "global_norm",
            "args": [
                {
                    "name": "tlist",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "global_norm"
            ]
        },
        "diagpart": {
            "code": "tf.linalg.diag_part(input,name='diag_part',k=0,padding_value=0)",
            "function_name": "diag_part",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddingvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "diag_part"
            ]
        },
        "eigh": {
            "code": "tf.linalg.eigh(tensor,name=None)",
            "function_name": "eigh",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "eigh"
            ]
        },
        "diag": {
            "code": "tf.linalg.diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0)",
            "function_name": "diag",
            "args": [
                {
                    "name": "diagonal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "diagonal",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numrows",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numcols",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddingvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "diag"
            ]
        },
        "eigvalsh": {
            "code": "tf.linalg.eigvalsh(tensor,name=None)",
            "function_name": "eigvalsh",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "eigvalsh"
            ]
        },
        "choleskysolve": {
            "code": "tf.linalg.cholesky_solve(chol,rhs,name=None)",
            "function_name": "cholesky_solve",
            "args": [
                {
                    "name": "chol",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "cholesky_solve"
            ]
        },
        "cholesky": {
            "code": "tf.linalg.cholesky(input,name=None)",
            "function_name": "cholesky",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "cholesky"
            ]
        },
        "det": {
            "code": "tf.linalg.det(input,name=None)",
            "function_name": "det",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "det"
            ]
        },
        "bandpart": {
            "code": "tf.linalg.band_part(input,num_lower,num_upper,name=None)",
            "function_name": "band_part",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numlower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "numlower"
                },
                {
                    "name": "numupper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "numupper"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "band_part"
            ]
        },
        "adjoint": {
            "code": "tf.linalg.adjoint(matrix,name=None)",
            "function_name": "adjoint",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "adjoint"
            ]
        },
        "serializekerasobject": {
            "code": "tf.keras.utils.serialize_keras_object(instance)",
            "function_name": "serialize_keras_object",
            "args": [
                {
                    "name": "instance",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "serialize_keras_object"
            ]
        },
        "tocategorical": {
            "code": "tf.keras.utils.to_categorical(y,num_classes=None,dtype='float32')",
            "function_name": "to_categorical",
            "args": [
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "to_categorical"
            ]
        },
        "registerkerasserializable": {
            "code": "tf.keras.utils.register_keras_serializable(package='Custom',name=None)",
            "function_name": "register_keras_serializable",
            "args": [
                {
                    "name": "package",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "register_keras_serializable"
            ]
        },
        "plotmodel": {
            "code": "tf.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96)",
            "function_name": "plot_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tofile",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "showshapes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "showlayernames",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rankdir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "expandnested",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dpi",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "plot_model"
            ]
        },
        "multigpumodel": {
            "code": "tf.keras.utils.multi_gpu_model(model,gpus,cpu_merge=True,cpu_relocation=False)",
            "function_name": "multi_gpu_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gpus",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cpumerge",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cpurelocation",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "multi_gpu_model"
            ]
        },
        "modeltodot": {
            "code": "tf.keras.utils.model_to_dot(model,show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,subgraph=False)",
            "function_name": "model_to_dot",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "showshapes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "showlayernames",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rankdir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "expandnested",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dpi",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "subgraph",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "model_to_dot"
            ]
        },
        "getsourceinputs": {
            "code": "tf.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)",
            "function_name": "get_source_inputs",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "layer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "nodeindex",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "get_source_inputs"
            ]
        },
        "getfile": {
            "code": "tf.keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)",
            "function_name": "get_file",
            "args": [
                {
                    "name": "fname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "origin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "untar",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mdhash",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filehash",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cachesubdir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashalgorithm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "extract",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "archiveformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cachedir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "get_file"
            ]
        },
        "getcustomobjects": {
            "code": "tf.keras.utils.get_custom_objects()",
            "function_name": "get_custom_objects",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "get_custom_objects"
            ]
        },
        "deserializekerasobject": {
            "code": "tf.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')",
            "function_name": "deserialize_keras_object",
            "args": [
                {
                    "name": "identifier",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "moduleobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "printablemodulename",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "deserialize_keras_object"
            ]
        },
        "customobjectscope": {
            "code": "tf.keras.utils.custom_object_scope(*args)",
            "function_name": "custom_object_scope",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "custom_object_scope"
            ]
        },
        "convertallkernelsinmodel": {
            "code": "tf.keras.utils.convert_all_kernels_in_model(model)",
            "function_name": "convert_all_kernels_in_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "convert_all_kernels_in_model"
            ]
        },
        "serialize": {
            "code": "serialize(value)",
            "function_name": "serialize",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "serialize"
            ]
        },
        "l": {
            "code": "tf.keras.regularizers.l1(l=0.01)",
            "function_name": "l1",
            "args": [
                {
                    "name": "l",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "regularizers",
                "l1"
            ]
        },
        "ll": {
            "code": "tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)",
            "function_name": "l1_l2",
            "args": [
                {
                    "name": "l",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "l",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "regularizers",
                "l1_l2"
            ]
        },
        "get": {
            "code": "tf.keras.activations.get(identifier)",
            "function_name": "get",
            "args": [
                {
                    "name": "identifier",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "get"
            ]
        },
        "tokenizerfromjson": {
            "code": "tf.keras.preprocessing.text.tokenizer_from_json(json_string)",
            "function_name": "tokenizer_from_json",
            "args": [
                {
                    "name": "jsonstring",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "tokenizer_from_json"
            ]
        },
        "onehot": {
            "code": "tf.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)",
            "function_name": "one_hot",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "indices"
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "depth"
                },
                {
                    "name": "onvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "onvalue"
                },
                {
                    "name": "offvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "offvalue"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "one_hot"
            ]
        },
        "deserialize": {
            "code": "tf.keras.activations.deserialize(name,custom_objects=None)",
            "function_name": "deserialize",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "deserialize"
            ]
        },
        "texttowordsequence": {
            "code": "tf.keras.preprocessing.text.text_to_word_sequence(text,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')",
            "function_name": "text_to_word_sequence",
            "args": [
                {
                    "name": "text",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lt",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "split",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "text_to_word_sequence"
            ]
        },
        "hashingtrick": {
            "code": "tf.keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')",
            "function_name": "hashing_trick",
            "args": [
                {
                    "name": "text",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashfunction",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filters",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lt",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "split",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "hashing_trick"
            ]
        },
        "skipgrams": {
            "code": "tf.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)",
            "function_name": "skipgrams",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularysize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "windowsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "negativesamples",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "categorical",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "samplingtable",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "skipgrams"
            ]
        },
        "padsequences": {
            "code": "tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)",
            "function_name": "pad_sequences",
            "args": [
                {
                    "name": "sequences",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxlen",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "truncating",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "pad_sequences"
            ]
        },
        "makesamplingtable": {
            "code": "tf.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)",
            "function_name": "make_sampling_table",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "samplingfactor",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "make_sampling_table"
            ]
        },
        "saveimg": {
            "code": "tf.keras.preprocessing.image.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)",
            "function_name": "save_img",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fileformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "save_img"
            ]
        },
        "randomshift": {
            "code": "tf.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "wrg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hrg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fillmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "interpolationorder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_shift"
            ]
        },
        "randomzoom": {
            "code": "tf.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_zoom",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "zoomrange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fillmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "interpolationorder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_zoom"
            ]
        },
        "randombrightness": {
            "code": "tf.image.random_brightness(image,max_delta,seed=None)",
            "function_name": "random_brightness",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxdelta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_brightness"
            ]
        },
        "randomrotation": {
            "code": "tf.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_rotation",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fillmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "interpolationorder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_rotation"
            ]
        },
        "randomshear": {
            "code": "tf.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_shear",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "intensity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fillmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "interpolationorder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_shear"
            ]
        },
        "randomchannelshift": {
            "code": "tf.keras.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)",
            "function_name": "random_channel_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "intensityrange",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_channel_shift"
            ]
        },
        "loadimg": {
            "code": "tf.keras.preprocessing.image.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')",
            "function_name": "load_img",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "grayscale",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colormode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "load_img"
            ]
        },
        "imgtoarray": {
            "code": "tf.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)",
            "function_name": "img_to_array",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "img_to_array"
            ]
        },
        "applychannelshift": {
            "code": "tf.keras.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)",
            "function_name": "apply_channel_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "intensity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "apply_channel_shift"
            ]
        },
        "arraytoimg": {
            "code": "tf.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True,dtype=None)",
            "function_name": "array_to_img",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "array_to_img"
            ]
        },
        "applyaffinetransform": {
            "code": "tf.keras.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=0,col_axis=1,channel_axis=2,fill_mode='nearest',cval=0.0,order=1)",
            "function_name": "apply_affine_transform",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "theta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tx",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ty",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shear",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "zx",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "zy",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channelaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fillmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "order",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "apply_affine_transform"
            ]
        },
        "applybrightnessshift": {
            "code": "tf.keras.preprocessing.image.apply_brightness_shift(x,brightness)",
            "function_name": "apply_brightness_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "brightness",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "apply_brightness_shift"
            ]
        },
        "savemodel": {
            "code": "tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None)",
            "function_name": "save_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filepath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "overwrite",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "includeoptimizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "saveformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "signatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "options",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "save_model"
            ]
        },
        "modelfromyaml": {
            "code": "tf.keras.models.model_from_yaml(yaml_string,custom_objects=None)",
            "function_name": "model_from_yaml",
            "args": [
                {
                    "name": "yamlstring",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "model_from_yaml"
            ]
        },
        "modelfromjson": {
            "code": "tf.keras.models.model_from_json(json_string,custom_objects=None)",
            "function_name": "model_from_json",
            "args": [
                {
                    "name": "jsonstring",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "model_from_json"
            ]
        },
        "loadmodel": {
            "code": "tf.keras.models.load_model(filepath,custom_objects=None,compile=True)",
            "function_name": "load_model",
            "args": [
                {
                    "name": "filepath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "compile",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "load_model"
            ]
        },
        "modelfromconfig": {
            "code": "tf.keras.models.model_from_config(config,custom_objects=None)",
            "function_name": "model_from_config",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "model_from_config"
            ]
        },
        "clonemodel": {
            "code": "tf.keras.models.clone_model(model,input_tensors=None,clone_function=None)",
            "function_name": "clone_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputtensors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "clonefunction",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "clone_model"
            ]
        },
        "setpolicy": {
            "code": "tf.keras.mixed_precision.experimental.set_policy(policy)",
            "function_name": "set_policy",
            "args": [
                {
                    "name": "policy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "mixed_precision",
                "experimental",
                "set_policy"
            ]
        },
        "globalpolicy": {
            "code": "tf.keras.mixed_precision.experimental.global_policy()",
            "function_name": "global_policy",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "mixed_precision",
                "experimental",
                "global_policy"
            ]
        },
        "topkcategoricalaccuracy": {
            "code": "tf.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)",
            "function_name": "top_k_categorical_accuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "top_k_categorical_accuracy"
            ]
        },
        "sparsetopkcategoricalaccuracy": {
            "code": "tf.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)",
            "function_name": "sparse_top_k_categorical_accuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "sparse_top_k_categorical_accuracy"
            ]
        },
        "sparsecategoricalaccuracy": {
            "code": "tf.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)",
            "function_name": "sparse_categorical_accuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "ytrue"
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "ypred"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "sparse_categorical_accuracy"
            ]
        },
        "categoricalaccuracy": {
            "code": "tf.keras.metrics.categorical_accuracy(y_true,y_pred)",
            "function_name": "categorical_accuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "ytrue"
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "ypred"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "categorical_accuracy"
            ]
        },
        "binaryaccuracy": {
            "code": "tf.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)",
            "function_name": "binary_accuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "ytrue"
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "ypred"
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "binary_accuracy"
            ]
        },
        "logcosh": {
            "code": "tf.keras.losses.logcosh(y_true,y_pred)",
            "function_name": "logcosh",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "logcosh"
            ]
        },
        "cosinesimilarity": {
            "code": "tf.keras.losses.cosine_similarity(y_true,y_pred,axis=-1)",
            "function_name": "cosine_similarity",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "cosine_similarity"
            ]
        },
        "categoricalhinge": {
            "code": "tf.keras.losses.categorical_hinge(y_true,y_pred)",
            "function_name": "categorical_hinge",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "categorical_hinge"
            ]
        },
        "dot": {
            "code": "tf.keras.backend.dot(x,y)",
            "function_name": "dot",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "dot"
            ]
        },
        "concatenate": {
            "code": "tf.keras.backend.concatenate(tensors,axis=-1)",
            "function_name": "concatenate",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "concatenate"
            ]
        },
        "average": {
            "code": "tf.keras.layers.average(inputs,**kwargs)",
            "function_name": "average",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "average"
            ]
        },
        "lecununiform": {
            "code": "tf.keras.initializers.lecun_uniform(seed=None)",
            "function_name": "lecun_uniform",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "lecun_uniform"
            ]
        },
        "lecunnormal": {
            "code": "tf.keras.initializers.lecun_normal(seed=None)",
            "function_name": "lecun_normal",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "lecun_normal"
            ]
        },
        "heuniform": {
            "code": "tf.keras.initializers.he_uniform(seed=None)",
            "function_name": "he_uniform",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "he_uniform"
            ]
        },
        "henormal": {
            "code": "tf.keras.initializers.he_normal(seed=None)",
            "function_name": "he_normal",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "he_normal"
            ]
        },
        "terminatekerasmultiprocessingpools": {
            "code": "tf.keras.experimental.terminate_keras_multiprocessing_pools(grace_period=0.1,use_sigkill=False)",
            "function_name": "terminate_keras_multiprocessing_pools",
            "args": [
                {
                    "name": "graceperiod",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "usesigkill",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "terminate_keras_multiprocessing_pools"
            ]
        },
        "modeltoestimator": {
            "code": "tf.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint')",
            "function_name": "model_to_estimator",
            "args": [
                {
                    "name": "kerasmodel",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kerasmodelpath",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "customobjects",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "modeldir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "checkpointformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "estimator",
                "model_to_estimator"
            ]
        },
        "loaddata": {
            "code": "tf.keras.datasets.cifar100.load_data(label_mode='fine')",
            "function_name": "load_data",
            "args": [
                {
                    "name": "labelmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "datasets",
                "cifar100",
                "load_data"
            ]
        },
        "getwordindex": {
            "code": "tf.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')",
            "function_name": "get_word_index",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "datasets",
                "imdb",
                "get_word_index"
            ]
        },
        "variable": {
            "code": "tf.keras.backend.variable(value,dtype=None,name=None,constraint=None)",
            "function_name": "variable",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "name"
                },
                {
                    "name": "constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "variable"
            ]
        },
        "zeroslike": {
            "code": "tf.zeros_like(input,dtype=None,name=None)",
            "function_name": "zeros_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "zeros_like"
            ]
        },
        "zeros": {
            "code": "tf.zeros(shape,dtype=tf.dtypes.float32,name=None)",
            "function_name": "zeros",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "zeros"
            ]
        },
        "var": {
            "code": "tf.keras.backend.var(x,axis=None,keepdims=False)",
            "function_name": "var",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "var"
            ]
        },
        "updatesub": {
            "code": "tf.keras.backend.update_sub(x,decrement)",
            "function_name": "update_sub",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "decrement",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "update_sub"
            ]
        },
        "updateadd": {
            "code": "tf.keras.backend.update_add(x,increment)",
            "function_name": "update_add",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "increment",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "update_add"
            ]
        },
        "update": {
            "code": "tf.keras.backend.update(x,new_x)",
            "function_name": "update",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "newx",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "update"
            ]
        },
        "sum": {
            "code": "tf.keras.backend.sum(x,axis=None,keepdims=False)",
            "function_name": "sum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sum"
            ]
        },
        "tile": {
            "code": "tf.tile(input,multiples,name=None)",
            "function_name": "tile",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "multiples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tile"
            ]
        },
        "temporalpadding": {
            "code": "tf.keras.backend.temporal_padding(x,padding=(1,1))",
            "function_name": "temporal_padding",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "temporal_padding"
            ]
        },
        "switch": {
            "code": "tf.keras.backend.switch(condition,then_expression,else_expression)",
            "function_name": "switch",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "thenexpression",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "elseexpression",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "switch"
            ]
        },
        "stopgradient": {
            "code": "tf.stop_gradient(input,name=None)",
            "function_name": "stop_gradient",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "stop_gradient"
            ]
        },
        "std": {
            "code": "tf.keras.backend.std(x,axis=None,keepdims=False)",
            "function_name": "std",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "std"
            ]
        },
        "squeeze": {
            "code": "tf.squeeze(input,axis=None,name=None)",
            "function_name": "squeeze",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "squeeze"
            ]
        },
        "spatialdpadding": {
            "code": "tf.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)",
            "function_name": "spatial_3d_padding",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "spatial_3d_padding"
            ]
        },
        "sparsecategoricalcrossentropy": {
            "code": "tf.keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)",
            "function_name": "sparse_categorical_crossentropy",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "output",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fromlogits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sparse_categorical_crossentropy"
            ]
        },
        "shape": {
            "code": "tf.shape(input,out_type=tf.dtypes.int32,name=None)",
            "function_name": "shape",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "shape"
            ]
        },
        "setvalue": {
            "code": "tf.keras.backend.set_value(x,value)",
            "function_name": "set_value",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_value"
            ]
        },
        "setlearningphase": {
            "code": "tf.keras.backend.set_learning_phase(value)",
            "function_name": "set_learning_phase",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_learning_phase"
            ]
        },
        "setfloatx": {
            "code": "tf.keras.backend.set_floatx(value)",
            "function_name": "set_floatx",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_floatx"
            ]
        },
        "setimagedataformat": {
            "code": "tf.keras.backend.set_image_data_format(data_format)",
            "function_name": "set_image_data_format",
            "args": [
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_image_data_format"
            ]
        },
        "setepsilon": {
            "code": "tf.keras.backend.set_epsilon(value)",
            "function_name": "set_epsilon",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_epsilon"
            ]
        },
        "rnn": {
            "code": "tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)",
            "function_name": "rnn",
            "args": [
                {
                    "name": "stepfunction",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initialstates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gobackwards",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "constants",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "unroll",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "timemajor",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "zerooutputformask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "rnn"
            ]
        },
        "reverse": {
            "code": "tf.reverse(tensor,axis,name=None)",
            "function_name": "reverse",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "reverse"
            ]
        },
        "resizevolumes": {
            "code": "tf.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)",
            "function_name": "resize_volumes",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "depthfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "heightfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "widthfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "resize_volumes"
            ]
        },
        "repeat": {
            "code": "tf.repeat(input,repeats,axis=None,name=None)",
            "function_name": "repeat",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "repeats",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "repeat"
            ]
        },
        "resetuids": {
            "code": "tf.keras.backend.reset_uids()",
            "function_name": "reset_uids",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "reset_uids"
            ]
        },
        "repeatelements": {
            "code": "tf.keras.backend.repeat_elements(x,rep,axis)",
            "function_name": "repeat_elements",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "repeat_elements"
            ]
        },
        "randomuniform": {
            "code": "tf.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)",
            "function_name": "random_uniform",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_uniform"
            ]
        },
        "resizeimages": {
            "code": "tf.keras.backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')",
            "function_name": "resize_images",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "heightfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "widthfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "resize_images"
            ]
        },
        "randomuniformvariable": {
            "code": "tf.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)",
            "function_name": "random_uniform_variable",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "low",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "high",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_uniform_variable"
            ]
        },
        "randomnormalvariable": {
            "code": "tf.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)",
            "function_name": "random_normal_variable",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_normal_variable"
            ]
        },
        "printtensor": {
            "code": "tf.keras.backend.print_tensor(x,message='')",
            "function_name": "print_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "print_tensor"
            ]
        },
        "randombinomial": {
            "code": "tf.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)",
            "function_name": "random_binomial",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_binomial"
            ]
        },
        "poold": {
            "code": "tf.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')",
            "function_name": "pool2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "poolsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "poolmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "pool2d"
            ]
        },
        "randomnormal": {
            "code": "tf.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)",
            "function_name": "random_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_normal"
            ]
        },
        "prod": {
            "code": "tf.keras.backend.prod(x,axis=None,keepdims=False)",
            "function_name": "prod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "prod"
            ]
        },
        "placeholder": {
            "code": "tf.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,ragged=False)",
            "function_name": "placeholder",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ndim",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ragged",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "placeholder"
            ]
        },
        "ones": {
            "code": "tf.ones(shape,dtype=tf.dtypes.float32,name=None)",
            "function_name": "ones",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ones"
            ]
        },
        "permutedimensions": {
            "code": "tf.keras.backend.permute_dimensions(x,pattern)",
            "function_name": "permute_dimensions",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "permute_dimensions"
            ]
        },
        "namescope": {
            "code": "tf.keras.backend.name_scope(name)",
            "function_name": "name_scope",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "name_scope"
            ]
        },
        "normalizebatchintraining": {
            "code": "tf.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)",
            "function_name": "normalize_batch_in_training",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "reductionaxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "normalize_batch_in_training"
            ]
        },
        "ndim": {
            "code": "tf.keras.backend.ndim(x)",
            "function_name": "ndim",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ndim"
            ]
        },
        "movingaverageupdate": {
            "code": "tf.keras.backend.moving_average_update(x,value,momentum)",
            "function_name": "moving_average_update",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "moving_average_update"
            ]
        },
        "oneslike": {
            "code": "tf.ones_like(input,dtype=None,name=None)",
            "function_name": "ones_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ones_like"
            ]
        },
        "min": {
            "code": "tf.keras.backend.min(x,axis=None,keepdims=False)",
            "function_name": "min",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "min"
            ]
        },
        "mean": {
            "code": "tf.keras.backend.mean(x,axis=None,keepdims=False)",
            "function_name": "mean",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "mean"
            ]
        },
        "mapfn": {
            "code": "tf.map_fn(fn,elems,dtype=None,parallel_iterations=None,back_prop=True,swap_memory=False,infer_shape=True,name=None)",
            "function_name": "map_fn",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paralleliterations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "backprop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "swapmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "infershape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "map_fn"
            ]
        },
        "max": {
            "code": "tf.keras.backend.max(x,axis=None,keepdims=False)",
            "function_name": "max",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "max"
            ]
        },
        "localconvd": {
            "code": "tf.keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)",
            "function_name": "local_conv1d",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kernelsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "local_conv1d"
            ]
        },
        "learningphase": {
            "code": "tf.keras.backend.learning_phase()",
            "function_name": "learning_phase",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "learning_phase"
            ]
        },
        "manualvariableinitialization": {
            "code": "tf.keras.backend.manual_variable_initialization(value)",
            "function_name": "manual_variable_initialization",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "manual_variable_initialization"
            ]
        },
        "iskerastensor": {
            "code": "tf.keras.backend.is_keras_tensor(x)",
            "function_name": "is_keras_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "is_keras_tensor"
            ]
        },
        "issparse": {
            "code": "tf.keras.backend.is_sparse(tensor)",
            "function_name": "is_sparse",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "is_sparse"
            ]
        },
        "intestphase": {
            "code": "tf.keras.backend.in_test_phase(x,alt,training=None)",
            "function_name": "in_test_phase",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "in_test_phase"
            ]
        },
        "intrainphase": {
            "code": "tf.keras.backend.in_train_phase(x,alt,training=None)",
            "function_name": "in_train_phase",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "in_train_phase"
            ]
        },
        "intshape": {
            "code": "tf.keras.backend.int_shape(x)",
            "function_name": "int_shape",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "int_shape"
            ]
        },
        "imagedataformat": {
            "code": "tf.keras.backend.image_data_format()",
            "function_name": "image_data_format",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "image_data_format"
            ]
        },
        "hardsigmoid": {
            "code": "tf.keras.activations.hard_sigmoid(x)",
            "function_name": "hard_sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "hard_sigmoid"
            ]
        },
        "foldr": {
            "code": "tf.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)",
            "function_name": "foldr",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paralleliterations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "backprop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "swapmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "foldr"
            ]
        },
        "getuid": {
            "code": "tf.keras.backend.get_uid(prefix='')",
            "function_name": "get_uid",
            "args": [
                {
                    "name": "prefix",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "get_uid"
            ]
        },
        "foldl": {
            "code": "tf.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)",
            "function_name": "foldl",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paralleliterations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "backprop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "swapmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "foldl"
            ]
        },
        "function": {
            "code": "tf.function(func=None,input_signature=None,autograph=True,experimental_implements=None,experimental_autograph_options=None,experimental_relax_shapes=False,experimental_compile=None)",
            "function_name": "function",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputsignature",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "autograph",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "experimentalimplements",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "experimentalautographoptions",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "experimentalrelaxshapes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "experimentalcompile",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "function"
            ]
        },
        "floatx": {
            "code": "tf.keras.backend.floatx()",
            "function_name": "floatx",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "floatx"
            ]
        },
        "getvalue": {
            "code": "tf.keras.backend.get_value(x)",
            "function_name": "get_value",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "get_value"
            ]
        },
        "eval": {
            "code": "tf.keras.backend.eval(x)",
            "function_name": "eval",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "eval"
            ]
        },
        "dtype": {
            "code": "tf.keras.backend.dtype(x)",
            "function_name": "dtype",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "dtype"
            ]
        },
        "epsilon": {
            "code": "tf.keras.backend.epsilon()",
            "function_name": "epsilon",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "epsilon"
            ]
        },
        "ctclabeldensetosparse": {
            "code": "tf.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)",
            "function_name": "ctc_label_dense_to_sparse",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labellengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ctc_label_dense_to_sparse"
            ]
        },
        "ctcdecode": {
            "code": "tf.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)",
            "function_name": "ctc_decode",
            "args": [
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "greedy",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "beamwidth",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "toppaths",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ctc_decode"
            ]
        },
        "ctcbatchcost": {
            "code": "tf.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)",
            "function_name": "ctc_batch_cost",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labellength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ctc_batch_cost"
            ]
        },
        "countparams": {
            "code": "tf.keras.backend.count_params(x)",
            "function_name": "count_params",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "count_params"
            ]
        },
        "categoricalcrossentropy": {
            "code": "tf.keras.backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)",
            "function_name": "categorical_crossentropy",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "output",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fromlogits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "categorical_crossentropy"
            ]
        },
        "clip": {
            "code": "tf.keras.backend.clip(x,min_value,max_value)",
            "function_name": "clip",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "clip"
            ]
        },
        "casttofloatx": {
            "code": "tf.keras.backend.cast_to_floatx(x)",
            "function_name": "cast_to_floatx",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cast_to_floatx"
            ]
        },
        "cast": {
            "code": "tf.cast(x,dtype,name=None)",
            "function_name": "cast",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "cast"
            ]
        },
        "clearsession": {
            "code": "tf.keras.backend.clear_session()",
            "function_name": "clear_session",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "clear_session"
            ]
        },
        "batchsetvalue": {
            "code": "tf.keras.backend.batch_set_value(tuples)",
            "function_name": "batch_set_value",
            "args": [
                {
                    "name": "tuples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_set_value"
            ]
        },
        "binarycrossentropy": {
            "code": "tf.keras.backend.binary_crossentropy(target,output,from_logits=False)",
            "function_name": "binary_crossentropy",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "output",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fromlogits",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "binary_crossentropy"
            ]
        },
        "batchgetvalue": {
            "code": "tf.keras.backend.batch_get_value(tensors)",
            "function_name": "batch_get_value",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_get_value"
            ]
        },
        "batchdot": {
            "code": "tf.keras.backend.batch_dot(x,y,axes=None)",
            "function_name": "batch_dot",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_dot"
            ]
        },
        "batchflatten": {
            "code": "tf.keras.backend.batch_flatten(x)",
            "function_name": "batch_flatten",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_flatten"
            ]
        },
        "any": {
            "code": "tf.keras.backend.any(x,axis=None,keepdims=False)",
            "function_name": "any",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "any"
            ]
        },
        "all": {
            "code": "tf.keras.backend.all(x,axis=None,keepdims=False)",
            "function_name": "all",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "all"
            ]
        },
        "backend": {
            "code": "tf.keras.backend.backend()",
            "function_name": "backend",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "backend"
            ]
        },
        "arange": {
            "code": "tf.keras.backend.arange(start,stop=None,step=1,dtype='int32')",
            "function_name": "arange",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tfjs": null
                },
                {
                    "name": "stop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "step",
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "arange"
            ]
        },
        "preprocessinput": {
            "code": "tf.keras.applications.densenet.preprocess_input(*args,**kwargs)",
            "function_name": "preprocess_input",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "densenet",
                "preprocess_input"
            ]
        },
        "decodepredictions": {
            "code": "tf.keras.applications.densenet.decode_predictions(*args,**kwargs)",
            "function_name": "decode_predictions",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "densenet",
                "decode_predictions"
            ]
        },
        "exponential": {
            "code": "Exponential(rate)=Gamma(concentration=1.,rate)",
            "function_name": "Exponential",
            "args": [
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "Exponential"
            ]
        },
        "linear": {
            "code": "tf.keras.activations.linear(x)",
            "function_name": "linear",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "linear"
            ]
        },
        "walk": {
            "code": "tf.io.gfile.walk(top,topdown=True,onerror=None)",
            "function_name": "walk",
            "args": [
                {
                    "name": "top",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "topdown",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "onerror",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "walk"
            ]
        },
        "mkdir": {
            "code": "tf.io.gfile.mkdir(path)",
            "function_name": "mkdir",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "mkdir"
            ]
        },
        "rmtree": {
            "code": "tf.io.gfile.rmtree(path)",
            "function_name": "rmtree",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "rmtree"
            ]
        },
        "makedirs": {
            "code": "tf.io.gfile.makedirs(path)",
            "function_name": "makedirs",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "makedirs"
            ]
        },
        "remove": {
            "code": "tf.io.gfile.remove(path)",
            "function_name": "remove",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "remove"
            ]
        },
        "stat": {
            "code": "tf.io.gfile.stat(path)",
            "function_name": "stat",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "stat"
            ]
        },
        "rename": {
            "code": "tf.io.gfile.rename(src,dst,overwrite=False)",
            "function_name": "rename",
            "args": [
                {
                    "name": "src",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dst",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "overwrite",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "rename"
            ]
        },
        "listdir": {
            "code": "tf.io.gfile.listdir(path)",
            "function_name": "listdir",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "listdir"
            ]
        },
        "isdir": {
            "code": "tf.io.gfile.isdir(path)",
            "function_name": "isdir",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "isdir"
            ]
        },
        "glob": {
            "code": "tf.io.gfile.glob(pattern)",
            "function_name": "glob",
            "args": [
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "glob"
            ]
        },
        "copy": {
            "code": "tf.io.gfile.copy(src,dst,overwrite=False)",
            "function_name": "copy",
            "args": [
                {
                    "name": "src",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dst",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "overwrite",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "copy"
            ]
        },
        "writegraph": {
            "code": "tf.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)",
            "function_name": "write_graph",
            "args": [
                {
                    "name": "graphorgraphdef",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "astext",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "write_graph"
            ]
        },
        "exists": {
            "code": "tf.io.gfile.exists(path)",
            "function_name": "exists",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "exists"
            ]
        },
        "writefile": {
            "code": "tf.io.write_file(filename,contents,name=None)",
            "function_name": "write_file",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "write_file"
            ]
        },
        "serializemanysparse": {
            "code": "tf.io.serialize_many_sparse(sp_input,out_type=tf.dtypes.string,name=None)",
            "function_name": "serialize_many_sparse",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "serialize_many_sparse"
            ]
        },
        "serializetensor": {
            "code": "tf.io.serialize_tensor(tensor,name=None)",
            "function_name": "serialize_tensor",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "serialize_tensor"
            ]
        },
        "sparsetensor": {
            "code": "SparseTensor(indices=[[3,1],[20,0]],values=[0.5,-1.0]dense_shape=[100,3])",
            "function_name": "SparseTensor",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "values",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "denseshape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "SparseTensor"
            ]
        },
        "serializesparse": {
            "code": "tf.io.serialize_sparse(sp_input,out_type=tf.dtypes.string,name=None)",
            "function_name": "serialize_sparse",
            "args": [
                {
                    "name": "spinput",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "serialize_sparse"
            ]
        },
        "readfile": {
            "code": "tf.io.read_file(filename,name=None)",
            "function_name": "read_file",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "read_file"
            ]
        },
        "parsesingleexample": {
            "code": "tf.io.parse_single_example(serialized,features,example_names=None,name=None)",
            "function_name": "parse_single_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "examplenames",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_single_example"
            ]
        },
        "parsetensor": {
            "code": "tf.io.parse_tensor(serialized,out_type,name=None)",
            "function_name": "parse_tensor",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_tensor"
            ]
        },
        "parsesequenceexample": {
            "code": "tf.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)",
            "function_name": "parse_sequence_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "contextfeatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sequencefeatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "examplenames",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_sequence_example"
            ]
        },
        "parsesinglesequenceexample": {
            "code": "tf.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)",
            "function_name": "parse_single_sequence_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "contextfeatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sequencefeatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "examplename",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_single_sequence_example"
            ]
        },
        "parseexample": {
            "code": "tf.io.parse_example(serialized,features,example_names=None,name=None)",
            "function_name": "parse_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "examplenames",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_example"
            ]
        },
        "matchfilenamesonce": {
            "code": "tf.io.match_filenames_once(pattern,name=None)",
            "function_name": "match_filenames_once",
            "args": [
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "match_filenames_once"
            ]
        },
        "isjpeg": {
            "code": "tf.io.is_jpeg(contents,name=None)",
            "function_name": "is_jpeg",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "is_jpeg"
            ]
        },
        "matchingfiles": {
            "code": "tf.io.matching_files(pattern,name=None)",
            "function_name": "matching_files",
            "args": [
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "matching_files"
            ]
        },
        "extractjpegshape": {
            "code": "tf.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)",
            "function_name": "extract_jpeg_shape",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "extract_jpeg_shape"
            ]
        },
        "encodeproto": {
            "code": "tf.io.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)",
            "function_name": "encode_proto",
            "args": [
                {
                    "name": "sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fieldnames",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "messagetype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "descriptorsource",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "encode_proto"
            ]
        },
        "encodejpeg": {
            "code": "tf.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)",
            "function_name": "encode_jpeg",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "quality",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "progressive",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "optimizesize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "chromadownsampling",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "densityunit",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "xdensity",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ydensity",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "xmpmetadata",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "encode_jpeg"
            ]
        },
        "encodebase": {
            "code": "tf.io.encode_base64(input,pad=False,name=None)",
            "function_name": "encode_base64",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pad",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "encode_base64"
            ]
        },
        "deserializemanysparse": {
            "code": "tf.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)",
            "function_name": "deserialize_many_sparse",
            "args": [
                {
                    "name": "serializedsparse",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rank",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "deserialize_many_sparse"
            ]
        },
        "decoderaw": {
            "code": "tf.io.decode_raw(input_bytes,out_type,little_endian=True,fixed_length=None,name=None)",
            "function_name": "decode_raw",
            "args": [
                {
                    "name": "inputbytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "littleendian",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fixedlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_raw"
            ]
        },
        "decodepng": {
            "code": "tf.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)",
            "function_name": "decode_png",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_png"
            ]
        },
        "decodejsonexample": {
            "code": "tf.io.decode_json_example(json_examples,name=None)",
            "function_name": "decode_json_example",
            "args": [
                {
                    "name": "jsonexamples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_json_example"
            ]
        },
        "decodeproto": {
            "code": "tf.io.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)",
            "function_name": "decode_proto",
            "args": [
                {
                    "name": "bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "messagetype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fieldnames",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outputtypes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "descriptorsource",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "messageformat",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sanitize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_proto"
            ]
        },
        "decodeimage": {
            "code": "tf.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)",
            "function_name": "decode_image",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "expandanimations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_image"
            ]
        },
        "decodejpeg": {
            "code": "tf.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)",
            "function_name": "decode_jpeg",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ratio",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fancyupscaling",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tryrecovertruncated",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "acceptablefraction",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dctmethod",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_jpeg"
            ]
        },
        "decodegif": {
            "code": "tf.io.decode_gif(contents,name=None)",
            "function_name": "decode_gif",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_gif"
            ]
        },
        "decodecsv": {
            "code": "tf.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,name=None)",
            "function_name": "decode_csv",
            "args": [
                {
                    "name": "records",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "recorddefaults",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fielddelim",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "usequotedelim",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "navalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "selectcols",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_csv"
            ]
        },
        "decodebmp": {
            "code": "tf.io.decode_bmp(contents,channels=0,name=None)",
            "function_name": "decode_bmp",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_bmp"
            ]
        },
        "decodebase": {
            "code": "tf.io.decode_base64(input,name=None)",
            "function_name": "decode_base64",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_base64"
            ]
        },
        "decodeandcropjpeg": {
            "code": "tf.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)",
            "function_name": "decode_and_crop_jpeg",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cropwindow",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ratio",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fancyupscaling",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tryrecovertruncated",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "acceptablefraction",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dctmethod",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_and_crop_jpeg"
            ]
        },
        "decodecompressed": {
            "code": "tf.io.decode_compressed(bytes,compression_type='',name=None)",
            "function_name": "decode_compressed",
            "args": [
                {
                    "name": "bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "compressiontype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_compressed"
            ]
        },
        "yiqtorgb": {
            "code": "tf.image.yiq_to_rgb(images)",
            "function_name": "yiq_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "yiq_to_rgb"
            ]
        },
        "yuvtorgb": {
            "code": "tf.image.yuv_to_rgb(images)",
            "function_name": "yuv_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "yuv_to_rgb"
            ]
        },
        "totalvariation": {
            "code": "tf.image.total_variation(images,name=None)",
            "function_name": "total_variation",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "total_variation"
            ]
        },
        "ssimmultiscale": {
            "code": "tf.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)",
            "function_name": "ssim_multiscale",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxval",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "powerfactors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filtersigma",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "ssim_multiscale"
            ]
        },
        "rot": {
            "code": "tf.image.rot90(image,k=1,name=None)",
            "function_name": "rot90",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "k",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rot90"
            ]
        },
        "rgbtoyuv": {
            "code": "tf.image.rgb_to_yuv(images)",
            "function_name": "rgb_to_yuv",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_yuv"
            ]
        },
        "ssim": {
            "code": "tf.image.ssim(img1,img2,max_val,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)",
            "function_name": "ssim",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxval",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "filtersigma",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "ssim"
            ]
        },
        "sobeledges": {
            "code": "tf.image.sobel_edges(image)",
            "function_name": "sobel_edges",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "sobel_edges"
            ]
        },
        "sampledistortedboundingbox": {
            "code": "tf.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=0,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)",
            "function_name": "sample_distorted_bounding_box",
            "args": [
                {
                    "name": "imagesize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "boundingboxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minobjectcovered",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "aspectratiorange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "arearange",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxattempts",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "useimageifnoboundingboxes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "sample_distorted_bounding_box"
            ]
        },
        "rgbtoyiq": {
            "code": "tf.image.rgb_to_yiq(images)",
            "function_name": "rgb_to_yiq",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_yiq"
            ]
        },
        "rgbtohsv": {
            "code": "tf.image.rgb_to_hsv(images,name=None)",
            "function_name": "rgb_to_hsv",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_hsv"
            ]
        },
        "resizewithcroporpad": {
            "code": "tf.image.resize_with_crop_or_pad(image,target_height,target_width)",
            "function_name": "resize_with_crop_or_pad",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetheight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resize_with_crop_or_pad"
            ]
        },
        "rgbtograyscale": {
            "code": "tf.image.rgb_to_grayscale(images,name=None)",
            "function_name": "rgb_to_grayscale",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_grayscale"
            ]
        },
        "resize": {
            "code": "tf.image.resize(images,size,method=ResizeMethod.BILINEAR,preserve_aspect_ratio=False,antialias=False,name=None)",
            "function_name": "resize",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "size",
                    "tfjs": null
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "preserveaspectratio",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "antialias",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resize"
            ]
        },
        "resizewithpad": {
            "code": "tf.image.resize_with_pad(image,target_height,target_width,method=ResizeMethod.BILINEAR,antialias=False)",
            "function_name": "resize_with_pad",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetheight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "antialias",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resize_with_pad"
            ]
        },
        "randomsaturation": {
            "code": "tf.image.random_saturation(image,lower,upper,seed=None)",
            "function_name": "random_saturation",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_saturation"
            ]
        },
        "randomflipleftright": {
            "code": "tf.image.random_flip_left_right(image,seed=None)",
            "function_name": "random_flip_left_right",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_flip_left_right"
            ]
        },
        "randomflipupdown": {
            "code": "tf.image.random_flip_up_down(image,seed=None)",
            "function_name": "random_flip_up_down",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_flip_up_down"
            ]
        },
        "randomhue": {
            "code": "tf.image.random_hue(image,max_delta,seed=None)",
            "function_name": "random_hue",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxdelta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_hue"
            ]
        },
        "randomjpegquality": {
            "code": "tf.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)",
            "function_name": "random_jpeg_quality",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minjpegquality",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxjpegquality",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_jpeg_quality"
            ]
        },
        "randomcrop": {
            "code": "tf.image.random_crop(value,size,seed=None,name=None)",
            "function_name": "random_crop",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_crop"
            ]
        },
        "randomcontrast": {
            "code": "tf.image.random_contrast(image,lower,upper,seed=None)",
            "function_name": "random_contrast",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "lower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_contrast"
            ]
        },
        "nonmaxsuppressionwithscores": {
            "code": "tf.image.non_max_suppression_with_scores(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),soft_nms_sigma=0.0,name=None)",
            "function_name": "non_max_suppression_with_scores",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "softnmssigma",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression_with_scores"
            ]
        },
        "perimagestandardization": {
            "code": "tf.image.per_image_standardization(image)",
            "function_name": "per_image_standardization",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "per_image_standardization"
            ]
        },
        "padtoboundingbox": {
            "code": "tf.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)",
            "function_name": "pad_to_bounding_box",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "offsetheight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "offsetwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetheight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "pad_to_bounding_box"
            ]
        },
        "psnr": {
            "code": "tf.image.psnr(a,b,max_val,name=None)",
            "function_name": "psnr",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxval",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "psnr"
            ]
        },
        "nonmaxsuppressionpadded": {
            "code": "tf.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None)",
            "function_name": "non_max_suppression_padded",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padtomaxoutputsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression_padded"
            ]
        },
        "nonmaxsuppressionoverlaps": {
            "code": "tf.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)",
            "function_name": "non_max_suppression_overlaps",
            "args": [
                {
                    "name": "overlaps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "overlapthreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression_overlaps"
            ]
        },
        "nonmaxsuppression": {
            "code": "tf.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)",
            "function_name": "non_max_suppression",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "boxes"
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "scores"
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "maxoutputsize"
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "iouthreshold"
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "scorethreshold"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression"
            ]
        },
        "imagegradients": {
            "code": "tf.image.image_gradients(image)",
            "function_name": "image_gradients",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "image_gradients"
            ]
        },
        "hsvtorgb": {
            "code": "tf.image.hsv_to_rgb(images,name=None)",
            "function_name": "hsv_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "hsv_to_rgb"
            ]
        },
        "grayscaletorgb": {
            "code": "tf.image.grayscale_to_rgb(images,name=None)",
            "function_name": "grayscale_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "grayscale_to_rgb"
            ]
        },
        "flipupdown": {
            "code": "tf.image.flip_up_down(image)",
            "function_name": "flip_up_down",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "flip_up_down"
            ]
        },
        "generateboundingboxproposals": {
            "code": "tf.image.generate_bounding_box_proposals(scores,bbox_deltas,image_info,anchors,nms_threshold=0.7,pre_nms_topn=6000,min_size=16,post_nms_topn=300,name=None)",
            "function_name": "generate_bounding_box_proposals",
            "args": [
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bboxdeltas",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "imageinfo",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "anchors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "nmsthreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "prenmstopn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "postnmstopn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "generate_bounding_box_proposals"
            ]
        },
        "flipleftright": {
            "code": "tf.image.flip_left_right(image)",
            "function_name": "flip_left_right",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "flip_left_right"
            ]
        },
        "extractglimpse": {
            "code": "tf.image.extract_glimpse(input,size,offsets,centered=True,normalized=True,noise='uniform',name=None)",
            "function_name": "extract_glimpse",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "offsets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "centered",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "noise",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "extract_glimpse"
            ]
        },
        "encodepng": {
            "code": "tf.image.encode_png(image,compression=-1,name=None)",
            "function_name": "encode_png",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "compression",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "encode_png"
            ]
        },
        "extractpatches": {
            "code": "tf.image.extract_patches(images,sizes,strides,rates,padding,name=None)",
            "function_name": "extract_patches",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "extract_patches"
            ]
        },
        "drawboundingboxes": {
            "code": "tf.image.draw_bounding_boxes(images,boxes,colors,name=None)",
            "function_name": "draw_bounding_boxes",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "colors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "draw_bounding_boxes"
            ]
        },
        "croptoboundingbox": {
            "code": "tf.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)",
            "function_name": "crop_to_bounding_box",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "offsetheight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "offsetwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetheight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetwidth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "crop_to_bounding_box"
            ]
        },
        "combinednonmaxsuppression": {
            "code": "tf.image.combined_non_max_suppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_per_class=False,clip_boxes=True,name=None)",
            "function_name": "combined_non_max_suppression",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxoutputsizeperclass",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxtotalsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padperclass",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "clipboxes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "combined_non_max_suppression"
            ]
        },
        "centralcrop": {
            "code": "tf.image.central_crop(image,central_fraction)",
            "function_name": "central_crop",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "centralfraction",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "central_crop"
            ]
        },
        "adjustsaturation": {
            "code": "tf.image.adjust_saturation(image,saturation_factor,name=None)",
            "function_name": "adjust_saturation",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "saturationfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "saturationfactor",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_saturation"
            ]
        },
        "cropandresize": {
            "code": "tf.image.crop_and_resize(image,boxes,box_indices,crop_size,method='bilinear',extrapolation_value=0,name=None)",
            "function_name": "crop_and_resize",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "image"
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "boxes"
                },
                {
                    "name": "boxindices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cropsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": "cropsize"
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "extrapolationvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "extrapolationvalue"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "crop_and_resize"
            ]
        },
        "convertimagedtype": {
            "code": "tf.image.convert_image_dtype(image,dtype,saturate=False,name=None)",
            "function_name": "convert_image_dtype",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "saturate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "convert_image_dtype"
            ]
        },
        "adjustjpegquality": {
            "code": "tf.image.adjust_jpeg_quality(image,jpeg_quality,name=None)",
            "function_name": "adjust_jpeg_quality",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "jpegquality",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_jpeg_quality"
            ]
        },
        "adjusthue": {
            "code": "tf.image.adjust_hue(image,delta,name=None)",
            "function_name": "adjust_hue",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_hue"
            ]
        },
        "adjustgamma": {
            "code": "tf.image.adjust_gamma(image,gamma=1,gain=1)",
            "function_name": "adjust_gamma",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "gamma",
                    "tfjs": null
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "gain",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_gamma"
            ]
        },
        "adjustcontrast": {
            "code": "tf.image.adjust_contrast(images,contrast_factor)",
            "function_name": "adjust_contrast",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "contrastfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "contrastfactor",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_contrast"
            ]
        },
        "adjustbrightness": {
            "code": "tf.image.adjust_brightness(image,delta)",
            "function_name": "adjust_brightness",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_brightness"
            ]
        },
        "weightedcategoricalcolumn": {
            "code": "tf.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)",
            "function_name": "weighted_categorical_column",
            "args": [
                {
                    "name": "categoricalcolumn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "weightfeaturekey",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "weighted_categorical_column"
            ]
        },
        "importgraphdef": {
            "code": "tf.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)",
            "function_name": "import_graph_def",
            "args": [
                {
                    "name": "graphdef",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inputmap",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "returnelements",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "opdict",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "produceroplist",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "graph_util",
                "import_graph_def"
            ]
        },
        "sharedembeddings": {
            "code": "tf.feature_column.shared_embeddings(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)",
            "function_name": "shared_embeddings",
            "args": [
                {
                    "name": "categoricalcolumns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dimension",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sharedembeddingcollectionname",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ckpttoloadfrom",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tensornameinckpt",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "shared_embeddings"
            ]
        },
        "sequencenumericcolumn": {
            "code": "tf.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)",
            "function_name": "sequence_numeric_column",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "normalizerfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_numeric_column"
            ]
        },
        "indicatorcolumn": {
            "code": "tf.feature_column.indicator_column(categorical_column)",
            "function_name": "indicator_column",
            "args": [
                {
                    "name": "categoricalcolumn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "indicator_column"
            ]
        },
        "sequencecategoricalcolumnwithidentity": {
            "code": "tf.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)",
            "function_name": "sequence_categorical_column_with_identity",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbuckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_identity"
            ]
        },
        "sequencecategoricalcolumnwithvocabularylist": {
            "code": "tf.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)",
            "function_name": "sequence_categorical_column_with_vocabulary_list",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularylist",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numoovbuckets",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_vocabulary_list"
            ]
        },
        "makeparseexamplespec": {
            "code": "tf.feature_column.make_parse_example_spec(feature_columns)",
            "function_name": "make_parse_example_spec",
            "args": [
                {
                    "name": "featurecolumns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "make_parse_example_spec"
            ]
        },
        "sequencecategoricalcolumnwithvocabularyfile": {
            "code": "tf.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)",
            "function_name": "sequence_categorical_column_with_vocabulary_file",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularyfile",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularysize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numoovbuckets",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_vocabulary_file"
            ]
        },
        "sequencecategoricalcolumnwithhashbucket": {
            "code": "tf.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)",
            "function_name": "sequence_categorical_column_with_hash_bucket",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashbucketsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_hash_bucket"
            ]
        },
        "embeddingcolumn": {
            "code": "tf.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)",
            "function_name": "embedding_column",
            "args": [
                {
                    "name": "categoricalcolumn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dimension",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ckpttoloadfrom",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tensornameinckpt",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "embedding_column"
            ]
        },
        "numericcolumn": {
            "code": "tf.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)",
            "function_name": "numeric_column",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "normalizerfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "numeric_column"
            ]
        },
        "crossedcolumn": {
            "code": "tf.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)",
            "function_name": "crossed_column",
            "args": [
                {
                    "name": "keys",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashbucketsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashkey",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "crossed_column"
            ]
        },
        "categoricalcolumnwithvocabularylist": {
            "code": "tf.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)",
            "function_name": "categorical_column_with_vocabulary_list",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularylist",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numoovbuckets",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_vocabulary_list"
            ]
        },
        "bucketizedcolumn": {
            "code": "tf.feature_column.bucketized_column(source_column,boundaries)",
            "function_name": "bucketized_column",
            "args": [
                {
                    "name": "sourcecolumn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "boundaries",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "bucketized_column"
            ]
        },
        "categoricalcolumnwithvocabularyfile": {
            "code": "tf.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,dtype=tf.dtypes.string,default_value=None,num_oov_buckets=0)",
            "function_name": "categorical_column_with_vocabulary_file",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularyfile",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "vocabularysize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numoovbuckets",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_vocabulary_file"
            ]
        },
        "categoricalcolumnwithhashbucket": {
            "code": "tf.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)",
            "function_name": "categorical_column_with_hash_bucket",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hashbucketsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_hash_bucket"
            ]
        },
        "categoricalcolumnwithidentity": {
            "code": "tf.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)",
            "function_name": "categorical_column_with_identity",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numbuckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_identity"
            ]
        },
        "buildrawservinginputreceiverfn": {
            "code": "tf.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)",
            "function_name": "build_raw_serving_input_receiver_fn",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultbatchsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "build_raw_serving_input_receiver_fn"
            ]
        },
        "assignaturedef": {
            "code": "as_signature_def(receiver_tensors)",
            "function_name": "as_signature_def",
            "args": [
                {
                    "name": "receivertensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "as_signature_def"
            ]
        },
        "buildparsingservinginputreceiverfn": {
            "code": "tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)",
            "function_name": "build_parsing_serving_input_receiver_fn",
            "args": [
                {
                    "name": "featurespec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultbatchsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "build_parsing_serving_input_receiver_fn"
            ]
        },
        "stopifnoincreasehook": {
            "code": "tf.estimator.experimental.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_no_increase_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "metricname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxstepswithoutincrease",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "evaldir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minsteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_no_increase_hook"
            ]
        },
        "stopiflowerhook": {
            "code": "tf.estimator.experimental.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_lower_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "metricname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "evaldir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minsteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_lower_hook"
            ]
        },
        "stopifnodecreasehook": {
            "code": "tf.estimator.experimental.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_no_decrease_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "metricname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxstepswithoutdecrease",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "evaldir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minsteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_no_decrease_hook"
            ]
        },
        "makestopatcheckpointstephook": {
            "code": "tf.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)",
            "function_name": "make_stop_at_checkpoint_step_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "laststep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "waitafterfilechecksecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "make_stop_at_checkpoint_step_hook"
            ]
        },
        "stopifhigherhook": {
            "code": "tf.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_higher_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "metricname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "evaldir",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "minsteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_higher_hook"
            ]
        },
        "deftraininputfn": {
            "code": "deftrain_input_fn():...returntrain_datasetdefeval_input_fn():...returneval_datasetestimator=tf.estimator.DNNClassifier(...)evaluator=tf.estimator.experimental.InMemoryEvaluatorHook(estimator,eval_input_fn)estimator.train(train_input_fn,hooks=[evaluator])",
            "function_name": "deftrain_input_fn",
            "args": [
                {
                    "name": "evalinputfnestimatortraintraininputfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "returntraindatasetdefevalinputfnreturnevaldatasetestimator",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "hooks",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "deftrain_input_fn"
            ]
        },
        "makeearlystoppinghook": {
            "code": "tf.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)",
            "function_name": "make_early_stopping_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shouldstopfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysecs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "runeverysteps",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "make_early_stopping_hook"
            ]
        },
        "calllogitfn": {
            "code": "tf.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)",
            "function_name": "call_logit_fn",
            "args": [
                {
                    "name": "logitfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "call_logit_fn"
            ]
        },
        "buildrawsupervisedinputreceiverfn": {
            "code": "tf.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)",
            "function_name": "build_raw_supervised_input_receiver_fn",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "defaultbatchsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "build_raw_supervised_input_receiver_fn"
            ]
        },
        "trainandevaluate": {
            "code": "tf.estimator.train_and_evaluate(estimator,train_spec,eval_spec)",
            "function_name": "train_and_evaluate",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "trainspec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "evalspec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "train_and_evaluate"
            ]
        },
        "aftercreatesession": {
            "code": "after_create_session(session,coord)",
            "function_name": "after_create_session",
            "args": [
                {
                    "name": "session",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "coord",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "after_create_session"
            ]
        },
        "regressorparseexamplespec": {
            "code": "tf.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)",
            "function_name": "regressor_parse_example_spec",
            "args": [
                {
                    "name": "featurecolumns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labelkey",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labeldtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labeldefault",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labeldimension",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "weightcolumn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "regressor_parse_example_spec"
            ]
        },
        "createestimatorspec": {
            "code": "create_estimator_spec(features,mode,logits,labels=None,optimizer=None,trainable_variables=None,train_op_fn=None,update_ops=None,regularization_losses=None)",
            "function_name": "create_estimator_spec",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "trainablevariables",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "trainopfn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "updateops",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "regularizationlosses",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "create_estimator_spec"
            ]
        },
        "export": {
            "code": "export(estimator,export_path,checkpoint_path,eval_result,is_the_final_export)",
            "function_name": "export",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "exportpath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "checkpointpath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "evalresult",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "isthefinalexport",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "export"
            ]
        },
        "classifierparseexamplespec": {
            "code": "tf.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)",
            "function_name": "classifier_parse_example_spec",
            "args": [
                {
                    "name": "featurecolumns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labelkey",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labeldtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labeldefault",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "weightcolumn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "classifier_parse_example_spec"
            ]
        },
        "addmetrics": {
            "code": "tf.estimator.add_metrics(estimator,metric_fn)",
            "function_name": "add_metrics",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "metricfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "add_metrics"
            ]
        },
        "asdtype": {
            "code": "tf.dtypes.as_dtype(type_value)",
            "function_name": "as_dtype",
            "args": [
                {
                    "name": "typevalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "as_dtype"
            ]
        },
        "complex": {
            "code": "tf.dtypes.complex(real,imag,name=None)",
            "function_name": "complex",
            "args": [
                {
                    "name": "real",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "real"
                },
                {
                    "name": "imag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "imag"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "complex"
            ]
        },
        "experimentaldistributedataset": {
            "code": "experimental_distribute_dataset(dataset)",
            "function_name": "experimental_distribute_dataset",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "experimental_distribute_dataset"
            ]
        },
        "saturatecast": {
            "code": "tf.dtypes.saturate_cast(value,dtype,name=None)",
            "function_name": "saturate_cast",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "saturate_cast"
            ]
        },
        "clusterspec": {
            "code": "cluster_spec()",
            "function_name": "cluster_spec",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "cluster_spec"
            ]
        },
        "incrossreplicacontext": {
            "code": "tf.distribute.in_cross_replica_context()",
            "function_name": "in_cross_replica_context",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "in_cross_replica_context"
            ]
        },
        "hasstrategy": {
            "code": "tf.distribute.has_strategy()",
            "function_name": "has_strategy",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "has_strategy"
            ]
        },
        "experimentalsetstrategy": {
            "code": "tf.distribute.experimental_set_strategy(strategy)",
            "function_name": "experimental_set_strategy",
            "args": [
                {
                    "name": "strategy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "experimental_set_strategy"
            ]
        },
        "getreplicacontext": {
            "code": "tf.distribute.get_replica_context()",
            "function_name": "get_replica_context",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "get_replica_context"
            ]
        },
        "getstrategy": {
            "code": "tf.distribute.get_strategy()",
            "function_name": "get_strategy",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "get_strategy"
            ]
        },
        "enabledumpdebuginfo": {
            "code": "tf.debugging.experimental.enable_dump_debug_info(dump_root,tensor_debug_mode=DEFAULT_TENSOR_DEBUG_MODE,circular_buffer_size=1000,op_regex=None,tensor_dtypes=None)",
            "function_name": "enable_dump_debug_info",
            "args": [
                {
                    "name": "dumproot",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tensordebugmode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "circularbuffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "opregex",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tensordtypes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "experimental",
                "enable_dump_debug_info"
            ]
        },
        "enablechecknumerics": {
            "code": "tf.debugging.enable_check_numerics(stack_height_limit=30,path_length_limit=50)",
            "function_name": "enable_check_numerics",
            "args": [
                {
                    "name": "stackheightlimit",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "pathlengthlimit",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "enable_check_numerics"
            ]
        },
        "getlogdeviceplacement": {
            "code": "tf.debugging.get_log_device_placement()",
            "function_name": "get_log_device_placement",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "get_log_device_placement"
            ]
        },
        "disablechecknumerics": {
            "code": "tf.debugging.disable_check_numerics()",
            "function_name": "disable_check_numerics",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "disable_check_numerics"
            ]
        },
        "disabledumpdebuginfo": {
            "code": "tf.debugging.experimental.disable_dump_debug_info()",
            "function_name": "disable_dump_debug_info",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "experimental",
                "disable_dump_debug_info"
            ]
        },
        "setlogdeviceplacement": {
            "code": "tf.debugging.set_log_device_placement(enabled)",
            "function_name": "set_log_device_placement",
            "args": [
                {
                    "name": "enabled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "set_log_device_placement"
            ]
        },
        "checknumerics": {
            "code": "tf.debugging.check_numerics(tensor,message,name=None)",
            "function_name": "check_numerics",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "check_numerics"
            ]
        },
        "isnumerictensor": {
            "code": "tf.debugging.is_numeric_tensor(tensor)",
            "function_name": "is_numeric_tensor",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "is_numeric_tensor"
            ]
        },
        "assertshapes": {
            "code": "tf.debugging.assert_shapes(shapes,data=None,summarize=None,message=None,name=None)",
            "function_name": "assert_shapes",
            "args": [
                {
                    "name": "shapes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_shapes"
            ]
        },
        "assertsamefloatdtype": {
            "code": "tf.debugging.assert_same_float_dtype(tensors=None,dtype=None)",
            "function_name": "assert_same_float_dtype",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_same_float_dtype"
            ]
        },
        "asserttype": {
            "code": "tf.debugging.assert_type(tensor,tf_type,message=None,name=None)",
            "function_name": "assert_type",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tftype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_type"
            ]
        },
        "assertscalar": {
            "code": "tf.debugging.assert_scalar(tensor,message=None,name=None)",
            "function_name": "assert_scalar",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_scalar"
            ]
        },
        "assertrankin": {
            "code": "tf.debugging.assert_rank_in(x,ranks,message=None,name=None)",
            "function_name": "assert_rank_in",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ranks",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_rank_in"
            ]
        },
        "assertrankatleast": {
            "code": "tf.debugging.assert_rank_at_least(x,rank,message=None,name=None)",
            "function_name": "assert_rank_at_least",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rank",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_rank_at_least"
            ]
        },
        "assertrank": {
            "code": "tf.debugging.assert_rank(x,rank,message=None,name=None)",
            "function_name": "assert_rank",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rank",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_rank"
            ]
        },
        "assertnonpositive": {
            "code": "tf.debugging.assert_non_positive(x,message=None,summarize=None,name=None)",
            "function_name": "assert_non_positive",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_non_positive"
            ]
        },
        "assertproperiterable": {
            "code": "tf.debugging.assert_proper_iterable(values)",
            "function_name": "assert_proper_iterable",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_proper_iterable"
            ]
        },
        "assertnoneequal": {
            "code": "tf.debugging.assert_none_equal(x,y,summarize=None,message=None,name=None)",
            "function_name": "assert_none_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_none_equal"
            ]
        },
        "assertnonnegative": {
            "code": "tf.debugging.assert_non_negative(x,message=None,summarize=None,name=None)",
            "function_name": "assert_non_negative",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_non_negative"
            ]
        },
        "assertpositive": {
            "code": "tf.debugging.assert_positive(x,message=None,summarize=None,name=None)",
            "function_name": "assert_positive",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_positive"
            ]
        },
        "assertnear": {
            "code": "tf.debugging.assert_near(x,y,rtol=None,atol=None,message=None,summarize=None,name=None)",
            "function_name": "assert_near",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rtol",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "atol",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_near"
            ]
        },
        "assertnegative": {
            "code": "tf.debugging.assert_negative(x,message=None,summarize=None,name=None)",
            "function_name": "assert_negative",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_negative"
            ]
        },
        "assertless": {
            "code": "tf.debugging.assert_less(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_less",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_less"
            ]
        },
        "assertlessequal": {
            "code": "tf.debugging.assert_less_equal(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_less_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_less_equal"
            ]
        },
        "assertgreaterequal": {
            "code": "tf.debugging.assert_greater_equal(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_greater_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_greater_equal"
            ]
        },
        "assertinteger": {
            "code": "tf.debugging.assert_integer(x,message=None,name=None)",
            "function_name": "assert_integer",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_integer"
            ]
        },
        "assertgreater": {
            "code": "tf.debugging.assert_greater(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_greater",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_greater"
            ]
        },
        "assertequal": {
            "code": "tf.debugging.assert_equal(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_equal"
            ]
        },
        "assert": {
            "code": "tf.debugging.Assert(condition,data,summarize=None,name=None)",
            "function_name": "Assert",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "Assert"
            ]
        },
        "assertallfinite": {
            "code": "tf.debugging.assert_all_finite(x,message,name=None)",
            "function_name": "assert_all_finite",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_all_finite"
            ]
        },
        "unique": {
            "code": "tf.unique(x,out_idx=tf.dtypes.int32,name=None)",
            "function_name": "unique",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outidx",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "unique"
            ]
        },
        "unbatch": {
            "code": "tf.data.experimental.unbatch()",
            "function_name": "unbatch",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "unbatch"
            ]
        },
        "tovariant": {
            "code": "tf.data.experimental.to_variant(dataset)",
            "function_name": "to_variant",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "to_variant"
            ]
        },
        "takewhile": {
            "code": "tf.data.experimental.take_while(predicate)",
            "function_name": "take_while",
            "args": [
                {
                    "name": "predicate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "take_while"
            ]
        },
        "scan": {
            "code": "tf.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)",
            "function_name": "scan",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paralleliterations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "backprop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "swapmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "infershape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "reverse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "scan"
            ]
        },
        "shuffleandrepeat": {
            "code": "tf.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)",
            "function_name": "shuffle_and_repeat",
            "args": [
                {
                    "name": "buffersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "count",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "shuffle_and_repeat"
            ]
        },
        "samplefromdatasets": {
            "code": "tf.data.experimental.sample_from_datasets(datasets,weights=None,seed=None)",
            "function_name": "sample_from_datasets",
            "args": [
                {
                    "name": "datasets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "sample_from_datasets"
            ]
        },
        "rejectionresample": {
            "code": "tf.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)",
            "function_name": "rejection_resample",
            "args": [
                {
                    "name": "classfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "targetdist",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "initialdist",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "rejection_resample"
            ]
        },
        "parseexampledataset": {
            "code": "tf.data.experimental.parse_example_dataset(features,num_parallel_calls=1)",
            "function_name": "parse_example_dataset",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numparallelcalls",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "parse_example_dataset"
            ]
        },
        "prefetchtodevice": {
            "code": "tf.data.experimental.prefetch_to_device(device,buffer_size=None)",
            "function_name": "prefetch_to_device",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "buffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "prefetch_to_device"
            ]
        },
        "parallelinterleave": {
            "code": "tf.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)",
            "function_name": "parallel_interleave",
            "args": [
                {
                    "name": "mapfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "cyclelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blocklength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sloppy",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bufferoutputelements",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "prefetchinputelements",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "parallel_interleave"
            ]
        },
        "mapandbatch": {
            "code": "tf.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)",
            "function_name": "map_and_batch",
            "args": [
                {
                    "name": "mapfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numparallelbatches",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dropremainder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numparallelcalls",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "map_and_batch"
            ]
        },
        "makesaveablefromiterator": {
            "code": "tf.data.experimental.make_saveable_from_iterator(iterator)",
            "function_name": "make_saveable_from_iterator",
            "args": [
                {
                    "name": "iterator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "make_saveable_from_iterator"
            ]
        },
        "makecsvdataset": {
            "code": "tf.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,num_parallel_reads=None,sloppy=False,num_rows_for_inference=100,compression_type=None,ignore_errors=False)",
            "function_name": "make_csv_dataset",
            "args": [
                {
                    "name": "filepattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "columnnames",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "columndefaults",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labelname",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "selectcolumns",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fielddelim",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "usequotedelim",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "navalue",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "header",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numepochs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shufflebuffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shuffleseed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "prefetchbuffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numparallelreads",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sloppy",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numrowsforinference",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "compressiontype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ignoreerrors",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "make_csv_dataset"
            ]
        },
        "latencystats": {
            "code": "tf.data.experimental.latency_stats(tag)",
            "function_name": "latency_stats",
            "args": [
                {
                    "name": "tag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "latency_stats"
            ]
        },
        "makebatchedfeaturesdataset": {
            "code": "tf.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=None,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,reader_num_threads=None,parser_num_threads=None,sloppy_ordering=False,drop_final_batch=False)",
            "function_name": "make_batched_features_dataset",
            "args": [
                {
                    "name": "filepattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "reader",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "labelkey",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "readerargs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numepochs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shufflebuffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shuffleseed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "prefetchbuffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "readernumthreads",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "parsernumthreads",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sloppyordering",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dropfinalbatch",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "make_batched_features_dataset"
            ]
        },
        "ignoreerrors": {
            "code": "tf.data.experimental.ignore_errors()",
            "function_name": "ignore_errors",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "ignore_errors"
            ]
        },
        "groupbywindow": {
            "code": "tf.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)",
            "function_name": "group_by_window",
            "args": [
                {
                    "name": "keyfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "reducefunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "windowsize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "windowsizefunc",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "group_by_window"
            ]
        },
        "getsingleelement": {
            "code": "tf.data.experimental.get_single_element(dataset)",
            "function_name": "get_single_element",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "get_single_element"
            ]
        },
        "getstructure": {
            "code": "tf.data.experimental.get_structure(dataset_or_iterator)",
            "function_name": "get_structure",
            "args": [
                {
                    "name": "datasetoriterator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "get_structure"
            ]
        },
        "getnextasoptional": {
            "code": "tf.data.experimental.get_next_as_optional(iterator)",
            "function_name": "get_next_as_optional",
            "args": [
                {
                    "name": "iterator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "get_next_as_optional"
            ]
        },
        "fromvariant": {
            "code": "tf.data.experimental.from_variant(variant,structure)",
            "function_name": "from_variant",
            "args": [
                {
                    "name": "variant",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "structure",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "from_variant"
            ]
        },
        "groupbyreducer": {
            "code": "tf.data.experimental.group_by_reducer(key_func,reducer)",
            "function_name": "group_by_reducer",
            "args": [
                {
                    "name": "keyfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "reducer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "group_by_reducer"
            ]
        },
        "enumeratedataset": {
            "code": "tf.data.experimental.enumerate_dataset(start=0)",
            "function_name": "enumerate_dataset",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "enumerate_dataset"
            ]
        },
        "densetosparsebatch": {
            "code": "tf.data.experimental.dense_to_sparse_batch(batch_size,row_shape)",
            "function_name": "dense_to_sparse_batch",
            "args": [
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "dense_to_sparse_batch"
            ]
        },
        "densetoraggedbatch": {
            "code": "tf.data.experimental.dense_to_ragged_batch(batch_size,drop_remainder=False,row_splits_dtype=tf.dtypes.int64)",
            "function_name": "dense_to_ragged_batch",
            "args": [
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dropremainder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "rowsplitsdtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "dense_to_ragged_batch"
            ]
        },
        "counter": {
            "code": "tf.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)",
            "function_name": "Counter",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "Counter"
            ]
        },
        "copytodevice": {
            "code": "tf.data.experimental.copy_to_device(target_device,source_device='/cpu:0')",
            "function_name": "copy_to_device",
            "args": [
                {
                    "name": "targetdevice",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "sourcedevice",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "copy_to_device"
            ]
        },
        "choosefromdatasets": {
            "code": "tf.data.experimental.choose_from_datasets(datasets,choice_dataset)",
            "function_name": "choose_from_datasets",
            "args": [
                {
                    "name": "datasets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "choicedataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "choose_from_datasets"
            ]
        },
        "cardinality": {
            "code": "tf.data.experimental.cardinality(dataset)",
            "function_name": "cardinality",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "cardinality"
            ]
        },
        "bytesproducedstats": {
            "code": "tf.data.experimental.bytes_produced_stats(tag)",
            "function_name": "bytes_produced_stats",
            "args": [
                {
                    "name": "tag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "bytes_produced_stats"
            ]
        },
        "bucketbysequencelength": {
            "code": "tf.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False,drop_remainder=False)",
            "function_name": "bucket_by_sequence_length",
            "args": [
                {
                    "name": "elementlengthfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bucketboundaries",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "bucketbatchsizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddedshapes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddingvalues",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padtobucketboundary",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "nopadding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dropremainder",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "bucket_by_sequence_length"
            ]
        },
        "setintraopparallelismthreads": {
            "code": "tf.config.threading.set_intra_op_parallelism_threads(num_threads)",
            "function_name": "set_intra_op_parallelism_threads",
            "args": [
                {
                    "name": "numthreads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "threading",
                "set_intra_op_parallelism_threads"
            ]
        },
        "setinteropparallelismthreads": {
            "code": "tf.config.threading.set_inter_op_parallelism_threads(num_threads)",
            "function_name": "set_inter_op_parallelism_threads",
            "args": [
                {
                    "name": "numthreads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "threading",
                "set_inter_op_parallelism_threads"
            ]
        },
        "getintraopparallelismthreads": {
            "code": "tf.config.threading.get_intra_op_parallelism_threads()",
            "function_name": "get_intra_op_parallelism_threads",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "threading",
                "get_intra_op_parallelism_threads"
            ]
        },
        "getinteropparallelismthreads": {
            "code": "tf.config.threading.get_inter_op_parallelism_threads()",
            "function_name": "get_inter_op_parallelism_threads",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "threading",
                "get_inter_op_parallelism_threads"
            ]
        },
        "getexperimentaloptions": {
            "code": "tf.config.optimizer.get_experimental_options()",
            "function_name": "get_experimental_options",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "get_experimental_options"
            ]
        },
        "setjit": {
            "code": "tf.config.optimizer.set_jit(enabled)",
            "function_name": "set_jit",
            "args": [
                {
                    "name": "enabled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "set_jit"
            ]
        },
        "setexperimentaloptions": {
            "code": "tf.config.optimizer.set_experimental_options(options)",
            "function_name": "set_experimental_options",
            "args": [
                {
                    "name": "options",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "set_experimental_options"
            ]
        },
        "getjit": {
            "code": "tf.config.optimizer.get_jit()",
            "function_name": "get_jit",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "get_jit"
            ]
        },
        "setsynchronousexecution": {
            "code": "tf.config.experimental.set_synchronous_execution(enable)",
            "function_name": "set_synchronous_execution",
            "args": [
                {
                    "name": "enable",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "set_synchronous_execution"
            ]
        },
        "setmemorygrowth": {
            "code": "tf.config.experimental.set_memory_growth(device,enable)",
            "function_name": "set_memory_growth",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "enable",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "set_memory_growth"
            ]
        },
        "setdevicepolicy": {
            "code": "tf.config.experimental.set_device_policy(device_policy)",
            "function_name": "set_device_policy",
            "args": [
                {
                    "name": "devicepolicy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "set_device_policy"
            ]
        },
        "getmemorygrowth": {
            "code": "tf.config.experimental.get_memory_growth(device)",
            "function_name": "get_memory_growth",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "get_memory_growth"
            ]
        },
        "getdevicepolicy": {
            "code": "tf.config.experimental.get_device_policy()",
            "function_name": "get_device_policy",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "get_device_policy"
            ]
        },
        "getsynchronousexecution": {
            "code": "tf.config.experimental.get_synchronous_execution()",
            "function_name": "get_synchronous_execution",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "get_synchronous_execution"
            ]
        },
        "disablemlirbridge": {
            "code": "tf.config.experimental.disable_mlir_bridge()",
            "function_name": "disable_mlir_bridge",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "disable_mlir_bridge"
            ]
        },
        "enablemlirbridge": {
            "code": "tf.config.experimental.enable_mlir_bridge()",
            "function_name": "enable_mlir_bridge",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "enable_mlir_bridge"
            ]
        },
        "setsoftdeviceplacement": {
            "code": "tf.config.set_soft_device_placement(enabled)",
            "function_name": "set_soft_device_placement",
            "args": [
                {
                    "name": "enabled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "set_soft_device_placement"
            ]
        },
        "setvisibledevices": {
            "code": "tf.config.set_visible_devices(devices,device_type=None)",
            "function_name": "set_visible_devices",
            "args": [
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "devicetype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "set_visible_devices"
            ]
        },
        "setlogicaldeviceconfiguration": {
            "code": "tf.config.set_logical_device_configuration(device,logical_devices)",
            "function_name": "set_logical_device_configuration",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "logicaldevices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "set_logical_device_configuration"
            ]
        },
        "listphysicaldevices": {
            "code": "tf.config.list_physical_devices(device_type=None)",
            "function_name": "list_physical_devices",
            "args": [
                {
                    "name": "devicetype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "list_physical_devices"
            ]
        },
        "listlogicaldevices": {
            "code": "tf.config.list_logical_devices(device_type=None)",
            "function_name": "list_logical_devices",
            "args": [
                {
                    "name": "devicetype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "list_logical_devices"
            ]
        },
        "getvisibledevices": {
            "code": "tf.config.get_visible_devices(device_type=None)",
            "function_name": "get_visible_devices",
            "args": [
                {
                    "name": "devicetype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "get_visible_devices"
            ]
        },
        "getsoftdeviceplacement": {
            "code": "tf.config.get_soft_device_placement()",
            "function_name": "get_soft_device_placement",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "get_soft_device_placement"
            ]
        },
        "experimentalrunfunctionseagerly": {
            "code": "tf.config.experimental_run_functions_eagerly(run_eagerly)",
            "function_name": "experimental_run_functions_eagerly",
            "args": [
                {
                    "name": "runeagerly",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_run_functions_eagerly"
            ]
        },
        "experimentalconnecttohost": {
            "code": "tf.config.experimental_connect_to_host(remote_host=None,job_name='worker')",
            "function_name": "experimental_connect_to_host",
            "args": [
                {
                    "name": "remotehost",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "jobname",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_connect_to_host"
            ]
        },
        "getlogicaldeviceconfiguration": {
            "code": "tf.config.get_logical_device_configuration(device)",
            "function_name": "get_logical_device_configuration",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "get_logical_device_configuration"
            ]
        },
        "experimentalfunctionsruneagerly": {
            "code": "tf.config.experimental_functions_run_eagerly()",
            "function_name": "experimental_functions_run_eagerly",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_functions_run_eagerly"
            ]
        },
        "experimentalconnecttocluster": {
            "code": "tf.config.experimental_connect_to_cluster(cluster_spec_or_resolver,job_name='localhost',task_index=0,protocol=None,make_master_device_default=True)",
            "function_name": "experimental_connect_to_cluster",
            "args": [
                {
                    "name": "clusterspecorresolver",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "jobname",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "taskindex",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "protocol",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "makemasterdevicedefault",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_connect_to_cluster"
            ]
        },
        "graph": {
            "code": "withtf.Graph().as_default():...addoperationstothegraph...#CreateaSessionManagerthatwillcheckpointthemodelin'/tmp/mydir'.sm=SessionManager()sess=sm.prepare_session(master,init_op,saver,checkpoint_dir)#Usethesessiontotrainthegraph.whileTrue:sess.run(&lt;my_train_op&gt;)",
            "function_name": "Graph",
            "args": [
                {
                    "name": "initop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "saver",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "checkpointdirusethesessiontotrainthegraphwhiletruesessrunltmytrainopgt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "asdefaultaddoperationstothegraphcreateasessionmanagerthatwillcheckpointthemodelintmpmydirsm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "withtf",
                "Graph"
            ]
        },
        "createsession": {
            "code": "create_session()",
            "function_name": "create_session",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "create_session"
            ]
        },
        "defmyop": {
            "code": "defmy_op(a,b,c,name=None):withtf.name_scope(\"MyOp\")asscope:a=tf.convert_to_tensor(a,name=\"a\")b=tf.convert_to_tensor(b,name=\"b\")c=tf.convert_to_tensor(c,name=\"c\")#Definesomecomputationthatuses`a`,`b`,and`c`.returnfoo_op(...,name=scope)",
            "function_name": "defmy_op",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "c",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "andcreturnfooop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "defmy_op"
            ]
        },
        "flagtype": {
            "code": "flag_type()",
            "function_name": "flag_type",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "flag_type"
            ]
        },
        "rightshift": {
            "code": "tf.bitwise.right_shift(x,y,name=None)",
            "function_name": "right_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "right_shift"
            ]
        },
        "bitwisexor": {
            "code": "tf.bitwise.bitwise_xor(x,y,name=None)",
            "function_name": "bitwise_xor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "bitwise_xor"
            ]
        },
        "invert": {
            "code": "tf.bitwise.invert(x,name=None)",
            "function_name": "invert",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "invert"
            ]
        },
        "bitwiseand": {
            "code": "tf.bitwise.bitwise_and(x,y,name=None)",
            "function_name": "bitwise_and",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "bitwise_and"
            ]
        },
        "leftshift": {
            "code": "tf.bitwise.left_shift(x,y,name=None)",
            "function_name": "left_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "left_shift"
            ]
        },
        "bitwiseor": {
            "code": "tf.bitwise.bitwise_or(x,y,name=None)",
            "function_name": "bitwise_or",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "bitwise_or"
            ]
        },
        "donotconvert": {
            "code": "tf.autograph.experimental.do_not_convert(func=None)",
            "function_name": "do_not_convert",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "experimental",
                "do_not_convert"
            ]
        },
        "setverbosity": {
            "code": "tf.autograph.set_verbosity(level,alsologtostdout=False)",
            "function_name": "set_verbosity",
            "args": [
                {
                    "name": "level",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alsologtostdout",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "set_verbosity"
            ]
        },
        "tograph": {
            "code": "tf.autograph.to_graph(entity,recursive=True,experimental_optional_features=None)",
            "function_name": "to_graph",
            "args": [
                {
                    "name": "entity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "recursive",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "experimentaloptionalfeatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "to_graph"
            ]
        },
        "tocode": {
            "code": "tf.autograph.to_code(entity,recursive=True,experimental_optional_features=None)",
            "function_name": "to_code",
            "args": [
                {
                    "name": "entity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "recursive",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "experimentaloptionalfeatures",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "to_code"
            ]
        },
        "encodewav": {
            "code": "tf.audio.encode_wav(audio,sample_rate,name=None)",
            "function_name": "encode_wav",
            "args": [
                {
                    "name": "audio",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "samplerate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "audio",
                "encode_wav"
            ]
        },
        "decodewav": {
            "code": "tf.audio.decode_wav(contents,desired_channels=-1,desired_samples=-1,name=None)",
            "function_name": "decode_wav",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "desiredchannels",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "desiredsamples",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "audio",
                "decode_wav"
            ]
        },
        "vectorizedmap": {
            "code": "tf.vectorized_map(fn,elems)",
            "function_name": "vectorized_map",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "vectorized_map"
            ]
        },
        "where": {
            "code": "tf.where(condition,x=None,y=None,name=None)",
            "function_name": "where",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "condition",
                    "tfjs": "condition"
                },
                {
                    "name": "x",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "where"
            ]
        },
        "whileloop": {
            "code": "tf.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,maximum_iterations=None,name=None)",
            "function_name": "while_loop",
            "args": [
                {
                    "name": "cond",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "body",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "loopvars",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shapeinvariants",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paralleliterations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "backprop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "swapmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maximumiterations",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "while_loop"
            ]
        },
        "uniquewithcounts": {
            "code": "tf.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)",
            "function_name": "unique_with_counts",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outidx",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "unique_with_counts"
            ]
        },
        "unstack": {
            "code": "tf.unstack(value,num=None,axis=0,name='unstack')",
            "function_name": "unstack",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "num",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "unstack"
            ]
        },
        "unravelindex": {
            "code": "tf.unravel_index(indices,dims,name=None)",
            "function_name": "unravel_index",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "unravel_index"
            ]
        },
        "truncatemod": {
            "code": "tf.truncatemod(x,y,name=None)",
            "function_name": "truncatemod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "truncatemod"
            ]
        },
        "tuple": {
            "code": "tf.tuple(tensors,control_inputs=None,name=None)",
            "function_name": "tuple",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "controlinputs",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tuple"
            ]
        },
        "truncatediv": {
            "code": "tf.truncatediv(x,y,name=None)",
            "function_name": "truncatediv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "truncatediv"
            ]
        },
        "timestamp": {
            "code": "tf.timestamp(name=None)",
            "function_name": "timestamp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "timestamp"
            ]
        },
        "tensorscatterndadd": {
            "code": "tf.tensor_scatter_nd_add(tensor,indices,updates,name=None)",
            "function_name": "tensor_scatter_nd_add",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tensor_scatter_nd_add"
            ]
        },
        "tensorscatterndsub": {
            "code": "tf.tensor_scatter_nd_sub(tensor,indices,updates,name=None)",
            "function_name": "tensor_scatter_nd_sub",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tensor_scatter_nd_sub"
            ]
        },
        "tensorscatterndupdate": {
            "code": "tf.tensor_scatter_nd_update(tensor,indices,updates,name=None)",
            "function_name": "tensor_scatter_nd_update",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tensor_scatter_nd_update"
            ]
        },
        "tensordot": {
            "code": "tf.tensordot(a,b,axes,name=None)",
            "function_name": "tensordot",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "a",
                    "tfjs": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "b",
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tensordot"
            ]
        },
        "switchcase": {
            "code": "tf.switch_case(branch_index,branch_fns,default=None,name='switch_case')",
            "function_name": "switch_case",
            "args": [
                {
                    "name": "branchindex",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "branchfns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "default",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "switch_case"
            ]
        },
        "stridedslice": {
            "code": "tf.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)",
            "function_name": "strided_slice",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "begin"
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "end"
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "beginmask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "beginmask"
                },
                {
                    "name": "endmask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "endmask"
                },
                {
                    "name": "ellipsismask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "ellipsismask"
                },
                {
                    "name": "newaxismask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "newaxismask"
                },
                {
                    "name": "shrinkaxismask",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "shrinkaxismask"
                },
                {
                    "name": "var",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "strided_slice"
            ]
        },
        "spacetobatch": {
            "code": "tf.space_to_batch(input,block_shape,paddings,name=None)",
            "function_name": "space_to_batch",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "space_to_batch"
            ]
        },
        "spacetobatchnd": {
            "code": "tf.space_to_batch_nd(input,block_shape,paddings,name=None)",
            "function_name": "space_to_batch_nd",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "blockshape"
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "paddings"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "space_to_batch_nd"
            ]
        },
        "sort": {
            "code": "tf.sort(values,axis=-1,direction='ASCENDING',name=None)",
            "function_name": "sort",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "direction",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sort"
            ]
        },
        "shapen": {
            "code": "tf.shape_n(input,out_type=tf.dtypes.int32,name=None)",
            "function_name": "shape_n",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "shape_n"
            ]
        },
        "searchsorted": {
            "code": "tf.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)",
            "function_name": "searchsorted",
            "args": [
                {
                    "name": "sortedsequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "side",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "outtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "searchsorted"
            ]
        },
        "sequencemask": {
            "code": "tf.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)",
            "function_name": "sequence_mask",
            "args": [
                {
                    "name": "lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxlen",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "sequence_mask"
            ]
        },
        "scatternd": {
            "code": "tf.scatter_nd(indices,updates,shape,name=None)",
            "function_name": "scatter_nd",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "indices"
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "updates"
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "shape"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "scatter_nd"
            ]
        },
        "roll": {
            "code": "tf.roll(input,shift,axis,name=None)",
            "function_name": "roll",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": null
                },
                {
                    "name": "shift",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "roll"
            ]
        },
        "requiredspacetobatchpaddings": {
            "code": "tf.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)",
            "function_name": "required_space_to_batch_paddings",
            "args": [
                {
                    "name": "inputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "basepaddings",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "required_space_to_batch_paddings"
            ]
        },
        "reversesequence": {
            "code": "tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None)",
            "function_name": "reverse_sequence",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seqlengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seqaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "batchaxis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "reverse_sequence"
            ]
        },
        "reduceall": {
            "code": "tf.reduce_all(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_all",
            "args": [
                {
                    "name": "inputtensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "reduce_all"
            ]
        },
        "registertensorconversionfunction": {
            "code": "tf.register_tensor_conversion_function(base_type,conversion_func,priority=100)",
            "function_name": "register_tensor_conversion_function",
            "args": [
                {
                    "name": "basetype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "conversionfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "priority",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "register_tensor_conversion_function"
            ]
        },
        "recomputegrad": {
            "code": "tf.recompute_grad(f)",
            "function_name": "recompute_grad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "recompute_grad"
            ]
        },
        "realdiv": {
            "code": "tf.realdiv(x,y,name=None)",
            "function_name": "realdiv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "realdiv"
            ]
        },
        "rank": {
            "code": "tf.rank(input,name=None)",
            "function_name": "rank",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "rank"
            ]
        },
        "print": {
            "code": "tf.print(*inputs,**kwargs)",
            "function_name": "print",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "print"
            ]
        },
        "pyfunction": {
            "code": "tf.py_function(func,inp,Tout,name=None)",
            "function_name": "py_function",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tout",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "py_function"
            ]
        },
        "parallelstack": {
            "code": "tf.parallel_stack(values,name='parallel_stack')",
            "function_name": "parallel_stack",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "parallel_stack"
            ]
        },
        "pad": {
            "code": "tf.pad(tensor,paddings,mode='CONSTANT',constant_values=0,name=None)",
            "function_name": "pad",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "paddings"
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "constantvalues",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "pad"
            ]
        },
        "numpyfunction": {
            "code": "tf.numpy_function(func,inp,Tout,name=None)",
            "function_name": "numpy_function",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "inp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "tout",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "numpy_function"
            ]
        },
        "norm": {
            "code": "tf.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None)",
            "function_name": "norm",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ord",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "ord"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "norm"
            ]
        },
        "noop": {
            "code": "tf.no_op(name=None)",
            "function_name": "no_op",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "no_op"
            ]
        },
        "nogradient": {
            "code": "tf.no_gradient(op_type)",
            "function_name": "no_gradient",
            "args": [
                {
                    "name": "optype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "no_gradient"
            ]
        },
        "nondifferentiablebatchfunction": {
            "code": "tf.nondifferentiable_batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10,autograph=True)",
            "function_name": "nondifferentiable_batch_function",
            "args": [
                {
                    "name": "numbatchthreads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxbatchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "batchtimeoutmicros",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "allowedbatchsizes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "maxenqueuedbatches",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "autograph",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nondifferentiable_batch_function"
            ]
        },
        "meshgrid": {
            "code": "tf.meshgrid(*args,**kwargs)",
            "function_name": "meshgrid",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "kwargs",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "meshgrid"
            ]
        },
        "maketensorproto": {
            "code": "tf.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)",
            "function_name": "make_tensor_proto",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "verifyshape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "allowbroadcast",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "make_tensor_proto"
            ]
        },
        "loadoplibrary": {
            "code": "tf.load_op_library(library_filename)",
            "function_name": "load_op_library",
            "args": [
                {
                    "name": "libraryfilename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "load_op_library"
            ]
        },
        "loadlibrary": {
            "code": "tf.load_library(library_location)",
            "function_name": "load_library",
            "args": [
                {
                    "name": "librarylocation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "load_library"
            ]
        },
        "makendarray": {
            "code": "tf.make_ndarray(tensor)",
            "function_name": "make_ndarray",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "make_ndarray"
            ]
        },
        "linspace": {
            "code": "tf.linspace(start,stop,num,name=None)",
            "function_name": "linspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tfjs": "start"
                },
                {
                    "name": "stop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "stop"
                },
                {
                    "name": "num",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "num"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linspace"
            ]
        },
        "istensor": {
            "code": "tf.is_tensor(x)",
            "function_name": "is_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "is_tensor"
            ]
        },
        "fingerprint": {
            "code": "tf.fingerprint(data,method='farmhash64',name=None)",
            "function_name": "fingerprint",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "fingerprint"
            ]
        },
        "fill": {
            "code": "tf.fill(dims,value,name=None)",
            "function_name": "fill",
            "args": [
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "value"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "fill"
            ]
        },
        "extractvolumepatches": {
            "code": "tf.extract_volume_patches(input,ksizes,strides,padding,name=None)",
            "function_name": "extract_volume_patches",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "ksizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "extract_volume_patches"
            ]
        },
        "ensureshape": {
            "code": "tf.ensure_shape(x,shape,name=None)",
            "function_name": "ensure_shape",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ensure_shape"
            ]
        },
        "eigvals": {
            "code": "tf.eigvals(tensor,name=None)",
            "function_name": "eigvals",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "eigvals"
            ]
        },
        "executingeagerly": {
            "code": "tf.executing_eagerly()",
            "function_name": "executing_eagerly",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "executing_eagerly"
            ]
        },
        "einsum": {
            "code": "tf.einsum(equation,*inputs,**kwargs)",
            "function_name": "einsum",
            "args": [
                {
                    "name": "equation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "equation",
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "einsum"
            ]
        },
        "eig": {
            "code": "tf.eig(tensor,name=None)",
            "function_name": "eig",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "eig"
            ]
        },
        "editdistance": {
            "code": "tf.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')",
            "function_name": "edit_distance",
            "args": [
                {
                    "name": "hypothesis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "truth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "normalize",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "edit_distance"
            ]
        },
        "dynamicstitch": {
            "code": "tf.dynamic_stitch(indices,data,name=None)",
            "function_name": "dynamic_stitch",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "dynamic_stitch"
            ]
        },
        "dynamicpartition": {
            "code": "tf.dynamic_partition(data,partitions,num_partitions,name=None)",
            "function_name": "dynamic_partition",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "partitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "numpartitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "dynamic_partition"
            ]
        },
        "customgradient": {
            "code": "tf.custom_gradient(f=None)",
            "function_name": "custom_gradient",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "custom_gradient"
            ]
        },
        "controldependencies": {
            "code": "tf.control_dependencies(control_inputs)",
            "function_name": "control_dependencies",
            "args": [
                {
                    "name": "controlinputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "control_dependencies"
            ]
        },
        "device": {
            "code": "tf.device(device_name)",
            "function_name": "device",
            "args": [
                {
                    "name": "devicename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "device"
            ]
        },
        "converttotensor": {
            "code": "tf.convert_to_tensor(value,dtype=None,dtype_hint=None,name=None)",
            "function_name": "convert_to_tensor",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtypehint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "convert_to_tensor"
            ]
        },
        "cond": {
            "code": "tf.cond(pred,true_fn=None,false_fn=None,name=None)",
            "function_name": "cond",
            "args": [
                {
                    "name": "pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "truefn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "falsefn",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "cond"
            ]
        },
        "clipbyvalue": {
            "code": "tf.clip_by_value(t,clip_value_min,clip_value_max,name=None)",
            "function_name": "clip_by_value",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "clipvaluemin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "clipvaluemin"
                },
                {
                    "name": "clipvaluemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "clipvaluemax"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "clip_by_value"
            ]
        },
        "clipbynorm": {
            "code": "tf.clip_by_norm(t,clip_norm,axes=None,name=None)",
            "function_name": "clip_by_norm",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "clipnorm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "clip_by_norm"
            ]
        },
        "clipbyglobalnorm": {
            "code": "tf.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)",
            "function_name": "clip_by_global_norm",
            "args": [
                {
                    "name": "tlist",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "clipnorm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "usenorm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "clip_by_global_norm"
            ]
        },
        "case": {
            "code": "tf.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')",
            "function_name": "case",
            "args": [
                {
                    "name": "predfnpairs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "default",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "exclusive",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strict",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "case"
            ]
        },
        "broadcastto": {
            "code": "tf.broadcast_to(input,shape,name=None)",
            "function_name": "broadcast_to",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "shape"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "broadcast_to"
            ]
        },
        "broadcaststaticshape": {
            "code": "tf.broadcast_static_shape(shape_x,shape_y)",
            "function_name": "broadcast_static_shape",
            "args": [
                {
                    "name": "shapex",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shapey",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "broadcast_static_shape"
            ]
        },
        "broadcastdynamicshape": {
            "code": "tf.broadcast_dynamic_shape(shape_x,shape_y)",
            "function_name": "broadcast_dynamic_shape",
            "args": [
                {
                    "name": "shapex",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shapey",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "broadcast_dynamic_shape"
            ]
        },
        "bitcast": {
            "code": "tf.bitcast(input,type,name=None)",
            "function_name": "bitcast",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "bitcast"
            ]
        },
        "argsort": {
            "code": "tf.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)",
            "function_name": "argsort",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "direction",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "stable",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "argsort"
            ]
        },
        "batchtospace": {
            "code": "tf.batch_to_space(input,block_shape,crops,name=None)",
            "function_name": "batch_to_space",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "crops",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "batch_to_space"
            ]
        }
    },
    "tfjs": {
        "tensor": {
            "code": "tf.tensor(values,shape?,dtype?)",
            "function_name": "tensor",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": "dtype",
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "tensor"
            ]
        },
        "scalar": {
            "code": "tf.scalar(value,dtype?)",
            "function_name": "scalar",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "scalar"
            ]
        },
        "tensord": {
            "code": "tf.tensor6d(values,shape?,dtype?)",
            "function_name": "tensor6d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "tensor6d"
            ]
        },
        "buffer": {
            "code": "buffer()",
            "function_name": "buffer",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "buffer"
            ]
        },
        "clone": {
            "code": "clone()",
            "function_name": "clone",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "clone"
            ]
        },
        "complex": {
            "code": "tf.complex(real,imag)",
            "function_name": "complex",
            "args": [
                {
                    "name": "real",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "real"
                },
                {
                    "name": "imag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "imag"
                }
            ],
            "attrs": [
                "tf",
                "complex"
            ]
        },
        "eye": {
            "code": "tf.eye(numRows,numColumns?,batchShape?,dtype?)",
            "function_name": "eye",
            "args": [
                {
                    "name": "numrows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "numrows"
                },
                {
                    "name": "numcolumns",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "numcolumns"
                },
                {
                    "name": "batchshape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "batchshape"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": "dtype",
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "eye"
            ]
        },
        "fill": {
            "code": "tf.fill(shape,value,dtype?)",
            "function_name": "fill",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "value"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "fill"
            ]
        },
        "imag": {
            "code": "tf.imag(input)",
            "function_name": "imag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "imag"
            ]
        },
        "linspace": {
            "code": "tf.linspace(start,stop,num)",
            "function_name": "linspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tf": "start"
                },
                {
                    "name": "stop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "stop"
                },
                {
                    "name": "num",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "num"
                }
            ],
            "attrs": [
                "tf",
                "linspace"
            ]
        },
        "onehot": {
            "code": "tf.oneHot(indices,depth,onValue?,offValue?)",
            "function_name": "oneHot",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "indices"
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "depth"
                },
                {
                    "name": "onvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "onvalue"
                },
                {
                    "name": "offvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "offvalue"
                }
            ],
            "attrs": [
                "tf",
                "oneHot"
            ]
        },
        "ones": {
            "code": "tf.initializers.ones()",
            "function_name": "ones",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "ones"
            ]
        },
        "oneslike": {
            "code": "tf.onesLike(x)",
            "function_name": "onesLike",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "onesLike"
            ]
        },
        "print": {
            "code": "print(verbose?)",
            "function_name": "print",
            "args": [
                {
                    "name": "verbose",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "print"
            ]
        },
        "range": {
            "code": "tf.range(start,stop,step?,dtype?)",
            "function_name": "range",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tf": null
                },
                {
                    "name": "stop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "step",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": "step",
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": "dtype",
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "range"
            ]
        },
        "real": {
            "code": "tf.real(input)",
            "function_name": "real",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "real"
            ]
        },
        "truncatednormal": {
            "code": "tf.initializers.truncatedNormal(args)",
            "function_name": "truncatedNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "truncatedNormal"
            ]
        },
        "variable": {
            "code": "tf.variable(initialValue,trainable?,name?,dtype?)",
            "function_name": "variable",
            "args": [
                {
                    "name": "initialvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "name"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "variable"
            ]
        },
        "zeros": {
            "code": "tf.initializers.zeros()",
            "function_name": "zeros",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "zeros"
            ]
        },
        "zeroslike": {
            "code": "tf.zerosLike(x)",
            "function_name": "zerosLike",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "zerosLike"
            ]
        },
        "flatten": {
            "code": "tf.util.flatten(arr,result?,skipTypedArray?)",
            "function_name": "flatten",
            "args": [
                {
                    "name": "arr",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "result",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "skiptypedarray",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "flatten"
            ]
        },
        "asscalar": {
            "code": "asScalar()",
            "function_name": "asScalar",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "asScalar"
            ]
        },
        "asd": {
            "code": "as5D(rows,columns,depth,depth2,depth3)",
            "function_name": "as5D",
            "args": [
                {
                    "name": "rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "as5D"
            ]
        },
        "astype": {
            "code": "asType(dtype)",
            "function_name": "asType",
            "args": [
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "asType"
            ]
        },
        "buffersync": {
            "code": "bufferSync()",
            "function_name": "bufferSync",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "bufferSync"
            ]
        },
        "array": {
            "code": "tf.data.array(items)",
            "function_name": "array",
            "args": [
                {
                    "name": "items",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "array"
            ]
        },
        "arraysync": {
            "code": "arraySync()",
            "function_name": "arraySync",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "arraySync"
            ]
        },
        "data": {
            "code": "data()",
            "function_name": "data",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "data"
            ]
        },
        "datasync": {
            "code": "dataSync()",
            "function_name": "dataSync",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "dataSync"
            ]
        },
        "dispose": {
            "code": "tf.dispose(container)",
            "function_name": "dispose",
            "args": [
                {
                    "name": "container",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "dispose"
            ]
        },
        "tofloat": {
            "code": "toFloat()",
            "function_name": "toFloat",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "toFloat"
            ]
        },
        "toint": {
            "code": "toInt()",
            "function_name": "toInt",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "toInt"
            ]
        },
        "tobool": {
            "code": "toBool()",
            "function_name": "toBool",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "toBool"
            ]
        },
        "reshape": {
            "code": "tf.layers.reshape(args)",
            "function_name": "reshape",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "reshape"
            ]
        },
        "reshapeas": {
            "code": "reshapeAs(x)",
            "function_name": "reshapeAs",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "reshapeAs"
            ]
        },
        "expanddims": {
            "code": "tf.expandDims(x,axis?)",
            "function_name": "expandDims",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "expandDims"
            ]
        },
        "cumsum": {
            "code": "tf.cumsum(x,axis?,exclusive?,reverse?)",
            "function_name": "cumsum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "exclusive",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reverse",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "cumsum"
            ]
        },
        "squeeze": {
            "code": "tf.squeeze(x,axis?)",
            "function_name": "squeeze",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "squeeze"
            ]
        },
        "tostring": {
            "code": "toString(verbose?)",
            "function_name": "toString",
            "args": [
                {
                    "name": "verbose",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "toString"
            ]
        },
        "assign": {
            "code": "assign(newValue)",
            "function_name": "assign",
            "args": [
                {
                    "name": "newvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "assign"
            ]
        },
        "set": {
            "code": "set(value,...locs)",
            "function_name": "set",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "locs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "set"
            ]
        },
        "get": {
            "code": "get(...locs)",
            "function_name": "get",
            "args": [
                {
                    "name": "locs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "get"
            ]
        },
        "totensor": {
            "code": "toTensor()",
            "function_name": "toTensor",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "toTensor"
            ]
        },
        "batchtospacend": {
            "code": "tf.batchToSpaceND(x,blockShape,crops)",
            "function_name": "batchToSpaceND",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "crops",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "batchToSpaceND"
            ]
        },
        "broadcastto": {
            "code": "tf.broadcastTo(x,shape)",
            "function_name": "broadcastTo",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "shape"
                }
            ],
            "attrs": [
                "tf",
                "broadcastTo"
            ]
        },
        "cast": {
            "code": "tf.cast(x,dtype)",
            "function_name": "cast",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "cast"
            ]
        },
        "depthtospace": {
            "code": "tf.depthToSpace(x,blockSize,dataFormat?)",
            "function_name": "depthToSpace",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "blocksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "blocksize"
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "dataformat"
                }
            ],
            "attrs": [
                "tf",
                "depthToSpace"
            ]
        },
        "pad": {
            "code": "tf.pad(x,paddings,constantValue?)",
            "function_name": "pad",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "paddings"
                },
                {
                    "name": "constantvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "pad"
            ]
        },
        "setdiffdasync": {
            "code": "tf.setdiff1dAsync(x,y)",
            "function_name": "setdiff1dAsync",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "setdiff1dAsync"
            ]
        },
        "spacetobatchnd": {
            "code": "tf.spaceToBatchND(x,blockShape,paddings)",
            "function_name": "spaceToBatchND",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "blockshape"
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "paddings"
                }
            ],
            "attrs": [
                "tf",
                "spaceToBatchND"
            ]
        },
        "booleanmaskasync": {
            "code": "tf.booleanMaskAsync(tensor,mask,axis?)",
            "function_name": "booleanMaskAsync",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "booleanMaskAsync"
            ]
        },
        "concat": {
            "code": "tf.concat(tensors,axis?)",
            "function_name": "concat",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "concat"
            ]
        },
        "gather": {
            "code": "tf.gather(x,indices,axis?)",
            "function_name": "gather",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "indices"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "gather"
            ]
        },
        "reverse": {
            "code": "tf.reverse(x,axis?)",
            "function_name": "reverse",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "reverse"
            ]
        },
        "slice": {
            "code": "tf.slice(x,begin,size?)",
            "function_name": "slice",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "begin"
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "size"
                }
            ],
            "attrs": [
                "tf",
                "slice"
            ]
        },
        "split": {
            "code": "tf.split(x,numOrSizeSplits,axis?)",
            "function_name": "split",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "numorsizesplits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "numorsizesplits"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "split"
            ]
        },
        "stack": {
            "code": "tf.stack(tensors,axis?)",
            "function_name": "stack",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "tensors",
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "stack"
            ]
        },
        "tile": {
            "code": "tf.tile(x,reps)",
            "function_name": "tile",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "tile"
            ]
        },
        "unstack": {
            "code": "tf.unstack(x,axis?)",
            "function_name": "unstack",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "unstack"
            ]
        },
        "multinomial": {
            "code": "tf.multinomial(logits,numSamples,seed?,normalized?)",
            "function_name": "multinomial",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "numsamples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "numsamples",
                    "tf": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "multinomial"
            ]
        },
        "randomgamma": {
            "code": "tf.randomGamma(shape,alpha,beta?,dtype?,seed?)",
            "function_name": "randomGamma",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "randomGamma"
            ]
        },
        "randomnormal": {
            "code": "tf.initializers.randomNormal(args)",
            "function_name": "randomNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "randomNormal"
            ]
        },
        "randomuniform": {
            "code": "tf.initializers.randomUniform(args)",
            "function_name": "randomUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "randomUniform"
            ]
        },
        "sequential": {
            "code": "tf.sequential(config?)",
            "function_name": "sequential",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "sequential"
            ]
        },
        "model": {
            "code": "tf.model(args)",
            "function_name": "model",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "model"
            ]
        },
        "input": {
            "code": "tf.input(config)",
            "function_name": "input",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "input"
            ]
        },
        "loadgraphmodel": {
            "code": "tf.loadGraphModel(modelUrl,options?)",
            "function_name": "loadGraphModel",
            "args": [
                {
                    "name": "modelurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "options",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "loadGraphModel"
            ]
        },
        "loadlayersmodel": {
            "code": "tf.loadLayersModel(pathOrIOHandler,options?)",
            "function_name": "loadLayersModel",
            "args": [
                {
                    "name": "pathoriohandler",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "options",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "loadLayersModel"
            ]
        },
        "browserdownloads": {
            "code": "tf.io.browserDownloads(fileNamePrefix?)",
            "function_name": "browserDownloads",
            "args": [
                {
                    "name": "filenameprefix",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "browserDownloads"
            ]
        },
        "browserfiles": {
            "code": "tf.io.browserFiles(files)",
            "function_name": "browserFiles",
            "args": [
                {
                    "name": "files",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "browserFiles"
            ]
        },
        "http": {
            "code": "tf.io.http(path,loadOptions?)",
            "function_name": "http",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "loadoptions",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "http"
            ]
        },
        "copymodel": {
            "code": "tf.io.copyModel(sourceURL,destURL)",
            "function_name": "copyModel",
            "args": [
                {
                    "name": "sourceurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "desturl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "copyModel"
            ]
        },
        "listmodels": {
            "code": "tf.io.listModels()",
            "function_name": "listModels",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "listModels"
            ]
        },
        "movemodel": {
            "code": "tf.io.moveModel(sourceURL,destURL)",
            "function_name": "moveModel",
            "args": [
                {
                    "name": "sourceurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "desturl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "moveModel"
            ]
        },
        "removemodel": {
            "code": "tf.io.removeModel(url)",
            "function_name": "removeModel",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "removeModel"
            ]
        },
        "registerclass": {
            "code": "tf.registerClass(cls)",
            "function_name": "registerClass",
            "args": [
                {
                    "name": "cls",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "registerClass"
            ]
        },
        "predict": {
            "code": "predict(x,args?)",
            "function_name": "predict",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "predict"
            ]
        },
        "execute": {
            "code": "execute(inputs,outputs?)",
            "function_name": "execute",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "execute"
            ]
        },
        "executeasync": {
            "code": "executeAsync(inputs,outputs?)",
            "function_name": "executeAsync",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "executeAsync"
            ]
        },
        "summary": {
            "code": "summary(lineLength?,positions?,printFn?)",
            "function_name": "summary",
            "args": [
                {
                    "name": "linelength",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "positions",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "printfn",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "summary"
            ]
        },
        "compile": {
            "code": "compile(args)",
            "function_name": "compile",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "compile"
            ]
        },
        "evaluate": {
            "code": "evaluate(x,y,args?)",
            "function_name": "evaluate",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "evaluate"
            ]
        },
        "evaluatedataset": {
            "code": "evaluateDataset(dataset,args)",
            "function_name": "evaluateDataset",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "evaluateDataset"
            ]
        },
        "predictonbatch": {
            "code": "predictOnBatch(x)",
            "function_name": "predictOnBatch",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "predictOnBatch"
            ]
        },
        "fit": {
            "code": "fit(x,y,args?)",
            "function_name": "fit",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "fit"
            ]
        },
        "fitdataset": {
            "code": "fitDataset(dataset,args)",
            "function_name": "fitDataset",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "fitDataset"
            ]
        },
        "trainonbatch": {
            "code": "trainOnBatch(x,y)",
            "function_name": "trainOnBatch",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "trainOnBatch"
            ]
        },
        "save": {
            "code": "save(handlerOrURL,config?)",
            "function_name": "save",
            "args": [
                {
                    "name": "handlerorurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "save"
            ]
        },
        "getlayer": {
            "code": "getLayer(name?,index?)",
            "function_name": "getLayer",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "getLayer"
            ]
        },
        "add": {
            "code": "tf.add(a,b)",
            "function_name": "add",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "add"
            ]
        },
        "deregisterop": {
            "code": "tf.deregisterOp(name)",
            "function_name": "deregisterOp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "deregisterOp"
            ]
        },
        "getregisteredop": {
            "code": "tf.getRegisteredOp(name)",
            "function_name": "getRegisteredOp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "getRegisteredOp"
            ]
        },
        "registerop": {
            "code": "tf.registerOp(name,opFunc)",
            "function_name": "registerOp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "opfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "registerOp"
            ]
        },
        "elu": {
            "code": "tf.elu(x)",
            "function_name": "elu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "elu"
            ]
        },
        "leakyrelu": {
            "code": "tf.leakyRelu(x,alpha?)",
            "function_name": "leakyRelu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "alpha"
                }
            ],
            "attrs": [
                "tf",
                "leakyRelu"
            ]
        },
        "prelu": {
            "code": "tf.prelu(x,alpha)",
            "function_name": "prelu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "prelu"
            ]
        },
        "relu": {
            "code": "tf.relu6(x)",
            "function_name": "relu6",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "relu6"
            ]
        },
        "softmax": {
            "code": "tf.softmax(logits,dim?)",
            "function_name": "softmax",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": "dim",
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "softmax"
            ]
        },
        "thresholdedrelu": {
            "code": "tf.layers.thresholdedReLU(args?)",
            "function_name": "thresholdedReLU",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "thresholdedReLU"
            ]
        },
        "activation": {
            "code": "tf.layers.activation(args)",
            "function_name": "activation",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "activation"
            ]
        },
        "dense": {
            "code": "tf.layers.dense(args)",
            "function_name": "dense",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "dense"
            ]
        },
        "dropout": {
            "code": "tf.dropout(x,rate,noiseShape?,seed?)",
            "function_name": "dropout",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "noiseshape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "noiseshape"
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "seed"
                }
            ],
            "attrs": [
                "tf",
                "dropout"
            ]
        },
        "embedding": {
            "code": "tf.layers.embedding(args)",
            "function_name": "embedding",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "embedding"
            ]
        },
        "permute": {
            "code": "tf.layers.permute(args)",
            "function_name": "permute",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "permute"
            ]
        },
        "repeatvector": {
            "code": "tf.layers.repeatVector(args)",
            "function_name": "repeatVector",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "repeatVector"
            ]
        },
        "spatialdropoutd": {
            "code": "tf.layers.spatialDropout1d(args)",
            "function_name": "spatialDropout1d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "spatialDropout1d"
            ]
        },
        "convd": {
            "code": "tf.conv3d(x,filter,strides,pad,dataFormat?,dilations?)",
            "function_name": "conv3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "dataformat"
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv3d"
            ]
        },
        "convdtranspose": {
            "code": "tf.conv3dTranspose(x,filter,outputShape,strides,pad)",
            "function_name": "conv3dTranspose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "outputshape"
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv3dTranspose"
            ]
        },
        "croppingd": {
            "code": "tf.layers.cropping2D(args)",
            "function_name": "cropping2D",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "cropping2D"
            ]
        },
        "depthwiseconvd": {
            "code": "tf.depthwiseConv2d(x,filter,strides,pad,dataFormat?,dilations?,dimRoundingMode?)",
            "function_name": "depthwiseConv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "dataformat"
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "depthwiseConv2d"
            ]
        },
        "separableconvd": {
            "code": "tf.separableConv2d(x,depthwiseFilter,pointwiseFilter,strides,pad,dilation?,dataFormat?)",
            "function_name": "separableConv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "depthwisefilter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "pointwisefilter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dilation",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": "dataformat"
                }
            ],
            "attrs": [
                "tf",
                "separableConv2d"
            ]
        },
        "upsamplingd": {
            "code": "tf.layers.upSampling2d(args)",
            "function_name": "upSampling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "upSampling2d"
            ]
        },
        "average": {
            "code": "tf.layers.average(args?)",
            "function_name": "average",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "average"
            ]
        },
        "concatenate": {
            "code": "concatenate(dataset)",
            "function_name": "concatenate",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "concatenate"
            ]
        },
        "dot": {
            "code": "tf.dot(t1,t2)",
            "function_name": "dot",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "dot"
            ]
        },
        "maximum": {
            "code": "tf.maximum(a,b)",
            "function_name": "maximum",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "maximum"
            ]
        },
        "minimum": {
            "code": "tf.minimum(a,b)",
            "function_name": "minimum",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "minimum"
            ]
        },
        "multiply": {
            "code": "tf.layers.multiply(args?)",
            "function_name": "multiply",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "multiply"
            ]
        },
        "batchnormalization": {
            "code": "tf.layers.batchNormalization(args?)",
            "function_name": "batchNormalization",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "batchNormalization"
            ]
        },
        "layernormalization": {
            "code": "tf.layers.layerNormalization(args?)",
            "function_name": "layerNormalization",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "layerNormalization"
            ]
        },
        "averagepoolingd": {
            "code": "tf.layers.averagePooling3d(args)",
            "function_name": "averagePooling3d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "averagePooling3d"
            ]
        },
        "globalaveragepoolingd": {
            "code": "tf.layers.globalAveragePooling2d(args)",
            "function_name": "globalAveragePooling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "globalAveragePooling2d"
            ]
        },
        "globalmaxpoolingd": {
            "code": "tf.layers.globalMaxPooling2d(args)",
            "function_name": "globalMaxPooling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "globalMaxPooling2d"
            ]
        },
        "maxpoolingd": {
            "code": "tf.layers.maxPooling3d(args)",
            "function_name": "maxPooling3d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "maxPooling3d"
            ]
        },
        "gru": {
            "code": "tf.layers.gru(args)",
            "function_name": "gru",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gru"
            ]
        },
        "grucell": {
            "code": "tf.layers.gruCell(args)",
            "function_name": "gruCell",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gruCell"
            ]
        },
        "lstm": {
            "code": "tf.layers.lstm(args)",
            "function_name": "lstm",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "lstm"
            ]
        },
        "lstmcell": {
            "code": "tf.layers.lstmCell(args)",
            "function_name": "lstmCell",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "lstmCell"
            ]
        },
        "rnn": {
            "code": "tf.layers.rnn(args)",
            "function_name": "rnn",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "rnn"
            ]
        },
        "simplernn": {
            "code": "tf.layers.simpleRNN(args)",
            "function_name": "simpleRNN",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "simpleRNN"
            ]
        },
        "simplernncell": {
            "code": "tf.layers.simpleRNNCell(args)",
            "function_name": "simpleRNNCell",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "simpleRNNCell"
            ]
        },
        "stackedrnncells": {
            "code": "tf.layers.stackedRNNCells(args)",
            "function_name": "stackedRNNCells",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "stackedRNNCells"
            ]
        },
        "bidirectional": {
            "code": "tf.layers.bidirectional(args)",
            "function_name": "bidirectional",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "bidirectional"
            ]
        },
        "timedistributed": {
            "code": "tf.layers.timeDistributed(args)",
            "function_name": "timeDistributed",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "timeDistributed"
            ]
        },
        "apply": {
            "code": "apply(inputs,kwargs?)",
            "function_name": "apply",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "apply"
            ]
        },
        "countparams": {
            "code": "countParams()",
            "function_name": "countParams",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "countParams"
            ]
        },
        "build": {
            "code": "build(inputShape)",
            "function_name": "build",
            "args": [
                {
                    "name": "inputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "build"
            ]
        },
        "getweights": {
            "code": "getWeights(trainableOnly?)",
            "function_name": "getWeights",
            "args": [
                {
                    "name": "trainableonly",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "getWeights"
            ]
        },
        "setweights": {
            "code": "setWeights(weights)",
            "function_name": "setWeights",
            "args": [
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "setWeights"
            ]
        },
        "addweight": {
            "code": "addWeight(name,shape,dtype?,initializer?,regularizer?,trainable?,constraint?)",
            "function_name": "addWeight",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "initializer",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "regularizer",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "constraint",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "addWeight"
            ]
        },
        "addloss": {
            "code": "addLoss(losses)",
            "function_name": "addLoss",
            "args": [
                {
                    "name": "losses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "addLoss"
            ]
        },
        "computeoutputshape": {
            "code": "computeOutputShape(inputShape)",
            "function_name": "computeOutputShape",
            "args": [
                {
                    "name": "inputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "computeOutputShape"
            ]
        },
        "getconfig": {
            "code": "getConfig()",
            "function_name": "getConfig",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "getConfig"
            ]
        },
        "inputlayer": {
            "code": "tf.layers.inputLayer(args)",
            "function_name": "inputLayer",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "inputLayer"
            ]
        },
        "zeropaddingd": {
            "code": "tf.layers.zeroPadding2d(args?)",
            "function_name": "zeroPadding2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "zeroPadding2d"
            ]
        },
        "alphadropout": {
            "code": "tf.layers.alphaDropout(args)",
            "function_name": "alphaDropout",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "alphaDropout"
            ]
        },
        "gaussiandropout": {
            "code": "tf.layers.gaussianDropout(args)",
            "function_name": "gaussianDropout",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gaussianDropout"
            ]
        },
        "gaussiannoise": {
            "code": "tf.layers.gaussianNoise(args)",
            "function_name": "gaussianNoise",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gaussianNoise"
            ]
        },
        "masking": {
            "code": "tf.layers.masking(args?)",
            "function_name": "masking",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "masking"
            ]
        },
        "sub": {
            "code": "tf.sub(a,b)",
            "function_name": "sub",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "sub"
            ]
        },
        "mul": {
            "code": "tf.mul(a,b)",
            "function_name": "mul",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "mul"
            ]
        },
        "div": {
            "code": "tf.div(a,b)",
            "function_name": "div",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "div"
            ]
        },
        "addn": {
            "code": "tf.addN(tensors)",
            "function_name": "addN",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "addN"
            ]
        },
        "divnonan": {
            "code": "tf.divNoNan(a,b)",
            "function_name": "divNoNan",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "divNoNan"
            ]
        },
        "floordiv": {
            "code": "tf.floorDiv(a,b)",
            "function_name": "floorDiv",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "floorDiv"
            ]
        },
        "mod": {
            "code": "tf.mod(a,b)",
            "function_name": "mod",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "mod"
            ]
        },
        "pow": {
            "code": "tf.pow(base,exp)",
            "function_name": "pow",
            "args": [
                {
                    "name": "base",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "exp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "pow"
            ]
        },
        "squareddifference": {
            "code": "tf.squaredDifference(a,b)",
            "function_name": "squaredDifference",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "squaredDifference"
            ]
        },
        "abs": {
            "code": "tf.abs(x)",
            "function_name": "abs",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "abs"
            ]
        },
        "acos": {
            "code": "tf.acos(x)",
            "function_name": "acos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "acos"
            ]
        },
        "acosh": {
            "code": "tf.acosh(x)",
            "function_name": "acosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "acosh"
            ]
        },
        "asin": {
            "code": "tf.asin(x)",
            "function_name": "asin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "asin"
            ]
        },
        "asinh": {
            "code": "tf.asinh(x)",
            "function_name": "asinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "asinh"
            ]
        },
        "atan": {
            "code": "tf.atan2(a,b)",
            "function_name": "atan2",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "atan2"
            ]
        },
        "atanh": {
            "code": "tf.atanh(x)",
            "function_name": "atanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "atanh"
            ]
        },
        "ceil": {
            "code": "tf.ceil(x)",
            "function_name": "ceil",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "ceil"
            ]
        },
        "clipbyvalue": {
            "code": "tf.clipByValue(x,clipValueMin,clipValueMax)",
            "function_name": "clipByValue",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "clipvaluemin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "clipvaluemin"
                },
                {
                    "name": "clipvaluemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "clipvaluemax"
                }
            ],
            "attrs": [
                "tf",
                "clipByValue"
            ]
        },
        "cos": {
            "code": "tf.cos(x)",
            "function_name": "cos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "cos"
            ]
        },
        "cosh": {
            "code": "tf.cosh(x)",
            "function_name": "cosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "cosh"
            ]
        },
        "erf": {
            "code": "tf.erf(x)",
            "function_name": "erf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "erf"
            ]
        },
        "exp": {
            "code": "tf.exp(x)",
            "function_name": "exp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "exp"
            ]
        },
        "expm": {
            "code": "tf.expm1(x)",
            "function_name": "expm1",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "expm1"
            ]
        },
        "floor": {
            "code": "tf.floor(x)",
            "function_name": "floor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "floor"
            ]
        },
        "isfinite": {
            "code": "tf.isFinite(x)",
            "function_name": "isFinite",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "isFinite"
            ]
        },
        "isinf": {
            "code": "tf.isInf(x)",
            "function_name": "isInf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "isInf"
            ]
        },
        "isnan": {
            "code": "tf.isNaN(x)",
            "function_name": "isNaN",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "isNaN"
            ]
        },
        "log": {
            "code": "tf.log(x)",
            "function_name": "log",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "log"
            ]
        },
        "logp": {
            "code": "tf.log1p(x)",
            "function_name": "log1p",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "log1p"
            ]
        },
        "logsigmoid": {
            "code": "tf.logSigmoid(x)",
            "function_name": "logSigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "logSigmoid"
            ]
        },
        "neg": {
            "code": "tf.neg(x)",
            "function_name": "neg",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "neg"
            ]
        },
        "reciprocal": {
            "code": "tf.reciprocal(x)",
            "function_name": "reciprocal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "reciprocal"
            ]
        },
        "round": {
            "code": "tf.round(x)",
            "function_name": "round",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "round"
            ]
        },
        "rsqrt": {
            "code": "tf.rsqrt(x)",
            "function_name": "rsqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "rsqrt"
            ]
        },
        "selu": {
            "code": "tf.selu(x)",
            "function_name": "selu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "selu"
            ]
        },
        "sigmoid": {
            "code": "tf.sigmoid(x)",
            "function_name": "sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sigmoid"
            ]
        },
        "sign": {
            "code": "tf.sign(x)",
            "function_name": "sign",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sign"
            ]
        },
        "sin": {
            "code": "tf.sin(x)",
            "function_name": "sin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sin"
            ]
        },
        "sinh": {
            "code": "tf.sinh(x)",
            "function_name": "sinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sinh"
            ]
        },
        "softplus": {
            "code": "tf.softplus(x)",
            "function_name": "softplus",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "softplus"
            ]
        },
        "sqrt": {
            "code": "tf.sqrt(x)",
            "function_name": "sqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sqrt"
            ]
        },
        "square": {
            "code": "tf.square(x)",
            "function_name": "square",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "square"
            ]
        },
        "step": {
            "code": "tf.step(x,alpha?)",
            "function_name": "step",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "step"
            ]
        },
        "tan": {
            "code": "tf.tan(x)",
            "function_name": "tan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "tan"
            ]
        },
        "tanh": {
            "code": "tf.tanh(x)",
            "function_name": "tanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "tanh"
            ]
        },
        "matmul": {
            "code": "tf.matMul(a,b,transposeA?,transposeB?)",
            "function_name": "matMul",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "b"
                },
                {
                    "name": "transposea",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "transposea"
                },
                {
                    "name": "transposeb",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "transposeb"
                }
            ],
            "attrs": [
                "tf",
                "matMul"
            ]
        },
        "norm": {
            "code": "tf.norm(x,ord?,axis?,keepDims?)",
            "function_name": "norm",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ord",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "ord"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "norm"
            ]
        },
        "outerproduct": {
            "code": "tf.outerProduct(v1,v2)",
            "function_name": "outerProduct",
            "args": [
                {
                    "name": "v",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "v",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "outerProduct"
            ]
        },
        "transpose": {
            "code": "tf.transpose(x,perm?)",
            "function_name": "transpose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "perm"
                }
            ],
            "attrs": [
                "tf",
                "transpose"
            ]
        },
        "avgpool": {
            "code": "tf.avgPool(x,filterSize,strides,pad,dimRoundingMode?)",
            "function_name": "avgPool",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "avgPool"
            ]
        },
        "avgpoold": {
            "code": "tf.avgPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)",
            "function_name": "avgPool3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": "dataformat"
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "avgPool3d"
            ]
        },
        "maxpool": {
            "code": "tf.maxPool(x,filterSize,strides,pad,dimRoundingMode?)",
            "function_name": "maxPool",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "maxPool"
            ]
        },
        "maxpoold": {
            "code": "tf.maxPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)",
            "function_name": "maxPool3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": "dataformat"
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "maxPool3d"
            ]
        },
        "pool": {
            "code": "tf.pool(input,windowShape,poolingType,pad,dilations?,strides?)",
            "function_name": "pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "input"
                },
                {
                    "name": "windowshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "windowshape"
                },
                {
                    "name": "poolingtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "poolingtype"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "dilations"
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": "strides"
                }
            ],
            "attrs": [
                "tf",
                "pool"
            ]
        },
        "all": {
            "code": "tf.all(x,axis?,keepDims?)",
            "function_name": "all",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "all"
            ]
        },
        "any": {
            "code": "tf.any(x,axis?,keepDims?)",
            "function_name": "any",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "any"
            ]
        },
        "argmax": {
            "code": "tf.argMax(x,axis?)",
            "function_name": "argMax",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "argMax"
            ]
        },
        "argmin": {
            "code": "tf.argMin(x,axis?)",
            "function_name": "argMin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "argMin"
            ]
        },
        "logsumexp": {
            "code": "tf.logSumExp(x,axis?,keepDims?)",
            "function_name": "logSumExp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "logSumExp"
            ]
        },
        "max": {
            "code": "tf.max(x,axis?,keepDims?)",
            "function_name": "max",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "max"
            ]
        },
        "mean": {
            "code": "tf.mean(x,axis?,keepDims?)",
            "function_name": "mean",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "mean"
            ]
        },
        "min": {
            "code": "tf.min(x,axis?,keepDims?)",
            "function_name": "min",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "min"
            ]
        },
        "prod": {
            "code": "tf.prod(x,axis?,keepDims?)",
            "function_name": "prod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "prod"
            ]
        },
        "sum": {
            "code": "tf.sum(x,axis?,keepDims?)",
            "function_name": "sum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "sum"
            ]
        },
        "batchnorm": {
            "code": "tf.batchNorm(x,mean,variance,offset?,scale?,varianceEpsilon?)",
            "function_name": "batchNorm",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "variance",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "offset",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "varianceepsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "batchNorm"
            ]
        },
        "localresponsenormalization": {
            "code": "tf.localResponseNormalization(x,depthRadius?,bias?,alpha?,beta?)",
            "function_name": "localResponseNormalization",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "depthradius",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "depthradius"
                },
                {
                    "name": "bias",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "bias"
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "alpha"
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "beta"
                }
            ],
            "attrs": [
                "tf",
                "localResponseNormalization"
            ]
        },
        "logsoftmax": {
            "code": "tf.logSoftmax(logits,axis?)",
            "function_name": "logSoftmax",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "logits"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "logSoftmax"
            ]
        },
        "moments": {
            "code": "tf.moments(x,axis?,keepDims?)",
            "function_name": "moments",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "moments"
            ]
        },
        "sparsetodense": {
            "code": "tf.sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue?)",
            "function_name": "sparseToDense",
            "args": [
                {
                    "name": "sparseindices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "sparsevalues",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "sparseToDense"
            ]
        },
        "cropandresize": {
            "code": "tf.image.cropAndResize(image,boxes,boxInd,cropSize,?,extrapolationValue?)",
            "function_name": "cropAndResize",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "image"
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "boxes"
                },
                {
                    "name": "boxind",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "cropsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": "cropsize"
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "extrapolationvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": "extrapolationvalue"
                }
            ],
            "attrs": [
                "tf",
                "image",
                "cropAndResize"
            ]
        },
        "nonmaxsuppression": {
            "code": "tf.image.nonMaxSuppression(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?)",
            "function_name": "nonMaxSuppression",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "boxes"
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "scores"
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "maxoutputsize"
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "iouthreshold"
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "scorethreshold"
                }
            ],
            "attrs": [
                "tf",
                "image",
                "nonMaxSuppression"
            ]
        },
        "nonmaxsuppressionwithscore": {
            "code": "tf.image.nonMaxSuppressionWithScore(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?,softNmsSigma?)",
            "function_name": "nonMaxSuppressionWithScore",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "softnmssigma",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "nonMaxSuppressionWithScore"
            ]
        },
        "resizebilinear": {
            "code": "tf.image.resizeBilinear(images,size,alignCorners?)",
            "function_name": "resizeBilinear",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "aligncorners",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resizeBilinear"
            ]
        },
        "resizenearestneighbor": {
            "code": "tf.image.resizeNearestNeighbor(images,size,alignCorners?)",
            "function_name": "resizeNearestNeighbor",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "aligncorners",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resizeNearestNeighbor"
            ]
        },
        "basiclstmcell": {
            "code": "tf.basicLSTMCell(forgetBias,lstmKernel,lstmBias,data,c,h)",
            "function_name": "basicLSTMCell",
            "args": [
                {
                    "name": "forgetbias",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "lstmkernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "lstmbias",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "c",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "h",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "basicLSTMCell"
            ]
        },
        "multirnncell": {
            "code": "tf.multiRNNCell(lstmCells,data,c,h)",
            "function_name": "multiRNNCell",
            "args": [
                {
                    "name": "lstmcells",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "c",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "h",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "multiRNNCell"
            ]
        },
        "equal": {
            "code": "tf.equal(a,b)",
            "function_name": "equal",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "equal"
            ]
        },
        "greater": {
            "code": "tf.greater(a,b)",
            "function_name": "greater",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "greater"
            ]
        },
        "greaterequal": {
            "code": "tf.greaterEqual(a,b)",
            "function_name": "greaterEqual",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "greaterEqual"
            ]
        },
        "less": {
            "code": "tf.less(a,b)",
            "function_name": "less",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "less"
            ]
        },
        "lessequal": {
            "code": "tf.lessEqual(a,b)",
            "function_name": "lessEqual",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "lessEqual"
            ]
        },
        "logicaland": {
            "code": "tf.logicalAnd(a,b)",
            "function_name": "logicalAnd",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "logicalAnd"
            ]
        },
        "logicalnot": {
            "code": "tf.logicalNot(x)",
            "function_name": "logicalNot",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "logicalNot"
            ]
        },
        "logicalor": {
            "code": "tf.logicalOr(a,b)",
            "function_name": "logicalOr",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "logicalOr"
            ]
        },
        "logicalxor": {
            "code": "tf.logicalXor(a,b)",
            "function_name": "logicalXor",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "logicalXor"
            ]
        },
        "notequal": {
            "code": "tf.notEqual(a,b)",
            "function_name": "notEqual",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "notEqual"
            ]
        },
        "where": {
            "code": "tf.where(condition,a,b)",
            "function_name": "where",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "condition",
                    "tf": "condition"
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "where"
            ]
        },
        "whereasync": {
            "code": "tf.whereAsync(condition)",
            "function_name": "whereAsync",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "whereAsync"
            ]
        },
        "unsortedsegmentsum": {
            "code": "tf.unsortedSegmentSum(x,segmentIds,numSegments)",
            "function_name": "unsortedSegmentSum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "segmentids"
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "numsegments"
                }
            ],
            "attrs": [
                "tf",
                "unsortedSegmentSum"
            ]
        },
        "movingaverage": {
            "code": "tf.movingAverage(v,x,decay,step?,zeroDebias?)",
            "function_name": "movingAverage",
            "args": [
                {
                    "name": "v",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "step",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "zerodebias",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "movingAverage"
            ]
        },
        "gathernd": {
            "code": "tf.gatherND(x,indices)",
            "function_name": "gatherND",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "indices"
                }
            ],
            "attrs": [
                "tf",
                "gatherND"
            ]
        },
        "scatternd": {
            "code": "tf.scatterND(indices,updates,shape)",
            "function_name": "scatterND",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "indices"
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "updates"
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "shape"
                }
            ],
            "attrs": [
                "tf",
                "scatterND"
            ]
        },
        "stridedslice": {
            "code": "tf.stridedSlice(x,begin,end,strides?,beginMask?,endMask?,ellipsisMask?,newAxisMask?,shrinkAxisMask?)",
            "function_name": "stridedSlice",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "begin"
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "end"
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "beginmask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "beginmask"
                },
                {
                    "name": "endmask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": "endmask"
                },
                {
                    "name": "ellipsismask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": "ellipsismask"
                },
                {
                    "name": "newaxismask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 7,
                    "torch": null,
                    "tf": "newaxismask"
                },
                {
                    "name": "shrinkaxismask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 8,
                    "torch": null,
                    "tf": "shrinkaxismask"
                }
            ],
            "attrs": [
                "tf",
                "stridedSlice"
            ]
        },
        "confusionmatrix": {
            "code": "tf.confusionMatrix(labels,predictions,numClasses)",
            "function_name": "confusionMatrix",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "labels"
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "predictions"
                },
                {
                    "name": "numclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "numclasses"
                }
            ],
            "attrs": [
                "tf",
                "confusionMatrix"
            ]
        },
        "intopkasync": {
            "code": "tf.inTopKAsync(predictions,targets,k?)",
            "function_name": "inTopKAsync",
            "args": [
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "inTopKAsync"
            ]
        },
        "topk": {
            "code": "tf.topk(x,k?,sorted?)",
            "function_name": "topk",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": "k",
                    "tf": "k"
                },
                {
                    "name": "sorted",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": "sorted",
                    "tf": "sorted"
                }
            ],
            "attrs": [
                "tf",
                "topk"
            ]
        },
        "fft": {
            "code": "tf.spectral.fft(input)",
            "function_name": "fft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "fft"
            ]
        },
        "ifft": {
            "code": "tf.spectral.ifft(input)",
            "function_name": "ifft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "ifft"
            ]
        },
        "irfft": {
            "code": "tf.spectral.irfft(input)",
            "function_name": "irfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "irfft"
            ]
        },
        "rfft": {
            "code": "tf.spectral.rfft(input,fftLength?)",
            "function_name": "rfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "fftlength"
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "rfft"
            ]
        },
        "frame": {
            "code": "tf.signal.frame(signal,frameLength,frameStep,padEnd?,padValue?)",
            "function_name": "frame",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "signal"
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "framelength"
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "framestep"
                },
                {
                    "name": "padend",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "padend"
                },
                {
                    "name": "padvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "padvalue"
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "frame"
            ]
        },
        "hammingwindow": {
            "code": "tf.signal.hammingWindow(windowLength)",
            "function_name": "hammingWindow",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "windowlength",
                    "tf": "windowlength"
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hammingWindow"
            ]
        },
        "hannwindow": {
            "code": "tf.signal.hannWindow(windowLength)",
            "function_name": "hannWindow",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "windowlength",
                    "tf": "windowlength"
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hannWindow"
            ]
        },
        "stft": {
            "code": "tf.signal.stft(signal,frameLength,frameStep,fftLength?,windowFn?)",
            "function_name": "stft",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "framelength"
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "framestep"
                },
                {
                    "name": "fftlength",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "fftlength"
                },
                {
                    "name": "windowfn",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": "windowfn"
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "stft"
            ]
        },
        "bandpart": {
            "code": "tf.linalg.bandPart(a,numLower,numUpper)",
            "function_name": "bandPart",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "numlower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "numlower"
                },
                {
                    "name": "numupper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "numupper"
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "bandPart"
            ]
        },
        "gramschmidt": {
            "code": "tf.linalg.gramSchmidt(xs)",
            "function_name": "gramSchmidt",
            "args": [
                {
                    "name": "xs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "gramSchmidt"
            ]
        },
        "qr": {
            "code": "tf.linalg.qr(x,fullMatrices?)",
            "function_name": "qr",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "fullmatrices",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "fullmatrices"
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "qr"
            ]
        },
        "grad": {
            "code": "tf.grad(f)",
            "function_name": "grad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "grad"
            ]
        },
        "grads": {
            "code": "tf.grads(f)",
            "function_name": "grads",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "grads"
            ]
        },
        "customgrad": {
            "code": "tf.customGrad(f)",
            "function_name": "customGrad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "customGrad"
            ]
        },
        "valueandgrad": {
            "code": "tf.valueAndGrad(f)",
            "function_name": "valueAndGrad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "valueAndGrad"
            ]
        },
        "valueandgrads": {
            "code": "tf.valueAndGrads(f)",
            "function_name": "valueAndGrads",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "valueAndGrads"
            ]
        },
        "variablegrads": {
            "code": "tf.variableGrads(f,varList?)",
            "function_name": "variableGrads",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "varlist",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "variableGrads"
            ]
        },
        "sgd": {
            "code": "tf.train.sgd(learningRate)",
            "function_name": "sgd",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "sgd"
            ]
        },
        "momentum": {
            "code": "tf.train.momentum(learningRate,momentum,useNesterov?)",
            "function_name": "momentum",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "usenesterov",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "momentum"
            ]
        },
        "adagrad": {
            "code": "tf.train.adagrad(learningRate,initialAccumulatorValue?)",
            "function_name": "adagrad",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "initialaccumulatorvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adagrad"
            ]
        },
        "adadelta": {
            "code": "tf.train.adadelta(learningRate?,rho?,epsilon?)",
            "function_name": "adadelta",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "rho",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adadelta"
            ]
        },
        "adam": {
            "code": "tf.train.adam(learningRate?,beta1?,beta2?,epsilon?)",
            "function_name": "adam",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adam"
            ]
        },
        "adamax": {
            "code": "tf.train.adamax(learningRate?,beta1?,beta2?,epsilon?,decay?)",
            "function_name": "adamax",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adamax"
            ]
        },
        "rmsprop": {
            "code": "tf.train.rmsprop(learningRate,decay?,momentum?,epsilon?,centered?)",
            "function_name": "rmsprop",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "centered",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "rmsprop"
            ]
        },
        "absolutedifference": {
            "code": "tf.losses.absoluteDifference(labels,predictions,weights?,reduction?)",
            "function_name": "absoluteDifference",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "absoluteDifference"
            ]
        },
        "computeweightedloss": {
            "code": "tf.losses.computeWeightedLoss(losses,weights?,reduction?)",
            "function_name": "computeWeightedLoss",
            "args": [
                {
                    "name": "losses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "computeWeightedLoss"
            ]
        },
        "cosinedistance": {
            "code": "tf.losses.cosineDistance(labels,predictions,axis,weights?,reduction?)",
            "function_name": "cosineDistance",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "cosineDistance"
            ]
        },
        "hingeloss": {
            "code": "tf.losses.hingeLoss(labels,predictions,weights?,reduction?)",
            "function_name": "hingeLoss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "hingeLoss"
            ]
        },
        "huberloss": {
            "code": "tf.losses.huberLoss(labels,predictions,weights?,delta?,reduction?)",
            "function_name": "huberLoss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "delta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "huberLoss"
            ]
        },
        "logloss": {
            "code": "tf.losses.logLoss(labels,predictions,weights?,epsilon?,reduction?)",
            "function_name": "logLoss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "logLoss"
            ]
        },
        "meansquarederror": {
            "code": "tf.metrics.meanSquaredError(yTrue,yPred)",
            "function_name": "meanSquaredError",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "meanSquaredError"
            ]
        },
        "sigmoidcrossentropy": {
            "code": "tf.losses.sigmoidCrossEntropy(multiClassLabels,logits,weights?,labelSmoothing?,reduction?)",
            "function_name": "sigmoidCrossEntropy",
            "args": [
                {
                    "name": "multiclasslabels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "labelsmoothing",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "sigmoidCrossEntropy"
            ]
        },
        "softmaxcrossentropy": {
            "code": "tf.losses.softmaxCrossEntropy(onehotLabels,logits,weights?,labelSmoothing?,reduction?)",
            "function_name": "softmaxCrossEntropy",
            "args": [
                {
                    "name": "onehotlabels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "labelsmoothing",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "softmaxCrossEntropy"
            ]
        },
        "minimize": {
            "code": "minimize(f,returnCost?,varList?)",
            "function_name": "minimize",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "returncost",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "varlist",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "minimize"
            ]
        },
        "tidy": {
            "code": "tf.tidy(nameOrFn,fn?)",
            "function_name": "tidy",
            "args": [
                {
                    "name": "nameorfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "tidy"
            ]
        },
        "keep": {
            "code": "tf.keep(result)",
            "function_name": "keep",
            "args": [
                {
                    "name": "result",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "keep"
            ]
        },
        "memory": {
            "code": "tf.memory()",
            "function_name": "memory",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "memory"
            ]
        },
        "time": {
            "code": "tf.time(f)",
            "function_name": "time",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "time"
            ]
        },
        "nextframe": {
            "code": "tf.nextFrame()",
            "function_name": "nextFrame",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "nextFrame"
            ]
        },
        "profile": {
            "code": "tf.profile(f)",
            "function_name": "profile",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "profile"
            ]
        },
        "disposevariables": {
            "code": "tf.disposeVariables()",
            "function_name": "disposeVariables",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "disposeVariables"
            ]
        },
        "enabledebugmode": {
            "code": "tf.enableDebugMode()",
            "function_name": "enableDebugMode",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "enableDebugMode"
            ]
        },
        "enableprodmode": {
            "code": "tf.enableProdMode()",
            "function_name": "enableProdMode",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "enableProdMode"
            ]
        },
        "engine": {
            "code": "tf.engine()",
            "function_name": "engine",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "engine"
            ]
        },
        "env": {
            "code": "tf.env()",
            "function_name": "env",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "env"
            ]
        },
        "forcehalffloat": {
            "code": "tf.webgl.forceHalfFloat()",
            "function_name": "forceHalfFloat",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "webgl",
                "forceHalfFloat"
            ]
        },
        "maxnorm": {
            "code": "tf.constraints.maxNorm(args)",
            "function_name": "maxNorm",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "maxNorm"
            ]
        },
        "minmaxnorm": {
            "code": "tf.constraints.minMaxNorm(config)",
            "function_name": "minMaxNorm",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "minMaxNorm"
            ]
        },
        "nonneg": {
            "code": "tf.constraints.nonNeg()",
            "function_name": "nonNeg",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "nonNeg"
            ]
        },
        "unitnorm": {
            "code": "tf.constraints.unitNorm(args)",
            "function_name": "unitNorm",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "unitNorm"
            ]
        },
        "constant": {
            "code": "tf.initializers.constant(args)",
            "function_name": "constant",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "constant"
            ]
        },
        "glorotnormal": {
            "code": "tf.initializers.glorotNormal(args)",
            "function_name": "glorotNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "glorotNormal"
            ]
        },
        "glorotuniform": {
            "code": "tf.initializers.glorotUniform(args)",
            "function_name": "glorotUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "glorotUniform"
            ]
        },
        "henormal": {
            "code": "tf.initializers.heNormal(args)",
            "function_name": "heNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "heNormal"
            ]
        },
        "heuniform": {
            "code": "tf.initializers.heUniform(args)",
            "function_name": "heUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "heUniform"
            ]
        },
        "identity": {
            "code": "tf.initializers.identity(args)",
            "function_name": "identity",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "identity"
            ]
        },
        "lecunnormal": {
            "code": "tf.initializers.leCunNormal(args)",
            "function_name": "leCunNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "leCunNormal"
            ]
        },
        "lecununiform": {
            "code": "tf.initializers.leCunUniform(args)",
            "function_name": "leCunUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "leCunUniform"
            ]
        },
        "orthogonal": {
            "code": "tf.initializers.orthogonal(args)",
            "function_name": "orthogonal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "orthogonal"
            ]
        },
        "variancescaling": {
            "code": "tf.initializers.varianceScaling(config)",
            "function_name": "varianceScaling",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "varianceScaling"
            ]
        },
        "l": {
            "code": "tf.regularizers.l2(config?)",
            "function_name": "l2",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "regularizers",
                "l2"
            ]
        },
        "ll": {
            "code": "tf.regularizers.l1l2(config?)",
            "function_name": "l1l2",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "regularizers",
                "l1l2"
            ]
        },
        "csv": {
            "code": "tf.data.csv(source,csvConfig?)",
            "function_name": "csv",
            "args": [
                {
                    "name": "source",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "csvconfig",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "csv"
            ]
        },
        "generator": {
            "code": "tf.data.generator(generator)",
            "function_name": "generator",
            "args": [
                {
                    "name": "generator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "generator"
            ]
        },
        "microphone": {
            "code": "tf.data.microphone(microphoneConfig?)",
            "function_name": "microphone",
            "args": [
                {
                    "name": "microphoneconfig",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "microphone"
            ]
        },
        "webcam": {
            "code": "tf.data.webcam(webcamVideoElement?,webcamConfig?)",
            "function_name": "webcam",
            "args": [
                {
                    "name": "webcamvideoelement",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "webcamconfig",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "webcam"
            ]
        },
        "zip": {
            "code": "tf.data.zip(datasets)",
            "function_name": "zip",
            "args": [
                {
                    "name": "datasets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "zip"
            ]
        },
        "columnnames": {
            "code": "columnNames()",
            "function_name": "columnNames",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "columnNames"
            ]
        },
        "batch": {
            "code": "batch(batchSize,smallLastBatch?)",
            "function_name": "batch",
            "args": [
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "smalllastbatch",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "batch"
            ]
        },
        "filter": {
            "code": "filter(predicate)",
            "function_name": "filter",
            "args": [
                {
                    "name": "predicate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "filter"
            ]
        },
        "foreachasync": {
            "code": "forEachAsync(f)",
            "function_name": "forEachAsync",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "forEachAsync"
            ]
        },
        "map": {
            "code": "map(transform)",
            "function_name": "map",
            "args": [
                {
                    "name": "transform",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "map"
            ]
        },
        "mapasync": {
            "code": "mapAsync(transform)",
            "function_name": "mapAsync",
            "args": [
                {
                    "name": "transform",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "mapAsync"
            ]
        },
        "prefetch": {
            "code": "prefetch(bufferSize)",
            "function_name": "prefetch",
            "args": [
                {
                    "name": "buffersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "prefetch"
            ]
        },
        "repeat": {
            "code": "repeat(count?)",
            "function_name": "repeat",
            "args": [
                {
                    "name": "count",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "repeat"
            ]
        },
        "skip": {
            "code": "skip(count)",
            "function_name": "skip",
            "args": [
                {
                    "name": "count",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "skip"
            ]
        },
        "shuffle": {
            "code": "tf.util.shuffle(array)",
            "function_name": "shuffle",
            "args": [
                {
                    "name": "array",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "shuffle"
            ]
        },
        "take": {
            "code": "take(count)",
            "function_name": "take",
            "args": [
                {
                    "name": "count",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "take"
            ]
        },
        "toarray": {
            "code": "toArray()",
            "function_name": "toArray",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "toArray"
            ]
        },
        "assert": {
            "code": "tf.util.assert(expr,msg)",
            "function_name": "assert",
            "args": [
                {
                    "name": "expr",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "msg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "assert"
            ]
        },
        "createshuffledindices": {
            "code": "tf.util.createShuffledIndices(n)",
            "function_name": "createShuffledIndices",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "createShuffledIndices"
            ]
        },
        "decodestring": {
            "code": "tf.decodeString(bytes,encoding?)",
            "function_name": "decodeString",
            "args": [
                {
                    "name": "bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "encoding",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "decodeString"
            ]
        },
        "encodestring": {
            "code": "tf.encodeString(s,encoding?)",
            "function_name": "encodeString",
            "args": [
                {
                    "name": "s",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "encoding",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "encodeString"
            ]
        },
        "fetch": {
            "code": "tf.fetch(path,requestInits?)",
            "function_name": "fetch",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "requestinits",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "fetch"
            ]
        },
        "now": {
            "code": "tf.util.now()",
            "function_name": "now",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "now"
            ]
        },
        "sizefromshape": {
            "code": "tf.util.sizeFromShape(shape)",
            "function_name": "sizeFromShape",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "sizeFromShape"
            ]
        },
        "backend": {
            "code": "tf.backend()",
            "function_name": "backend",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": ""
                }
            ],
            "attrs": [
                "tf",
                "backend"
            ]
        },
        "getbackend": {
            "code": "tf.getBackend()",
            "function_name": "getBackend",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "getBackend"
            ]
        },
        "ready": {
            "code": "tf.ready()",
            "function_name": "ready",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "ready"
            ]
        },
        "registerbackend": {
            "code": "tf.registerBackend(name,factory,priority?)",
            "function_name": "registerBackend",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "factory",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "priority",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "registerBackend"
            ]
        },
        "removebackend": {
            "code": "tf.removeBackend(name)",
            "function_name": "removeBackend",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "removeBackend"
            ]
        },
        "setbackend": {
            "code": "tf.setBackend(backendName)",
            "function_name": "setBackend",
            "args": [
                {
                    "name": "backendname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "setBackend"
            ]
        },
        "frompixels": {
            "code": "tf.browser.fromPixels(pixels,numChannels?)",
            "function_name": "fromPixels",
            "args": [
                {
                    "name": "pixels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "numchannels",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "browser",
                "fromPixels"
            ]
        },
        "topixels": {
            "code": "tf.browser.toPixels(img,canvas?)",
            "function_name": "toPixels",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "canvas",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "browser",
                "toPixels"
            ]
        },
        "binaryaccuracy": {
            "code": "tf.metrics.binaryAccuracy(yTrue,yPred)",
            "function_name": "binaryAccuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "ytrue"
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "ypred"
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "binaryAccuracy"
            ]
        },
        "binarycrossentropy": {
            "code": "tf.metrics.binaryCrossentropy(yTrue,yPred)",
            "function_name": "binaryCrossentropy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "binaryCrossentropy"
            ]
        },
        "categoricalaccuracy": {
            "code": "tf.metrics.categoricalAccuracy(yTrue,yPred)",
            "function_name": "categoricalAccuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "ytrue"
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "ypred"
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "categoricalAccuracy"
            ]
        },
        "categoricalcrossentropy": {
            "code": "tf.metrics.categoricalCrossentropy(yTrue,yPred)",
            "function_name": "categoricalCrossentropy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "categoricalCrossentropy"
            ]
        },
        "cosineproximity": {
            "code": "tf.metrics.cosineProximity(yTrue,yPred)",
            "function_name": "cosineProximity",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "cosineProximity"
            ]
        },
        "meanabsoluteerror": {
            "code": "tf.metrics.meanAbsoluteError(yTrue,yPred)",
            "function_name": "meanAbsoluteError",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "meanAbsoluteError"
            ]
        },
        "meanabsolutepercentageerror": {
            "code": "tf.metrics.meanAbsolutePercentageError(yTrue,yPred)",
            "function_name": "meanAbsolutePercentageError",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "meanAbsolutePercentageError"
            ]
        },
        "precision": {
            "code": "tf.metrics.precision(yTrue,yPred)",
            "function_name": "precision",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "precision"
            ]
        },
        "recall": {
            "code": "tf.metrics.recall(yTrue,yPred)",
            "function_name": "recall",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "recall"
            ]
        },
        "sparsecategoricalaccuracy": {
            "code": "tf.metrics.sparseCategoricalAccuracy(yTrue,yPred)",
            "function_name": "sparseCategoricalAccuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "ytrue"
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "ypred"
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "sparseCategoricalAccuracy"
            ]
        },
        "earlystopping": {
            "code": "tf.callbacks.earlyStopping(args?)",
            "function_name": "earlyStopping",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "callbacks",
                "earlyStopping"
            ]
        }
    },
    "torch": {
        "alexnet": {
            "code": "torchvision.models.alexnet(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "alexnet",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "alexnet"
            ]
        },
        "vgg": {
            "code": "torchvision.models.vgg19(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg19",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg19"
            ]
        },
        "vggbn": {
            "code": "torchvision.models.vgg19_bn(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg19_bn",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg19_bn"
            ]
        },
        "resnet": {
            "code": "torchvision.models.resnet152(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnet152",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnet152"
            ]
        },
        "squeezenet": {
            "code": "torchvision.models.squeezenet1_1(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "squeezenet1_1",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "squeezenet1_1"
            ]
        },
        "densenet": {
            "code": "torchvision.models.densenet201(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "densenet201",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "densenet201"
            ]
        },
        "inceptionv": {
            "code": "torchvision.models.inception_v3(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "inception_v3",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "inception_v3"
            ]
        },
        "googlenet": {
            "code": "torchvision.models.googlenet(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "googlenet",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "googlenet"
            ]
        },
        "shufflenetvx": {
            "code": "torchvision.models.shufflenet_v2_x2_0(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "shufflenet_v2_x2_0",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "shufflenet_v2_x2_0"
            ]
        },
        "mobilenetv": {
            "code": "torchvision.models.mobilenet_v2(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mobilenet_v2",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mobilenet_v2"
            ]
        },
        "resnextxd": {
            "code": "torchvision.models.resnext101_32x8d(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnext101_32x8d",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnext101_32x8d"
            ]
        },
        "wideresnet": {
            "code": "torchvision.models.wide_resnet101_2(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "wide_resnet101_2",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "wide_resnet101_2"
            ]
        },
        "mnasnet": {
            "code": "torchvision.models.mnasnet1_3(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mnasnet1_3",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mnasnet1_3"
            ]
        },
        "fcnresnet": {
            "code": "torchvision.models.segmentation.fcn_resnet101(pretrained=False,progress=True,num_classes=21,aux_loss=None,**kwargs)¶",
            "function_name": "fcn_resnet101",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "auxloss",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "segmentation",
                "fcn_resnet101"
            ]
        },
        "deeplabvresnet": {
            "code": "torchvision.models.segmentation.deeplabv3_resnet101(pretrained=False,progress=True,num_classes=21,aux_loss=None,**kwargs)¶",
            "function_name": "deeplabv3_resnet101",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "auxloss",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "segmentation",
                "deeplabv3_resnet101"
            ]
        },
        "fasterrcnnresnetfpn": {
            "code": "torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False,progress=True,num_classes=91,pretrained_backbone=True,**kwargs)¶",
            "function_name": "fasterrcnn_resnet50_fpn",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrainedbackbone",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "detection",
                "fasterrcnn_resnet50_fpn"
            ]
        },
        "maskrcnnresnetfpn": {
            "code": "torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=False,progress=True,num_classes=91,pretrained_backbone=True,**kwargs)¶",
            "function_name": "maskrcnn_resnet50_fpn",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrainedbackbone",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "detection",
                "maskrcnn_resnet50_fpn"
            ]
        },
        "keypointrcnnresnetfpn": {
            "code": "torchvision.models.detection.keypointrcnn_resnet50_fpn(pretrained=False,progress=True,num_classes=2,num_keypoints=17,pretrained_backbone=True,**kwargs)¶",
            "function_name": "keypointrcnn_resnet50_fpn",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numclasses",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numkeypoints",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrainedbackbone",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "detection",
                "keypointrcnn_resnet50_fpn"
            ]
        },
        "rd": {
            "code": "torchvision.models.video.r3d_18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "r3d_18",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "video",
                "r3d_18"
            ]
        },
        "makegrid": {
            "code": "torchvision.utils.make_grid(tensor,nrow=8,padding=2,normalize=False,range=None,scale_each=False,pad_value=0)¶",
            "function_name": "make_grid",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "nrow",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalize",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "range",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scaleeach",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "utils",
                "make_grid"
            ]
        },
        "saveimage": {
            "code": "torchvision.utils.save_image(tensor,fp,nrow=8,padding=2,normalize=False,range=None,scale_each=False,pad_value=0,format=None)¶",
            "function_name": "save_image",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "fp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "nrow",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalize",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "range",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scaleeach",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "utils",
                "save_image"
            ]
        },
        "mc": {
            "code": "torchvision.models.video.mc3_18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mc3_18",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "video",
                "mc3_18"
            ]
        },
        "rplusd": {
            "code": "torchvision.models.video.r2plus1d_18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "r2plus1d_18",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "video",
                "r2plus1d_18"
            ]
        },
        "adjustbrightness": {
            "code": "torchvision.transforms.functional.adjust_brightness(img,brightness_factor)¶",
            "function_name": "adjust_brightness",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "brightnessfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_brightness"
            ]
        },
        "nms": {
            "code": "torchvision.ops.nms(boxes,scores,iou_threshold)¶",
            "function_name": "nms",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "ops",
                "nms"
            ]
        },
        "roipool": {
            "code": "torchvision.ops.roi_pool(input,boxes,output_size,spatial_scale=1.0)¶",
            "function_name": "roi_pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "spatialscale",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "ops",
                "roi_pool"
            ]
        },
        "adjustcontrast": {
            "code": "torchvision.transforms.functional.adjust_contrast(img,contrast_factor)¶",
            "function_name": "adjust_contrast",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "contrastfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "contrastfactor"
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_contrast"
            ]
        },
        "adjustgamma": {
            "code": "torchvision.transforms.functional.adjust_gamma(img,gamma,gain=1)¶",
            "function_name": "adjust_gamma",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "gamma"
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "gain"
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_gamma"
            ]
        },
        "adjusthue": {
            "code": "torchvision.transforms.functional.adjust_hue(img,hue_factor)¶",
            "function_name": "adjust_hue",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "huefactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_hue"
            ]
        },
        "adjustsaturation": {
            "code": "torchvision.transforms.functional.adjust_saturation(img,saturation_factor)¶",
            "function_name": "adjust_saturation",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "saturationfactor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "saturationfactor"
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_saturation"
            ]
        },
        "affine": {
            "code": "torchvision.transforms.functional.affine(img,angle,translate,scale,shear,resample=0,fillcolor=None)¶",
            "function_name": "affine",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "angle",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "translate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "shear",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "resample",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "fillcolor",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "affine"
            ]
        },
        "centercrop": {
            "code": "torchvision.transforms.functional.center_crop(img,output_size)¶",
            "function_name": "center_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "center_crop"
            ]
        },
        "crop": {
            "code": "torchvision.transforms.functional.crop(img,top,left,height,width)¶",
            "function_name": "crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "top",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "left",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "crop"
            ]
        },
        "erase": {
            "code": "torchvision.transforms.functional.erase(img,i,j,h,w,v,inplace=False)¶",
            "function_name": "erase",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "i",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "j",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "h",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "w",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "v",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "erase"
            ]
        },
        "fivecrop": {
            "code": "torchvision.transforms.functional.five_crop(img,size)¶",
            "function_name": "five_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "five_crop"
            ]
        },
        "hflip": {
            "code": "torchvision.transforms.functional.hflip(img)¶",
            "function_name": "hflip",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "hflip"
            ]
        },
        "normalize": {
            "code": "torchvision.transforms.functional.normalize(tensor,mean,std,inplace=False)¶",
            "function_name": "normalize",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "std",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "normalize"
            ]
        },
        "perspective": {
            "code": "torchvision.transforms.functional.perspective(img,startpoints,endpoints,interpolation=3)¶",
            "function_name": "perspective",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "startpoints",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "endpoints",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "perspective"
            ]
        },
        "resize": {
            "code": "torchvision.transforms.functional.resize(img,size,interpolation=2)¶",
            "function_name": "resize",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "size"
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "resize"
            ]
        },
        "resizedcrop": {
            "code": "torchvision.transforms.functional.resized_crop(img,top,left,height,width,size,interpolation=2)¶",
            "function_name": "resized_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "top",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "left",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "resized_crop"
            ]
        },
        "rotate": {
            "code": "torchvision.transforms.functional.rotate(img,angle,resample=False,expand=False,center=None,fill=0)¶",
            "function_name": "rotate",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "angle",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "resample",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "expand",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "center",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "fill",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "rotate"
            ]
        },
        "tencrop": {
            "code": "torchvision.transforms.functional.ten_crop(img,size,vertical_flip=False)¶",
            "function_name": "ten_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "verticalflip",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "ten_crop"
            ]
        },
        "tograyscale": {
            "code": "torchvision.transforms.functional.to_grayscale(img,num_output_channels=1)¶",
            "function_name": "to_grayscale",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numoutputchannels",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "to_grayscale"
            ]
        },
        "topilimage": {
            "code": "torchvision.transforms.functional.to_pil_image(pic,mode=None)¶",
            "function_name": "to_pil_image",
            "args": [
                {
                    "name": "pic",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "to_pil_image"
            ]
        },
        "totensor": {
            "code": "torchvision.transforms.functional.to_tensor(pic)¶",
            "function_name": "to_tensor",
            "args": [
                {
                    "name": "pic",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "to_tensor"
            ]
        },
        "vflip": {
            "code": "torchvision.transforms.functional.vflip(img)¶",
            "function_name": "vflip",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "vflip"
            ]
        },
        "getimagebackend": {
            "code": "torchvision.get_image_backend()¶",
            "function_name": "get_image_backend",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "get_image_backend"
            ]
        },
        "setimagebackend": {
            "code": "torchvision.set_image_backend(backend)¶",
            "function_name": "set_image_backend",
            "args": [
                {
                    "name": "backend",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "set_image_backend"
            ]
        },
        "setvideobackend": {
            "code": "torchvision.set_video_backend(backend)¶",
            "function_name": "set_video_backend",
            "args": [
                {
                    "name": "backend",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "set_video_backend"
            ]
        },
        "getworkerinfo": {
            "code": "torch.distributed.rpc.get_worker_info(worker_name=None)¶",
            "function_name": "get_worker_info",
            "args": [
                {
                    "name": "workername",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "get_worker_info"
            ]
        },
        "fromdlpack": {
            "code": "torch.utils.dlpack.from_dlpack(dlpack)→Tensor¶",
            "function_name": "from_dlpack",
            "args": [
                {
                    "name": "dlpack",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "dlpack",
                "from_dlpack"
            ]
        },
        "todlpack": {
            "code": "torch.utils.dlpack.to_dlpack(tensor)→PyCapsule¶",
            "function_name": "to_dlpack",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "dlpack",
                "to_dlpack"
            ]
        },
        "loadurl": {
            "code": "torch.utils.model_zoo.load_url(url,model_dir=None,map_location=None,progress=True,check_hash=False)¶",
            "function_name": "load_url",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "modeldir",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "maplocation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "checkhash",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "model_zoo",
                "load_url"
            ]
        },
        "randomsplit": {
            "code": "torch.utils.data.random_split(dataset,lengths)¶",
            "function_name": "random_split",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "data",
                "random_split"
            ]
        },
        "rpcsync": {
            "code": "torch.distributed.rpc.rpc_sync(to,func,args=None,kwargs=None)¶",
            "function_name": "rpc_sync",
            "args": [
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "rpc_sync"
            ]
        },
        "rpcasync": {
            "code": "torch.distributed.rpc.rpc_async(to,func,args=None,kwargs=None)¶",
            "function_name": "rpc_async",
            "args": [
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "rpc_async"
            ]
        },
        "remote": {
            "code": "torch.distributed.rpc.remote(to,func,args=None,kwargs=None)¶",
            "function_name": "remote",
            "args": [
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "remote"
            ]
        },
        "shutdown": {
            "code": "torch.distributed.rpc.shutdown(graceful=True)¶",
            "function_name": "shutdown",
            "args": [
                {
                    "name": "graceful",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "shutdown"
            ]
        },
        "checkpoint": {
            "code": "torch.utils.checkpoint.checkpoint(function,*args,**kwargs)¶",
            "function_name": "checkpoint",
            "args": [
                {
                    "name": "function",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "checkpoint",
                "checkpoint"
            ]
        },
        "checkpointsequential": {
            "code": "torch.utils.checkpoint.checkpoint_sequential(functions,segments,*inputs,**kwargs)¶",
            "function_name": "checkpoint_sequential",
            "args": [
                {
                    "name": "functions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "checkpoint",
                "checkpoint_sequential"
            ]
        },
        "cppextension": {
            "code": "torch.utils.cpp_extension.CppExtension(name,sources,*args,**kwargs)¶",
            "function_name": "CppExtension",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sources",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "CppExtension"
            ]
        },
        "cudaextension": {
            "code": "torch.utils.cpp_extension.CUDAExtension(name,sources,*args,**kwargs)¶",
            "function_name": "CUDAExtension",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sources",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "CUDAExtension"
            ]
        },
        "buildextension": {
            "code": "torch.utils.cpp_extension.BuildExtension(*args,**kwargs)¶",
            "function_name": "BuildExtension",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "BuildExtension"
            ]
        },
        "load": {
            "code": "torch.hub.load(github,model,*args,**kwargs)¶",
            "function_name": "load",
            "args": [
                {
                    "name": "github",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "load"
            ]
        },
        "loadinline": {
            "code": "torch.utils.cpp_extension.load_inline(name,cpp_sources,cuda_sources=None,functions=None,extra_cflags=None,extra_cuda_cflags=None,extra_ldflags=None,extra_include_paths=None,build_directory=None,verbose=False,with_cuda=None,is_python_module=True,with_pytorch_error_handling=True)¶",
            "function_name": "load_inline",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "cppsources",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "cudasources",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "functions",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "extracflags",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "extracudacflags",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "extraldflags",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "extraincludepaths",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "builddirectory",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "withcuda",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "ispythonmodule",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "withpytorcherrorhandling",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "load_inline"
            ]
        },
        "includepaths": {
            "code": "torch.utils.cpp_extension.include_paths(cuda=False)¶",
            "function_name": "include_paths",
            "args": [
                {
                    "name": "cuda",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "include_paths"
            ]
        },
        "checkcompilerabicompatibility": {
            "code": "torch.utils.cpp_extension.check_compiler_abi_compatibility(compiler)¶",
            "function_name": "check_compiler_abi_compatibility",
            "args": [
                {
                    "name": "compiler",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "check_compiler_abi_compatibility"
            ]
        },
        "verifyninjaavailability": {
            "code": "torch.utils.cpp_extension.verify_ninja_availability()¶",
            "function_name": "verify_ninja_availability",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "verify_ninja_availability"
            ]
        },
        "quantize": {
            "code": "torch.quantization.quantize(model,run_fn,run_args,mapping=None,inplace=False)¶",
            "function_name": "quantize",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "runfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "runargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "quantize"
            ]
        },
        "addmm": {
            "code": "torch.addmm(beta=1,input,alpha=1,mat1,mat2,out=None)→Tensor¶",
            "function_name": "addmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "addmm"
            ]
        },
        "mm": {
            "code": "torch.mm(input,mat2,out=None)→Tensor¶",
            "function_name": "mm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "mm"
            ]
        },
        "sum": {
            "code": "torch.sum(input,dim,keepdim=False,dtype=None)→Tensor",
            "function_name": "sum",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sum"
            ]
        },
        "quantizedynamic": {
            "code": "torch.quantization.quantize_dynamic(model,qconfig_spec=None,dtype=torch.qint8,mapping=None,inplace=False)¶",
            "function_name": "quantize_dynamic",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "qconfigspec",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "quantize_dynamic"
            ]
        },
        "quantizeqat": {
            "code": "torch.quantization.quantize_qat(model,run_fn,run_args,inplace=False)¶",
            "function_name": "quantize_qat",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "runfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "runargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "quantize_qat"
            ]
        },
        "prepare": {
            "code": "torch.quantization.prepare(model,qconfig_dict=None,inplace=False)¶",
            "function_name": "prepare",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "qconfigdict",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "prepare"
            ]
        },
        "prepareqat": {
            "code": "torch.quantization.prepare_qat(model,mapping=None,inplace=False)¶",
            "function_name": "prepare_qat",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "prepare_qat"
            ]
        },
        "convert": {
            "code": "torch.quantization.convert(module,mapping=None,inplace=False)¶",
            "function_name": "convert",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "convert"
            ]
        },
        "addquantdequant": {
            "code": "torch.quantization.add_quant_dequant(module)¶",
            "function_name": "add_quant_dequant",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "add_quant_dequant"
            ]
        },
        "addobserver": {
            "code": "torch.quantization.add_observer_(module)¶",
            "function_name": "add_observer_",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "add_observer_"
            ]
        },
        "swapmodule": {
            "code": "torch.quantization.swap_module(mod,mapping)¶",
            "function_name": "swap_module",
            "args": [
                {
                    "name": "mod",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mapping",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "swap_module"
            ]
        },
        "propagateqconfig": {
            "code": "torch.quantization.propagate_qconfig_(module,qconfig_dict=None)¶",
            "function_name": "propagate_qconfig_",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "qconfigdict",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "propagate_qconfig_"
            ]
        },
        "defaultevalfn": {
            "code": "torch.quantization.default_eval_fn(model,calib_data)¶",
            "function_name": "default_eval_fn",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "calibdata",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "default_eval_fn"
            ]
        },
        "relu": {
            "code": "torch.nn.functional.relu6(input,inplace=False)→Tensor¶",
            "function_name": "relu6",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "relu6"
            ]
        },
        "linear": {
            "code": "torch.nn.functional.linear(input,weight,bias=None)¶",
            "function_name": "linear",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "linear"
            ]
        },
        "maxpoold": {
            "code": "torch.nn.functional.max_pool3d(*args,**kwargs)¶",
            "function_name": "max_pool3d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_pool3d"
            ]
        },
        "adaptiveavgpoold": {
            "code": "torch.nn.functional.adaptive_avg_pool3d(input,output_size)¶",
            "function_name": "adaptive_avg_pool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_avg_pool3d"
            ]
        },
        "avgpoold": {
            "code": "torch.nn.functional.avg_pool3d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True,divisor_override=None)→Tensor¶",
            "function_name": "avg_pool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "kernelsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "padding"
                },
                {
                    "name": "ceilmode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "countincludepad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "divisoroverride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "avg_pool3d"
            ]
        },
        "upsamplebilinear": {
            "code": "torch.nn.functional.upsample_bilinear(input,size=None,scale_factor=None)¶",
            "function_name": "upsample_bilinear",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scalefactor",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "upsample_bilinear"
            ]
        },
        "upsamplenearest": {
            "code": "torch.nn.functional.upsample_nearest(input,size=None,scale_factor=None)¶",
            "function_name": "upsample_nearest",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scalefactor",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "upsample_nearest"
            ]
        },
        "getrngstate": {
            "code": "torch.get_rng_state()¶",
            "function_name": "get_rng_state",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "get_rng_state"
            ]
        },
        "initialseed": {
            "code": "torch.initial_seed()¶",
            "function_name": "initial_seed",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "initial_seed"
            ]
        },
        "manualseed": {
            "code": "torch.manual_seed(seed)¶",
            "function_name": "manual_seed",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "manual_seed"
            ]
        },
        "seed": {
            "code": "torch.seed()¶",
            "function_name": "seed",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "seed"
            ]
        },
        "setrngstate": {
            "code": "torch.set_rng_state(new_state)¶",
            "function_name": "set_rng_state",
            "args": [
                {
                    "name": "newstate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_rng_state"
            ]
        },
        "export": {
            "code": "torch.jit.export(fn)¶",
            "function_name": "export",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "export"
            ]
        },
        "script": {
            "code": "torch.jit.script(obj)¶",
            "function_name": "script",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "script"
            ]
        },
        "currentblashandle": {
            "code": "torch.cuda.current_blas_handle()¶",
            "function_name": "current_blas_handle",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "current_blas_handle"
            ]
        },
        "calculategain": {
            "code": "torch.nn.init.calculate_gain(nonlinearity,param=None)¶",
            "function_name": "calculate_gain",
            "args": [
                {
                    "name": "nonlinearity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "param",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "calculate_gain"
            ]
        },
        "registercustomopsymbolic": {
            "code": "torch.onnx.register_custom_op_symbolic(symbolic_name,symbolic_fn,opset_version)¶",
            "function_name": "register_custom_op_symbolic",
            "args": [
                {
                    "name": "symbolicname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "symbolicfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "opsetversion",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "register_custom_op_symbolic"
            ]
        },
        "shapeastensor": {
            "code": "torch.onnx.operators.shape_as_tensor(x)¶",
            "function_name": "shape_as_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "operators",
                "shape_as_tensor"
            ]
        },
        "settraining": {
            "code": "torch.onnx.set_training(model,mode)¶",
            "function_name": "set_training",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "set_training"
            ]
        },
        "isinonnxexport": {
            "code": "torch.onnx.is_in_onnx_export()¶",
            "function_name": "is_in_onnx_export",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "is_in_onnx_export"
            ]
        },
        "ignore": {
            "code": "torch.jit.ignore(drop=False,**kwargs)¶",
            "function_name": "ignore",
            "args": [
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "drop",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "ignore"
            ]
        },
        "unused": {
            "code": "torch.jit.unused(fn)¶",
            "function_name": "unused",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "unused"
            ]
        },
        "isscripting": {
            "code": "torch.jit.is_scripting()¶",
            "function_name": "is_scripting",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "is_scripting"
            ]
        },
        "currentdevice": {
            "code": "torch.cuda.current_device()¶",
            "function_name": "current_device",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "current_device"
            ]
        },
        "currentstream": {
            "code": "torch.cuda.current_stream(device=None)¶",
            "function_name": "current_stream",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "current_stream"
            ]
        },
        "defaultstream": {
            "code": "torch.cuda.default_stream(device=None)¶",
            "function_name": "default_stream",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "default_stream"
            ]
        },
        "devicecount": {
            "code": "torch.cuda.device_count()¶",
            "function_name": "device_count",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "device_count"
            ]
        },
        "getdevicecapability": {
            "code": "torch.cuda.get_device_capability(device=None)¶",
            "function_name": "get_device_capability",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "get_device_capability"
            ]
        },
        "getdevicename": {
            "code": "torch.cuda.get_device_name(device=None)¶",
            "function_name": "get_device_name",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "get_device_name"
            ]
        },
        "init": {
            "code": "torch.cuda.init()¶",
            "function_name": "init",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "init"
            ]
        },
        "ipccollect": {
            "code": "torch.cuda.ipc_collect()¶",
            "function_name": "ipc_collect",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "ipc_collect"
            ]
        },
        "isavailable": {
            "code": "torch.cuda.is_available()¶",
            "function_name": "is_available",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "is_available"
            ]
        },
        "isinitialized": {
            "code": "torch.distributed.is_initialized()¶",
            "function_name": "is_initialized",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "is_initialized"
            ]
        },
        "setdevice": {
            "code": "torch.cuda.set_device(device)¶",
            "function_name": "set_device",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "set_device"
            ]
        },
        "stream": {
            "code": "torch.cuda.stream(stream)¶",
            "function_name": "stream",
            "args": [
                {
                    "name": "stream",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "stream"
            ]
        },
        "synchronize": {
            "code": "torch.cuda.synchronize(device=None)¶",
            "function_name": "synchronize",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "synchronize"
            ]
        },
        "getrngstateall": {
            "code": "torch.cuda.get_rng_state_all()¶",
            "function_name": "get_rng_state_all",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "get_rng_state_all"
            ]
        },
        "setrngstateall": {
            "code": "torch.cuda.set_rng_state_all(new_states)¶",
            "function_name": "set_rng_state_all",
            "args": [
                {
                    "name": "newstates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "set_rng_state_all"
            ]
        },
        "manualseedall": {
            "code": "torch.cuda.manual_seed_all(seed)¶",
            "function_name": "manual_seed_all",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "manual_seed_all"
            ]
        },
        "seedall": {
            "code": "torch.cuda.seed_all()¶",
            "function_name": "seed_all",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "seed_all"
            ]
        },
        "broadcast": {
            "code": "torch.cuda.comm.broadcast(tensor,devices)¶",
            "function_name": "broadcast",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "broadcast"
            ]
        },
        "broadcastcoalesced": {
            "code": "torch.cuda.comm.broadcast_coalesced(tensors,devices,buffer_size=10485760)¶",
            "function_name": "broadcast_coalesced",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "buffersize",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "broadcast_coalesced"
            ]
        },
        "reduceadd": {
            "code": "torch.cuda.comm.reduce_add(inputs,destination=None)¶",
            "function_name": "reduce_add",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "destination",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "reduce_add"
            ]
        },
        "scatter": {
            "code": "torch.cuda.comm.scatter(tensor,devices,chunk_sizes=None,dim=0,streams=None)¶",
            "function_name": "scatter",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "chunksizes",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "streams",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "scatter"
            ]
        },
        "gather": {
            "code": "torch.gather(input,dim,index,out=None,sparse_grad=False)→Tensor¶",
            "function_name": "gather",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sparsegrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "gather"
            ]
        },
        "emptycache": {
            "code": "torch.cuda.empty_cache()¶",
            "function_name": "empty_cache",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "empty_cache"
            ]
        },
        "memorystats": {
            "code": "torch.cuda.memory_stats(device=None)¶",
            "function_name": "memory_stats",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_stats"
            ]
        },
        "uniform": {
            "code": "torch.nn.init.uniform_(tensor,a=0.0,b=1.0)¶",
            "function_name": "uniform_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "uniform_"
            ]
        },
        "normal": {
            "code": "torch.normal(mean,std,size,*,out=None)→Tensor",
            "function_name": "normal",
            "args": [
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "mean"
                },
                {
                    "name": "std",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "normal"
            ]
        },
        "constant": {
            "code": "torch.nn.init.constant_(tensor,val)¶",
            "function_name": "constant_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "val",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "constant_"
            ]
        },
        "ones": {
            "code": "torch.ones(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "ones",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ones"
            ]
        },
        "zeros": {
            "code": "torch.zeros(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "zeros",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "zeros"
            ]
        },
        "eye": {
            "code": "torch.eye(n,m=None,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "eye",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "m",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype",
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "eye"
            ]
        },
        "dirac": {
            "code": "torch.nn.init.dirac_(tensor)¶",
            "function_name": "dirac_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "dirac_"
            ]
        },
        "xavieruniform": {
            "code": "torch.nn.init.xavier_uniform_(tensor,gain=1.0)¶",
            "function_name": "xavier_uniform_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "xavier_uniform_"
            ]
        },
        "xaviernormal": {
            "code": "torch.nn.init.xavier_normal_(tensor,gain=1.0)¶",
            "function_name": "xavier_normal_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "xavier_normal_"
            ]
        },
        "orthogonal": {
            "code": "torch.nn.init.orthogonal_(tensor,gain=1)¶",
            "function_name": "orthogonal_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "orthogonal_"
            ]
        },
        "sparse": {
            "code": "torch.nn.init.sparse_(tensor,sparsity,std=0.01)¶",
            "function_name": "sparse_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sparsity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "std",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "sparse_"
            ]
        },
        "backward": {
            "code": "torch.autograd.backward(tensors,grad_tensors=None,retain_graph=None,create_graph=False,grad_variables=None)¶",
            "function_name": "backward",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gradtensors",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "retaingraph",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "creategraph",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gradvariables",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "autograd",
                "backward"
            ]
        },
        "list": {
            "code": "torch.hub.list(github,force_reload=False)¶",
            "function_name": "list",
            "args": [
                {
                    "name": "github",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "forcereload",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "list"
            ]
        },
        "help": {
            "code": "torch.hub.help(github,model,force_reload=False)¶",
            "function_name": "help",
            "args": [
                {
                    "name": "github",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "forcereload",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "help"
            ]
        },
        "downloadurltofile": {
            "code": "torch.hub.download_url_to_file(url,dst,hash_prefix=None,progress=True)¶",
            "function_name": "download_url_to_file",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dst",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "hashprefix",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "download_url_to_file"
            ]
        },
        "loadstatedictfromurl": {
            "code": "torch.hub.load_state_dict_from_url(url,model_dir=None,map_location=None,progress=True,check_hash=False)¶",
            "function_name": "load_state_dict_from_url",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "modeldir",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "maplocation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "checkhash",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "load_state_dict_from_url"
            ]
        },
        "setdir": {
            "code": "torch.hub.set_dir(d)¶",
            "function_name": "set_dir",
            "args": [
                {
                    "name": "d",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "set_dir"
            ]
        },
        "kldivergence": {
            "code": "torch.distributions.kl.kl_divergence(p,q)¶",
            "function_name": "kl_divergence",
            "args": [
                {
                    "name": "p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "q",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributions",
                "kl",
                "kl_divergence"
            ]
        },
        "memorysummary": {
            "code": "torch.cuda.memory_summary(device=None,abbreviated=False)¶",
            "function_name": "memory_summary",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "abbreviated",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_summary"
            ]
        },
        "memorysnapshot": {
            "code": "torch.cuda.memory_snapshot()¶",
            "function_name": "memory_snapshot",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_snapshot"
            ]
        },
        "memoryallocated": {
            "code": "torch.cuda.memory_allocated(device=None)¶",
            "function_name": "memory_allocated",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_allocated"
            ]
        },
        "maxmemoryallocated": {
            "code": "torch.cuda.max_memory_allocated(device=None)¶",
            "function_name": "max_memory_allocated",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "max_memory_allocated"
            ]
        },
        "resetmaxmemoryallocated": {
            "code": "torch.cuda.reset_max_memory_allocated(device=None)¶",
            "function_name": "reset_max_memory_allocated",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "reset_max_memory_allocated"
            ]
        },
        "memoryreserved": {
            "code": "torch.cuda.memory_reserved(device=None)¶",
            "function_name": "memory_reserved",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_reserved"
            ]
        },
        "maxmemoryreserved": {
            "code": "torch.cuda.max_memory_reserved(device=None)¶",
            "function_name": "max_memory_reserved",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "max_memory_reserved"
            ]
        },
        "memorycached": {
            "code": "torch.cuda.memory_cached(device=None)¶",
            "function_name": "memory_cached",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_cached"
            ]
        },
        "maxmemorycached": {
            "code": "torch.cuda.max_memory_cached(device=None)¶",
            "function_name": "max_memory_cached",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "max_memory_cached"
            ]
        },
        "resetmaxmemorycached": {
            "code": "torch.cuda.reset_max_memory_cached(device=None)¶",
            "function_name": "reset_max_memory_cached",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "reset_max_memory_cached"
            ]
        },
        "mark": {
            "code": "torch.cuda.nvtx.mark(msg)¶",
            "function_name": "mark",
            "args": [
                {
                    "name": "msg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "nvtx",
                "mark"
            ]
        },
        "rangepush": {
            "code": "torch.cuda.nvtx.range_push(msg)¶",
            "function_name": "range_push",
            "args": [
                {
                    "name": "msg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "nvtx",
                "range_push"
            ]
        },
        "rangepop": {
            "code": "torch.cuda.nvtx.range_pop()¶",
            "function_name": "range_pop",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "nvtx",
                "range_pop"
            ]
        },
        "grad": {
            "code": "torch.autograd.grad(outputs,inputs,grad_outputs=None,retain_graph=None,create_graph=False,only_inputs=True,allow_unused=False)¶",
            "function_name": "grad",
            "args": [
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "gradoutputs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "retaingraph",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "creategraph",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "onlyinputs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "allowunused",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "autograd",
                "grad"
            ]
        },
        "loadnvprof": {
            "code": "torch.autograd.profiler.load_nvprof(path)¶",
            "function_name": "load_nvprof",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "autograd",
                "profiler",
                "load_nvprof"
            ]
        },
        "registerkl": {
            "code": "torch.distributions.kl.register_kl(type_p,type_q)¶",
            "function_name": "register_kl",
            "args": [
                {
                    "name": "typep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "typeq",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributions",
                "kl",
                "register_kl"
            ]
        },
        "ismpiavailable": {
            "code": "torch.distributed.is_mpi_available()¶",
            "function_name": "is_mpi_available",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "is_mpi_available"
            ]
        },
        "isncclavailable": {
            "code": "torch.distributed.is_nccl_available()¶",
            "function_name": "is_nccl_available",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "is_nccl_available"
            ]
        },
        "convd": {
            "code": "torch.nn.functional.conv3d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)→Tensor¶",
            "function_name": "conv3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "padding"
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv3d"
            ]
        },
        "bernoulli": {
            "code": "torch.bernoulli(input,*,generator=None,out=None)→Tensor¶",
            "function_name": "bernoulli",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "bernoulli"
            ]
        },
        "convtransposed": {
            "code": "torch.nn.functional.conv_transpose3d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)→Tensor¶",
            "function_name": "conv_transpose3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputpadding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv_transpose3d"
            ]
        },
        "unfold": {
            "code": "torch.nn.functional.unfold(input,kernel_size,dilation=1,padding=0,stride=1)¶",
            "function_name": "unfold",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kernelsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "unfold"
            ]
        },
        "fold": {
            "code": "torch.nn.functional.fold(input,output_size,kernel_size,dilation=1,padding=0,stride=1)¶",
            "function_name": "fold",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kernelsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "fold"
            ]
        },
        "maxunpoold": {
            "code": "torch.nn.functional.max_unpool3d(input,indices,kernel_size,stride=None,padding=0,output_size=None)¶",
            "function_name": "max_unpool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kernelsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputsize",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_unpool3d"
            ]
        },
        "lppoold": {
            "code": "torch.nn.functional.lp_pool2d(input,norm_type,kernel_size,stride=None,ceil_mode=False)¶",
            "function_name": "lp_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kernelsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "ceilmode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "lp_pool2d"
            ]
        },
        "adaptivemaxpoold": {
            "code": "torch.nn.functional.adaptive_max_pool3d(*args,**kwargs)¶",
            "function_name": "adaptive_max_pool3d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_max_pool3d"
            ]
        },
        "to": {
            "code": "to(tensor,non_blocking=False)",
            "function_name": "to",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "nonblocking",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "to"
            ]
        },
        "all": {
            "code": "all(dim,keepdim=False,out=None)→Tensor",
            "function_name": "all",
            "args": [
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "all"
            ]
        },
        "any": {
            "code": "any(dim,keepdim=False,out=None)→Tensor",
            "function_name": "any",
            "args": [
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "any"
            ]
        },
        "istensor": {
            "code": "torch.is_tensor(obj)¶",
            "function_name": "is_tensor",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "is_tensor"
            ]
        },
        "threshold": {
            "code": "torch.nn.functional.threshold_(input,threshold,value)→Tensor¶",
            "function_name": "threshold_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "threshold_"
            ]
        },
        "elu": {
            "code": "torch.nn.functional.elu_(input,alpha=1.)→Tensor¶",
            "function_name": "elu_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "alpha"
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "elu_"
            ]
        },
        "selu": {
            "code": "torch.nn.functional.selu(input,inplace=False)→Tensor¶",
            "function_name": "selu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "selu"
            ]
        },
        "celu": {
            "code": "torch.nn.functional.celu(input,alpha=1.,inplace=False)→Tensor¶",
            "function_name": "celu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "celu"
            ]
        },
        "leakyrelu": {
            "code": "torch.nn.functional.leaky_relu_(input,negative_slope=0.01)→Tensor¶",
            "function_name": "leaky_relu_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "negativeslope",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "leaky_relu_"
            ]
        },
        "prelu": {
            "code": "torch.nn.functional.prelu(input,weight)→Tensor¶",
            "function_name": "prelu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "prelu"
            ]
        },
        "gelu": {
            "code": "torch.nn.functional.gelu(input)→Tensor¶",
            "function_name": "gelu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "gelu"
            ]
        },
        "logsigmoid": {
            "code": "torch.nn.functional.logsigmoid(input)→Tensor¶",
            "function_name": "logsigmoid",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "logsigmoid"
            ]
        },
        "hardshrink": {
            "code": "torch.nn.functional.hardshrink(input,lambd=0.5)→Tensor¶",
            "function_name": "hardshrink",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "lambd",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "hardshrink"
            ]
        },
        "tanhshrink": {
            "code": "torch.nn.functional.tanhshrink(input)→Tensor¶",
            "function_name": "tanhshrink",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "tanhshrink"
            ]
        },
        "softsign": {
            "code": "torch.nn.functional.softsign(input)→Tensor¶",
            "function_name": "softsign",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softsign"
            ]
        },
        "softplus": {
            "code": "torch.nn.functional.softplus(input,beta=1,threshold=20)→Tensor¶",
            "function_name": "softplus",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softplus"
            ]
        },
        "softmin": {
            "code": "torch.nn.functional.softmin(input,dim=None,_stacklevel=3,dtype=None)¶",
            "function_name": "softmin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stacklevel",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softmin"
            ]
        },
        "isstorage": {
            "code": "torch.is_storage(obj)¶",
            "function_name": "is_storage",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "is_storage"
            ]
        },
        "isfloatingpoint": {
            "code": "torch.is_floating_point(input)-&gt;(bool)¶",
            "function_name": "is_floating_point",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "is_floating_point"
            ]
        },
        "setdefaultdtype": {
            "code": "torch.set_default_dtype(d)¶",
            "function_name": "set_default_dtype",
            "args": [
                {
                    "name": "d",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_default_dtype"
            ]
        },
        "getdefaultdtype": {
            "code": "torch.get_default_dtype()→torch.dtype¶",
            "function_name": "get_default_dtype",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "get_default_dtype"
            ]
        },
        "setdefaulttensortype": {
            "code": "torch.set_default_tensor_type(t)¶",
            "function_name": "set_default_tensor_type",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_default_tensor_type"
            ]
        },
        "numel": {
            "code": "torch.numel(input)→int¶",
            "function_name": "numel",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "numel"
            ]
        },
        "setprintoptions": {
            "code": "torch.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,profile=None,sci_mode=None)¶",
            "function_name": "set_printoptions",
            "args": [
                {
                    "name": "precision",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "edgeitems",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "linewidth",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "profile",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scimode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_printoptions"
            ]
        },
        "setflushdenormal": {
            "code": "torch.set_flush_denormal(mode)→bool¶",
            "function_name": "set_flush_denormal",
            "args": [
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_flush_denormal"
            ]
        },
        "tensor": {
            "code": "torch.tensor(data,dtype=None,device=None,requires_grad=False,pin_memory=False)→Tensor¶",
            "function_name": "tensor",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype",
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pinmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tensor"
            ]
        },
        "sparsecootensor": {
            "code": "torch.sparse_coo_tensor(indices,values,size=None,dtype=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "sparse_coo_tensor",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sparse_coo_tensor"
            ]
        },
        "astensor": {
            "code": "torch.as_tensor(data,dtype=None,device=None)→Tensor¶",
            "function_name": "as_tensor",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "as_tensor"
            ]
        },
        "asstrided": {
            "code": "torch.as_strided(input,size,stride,storage_offset=0)→Tensor¶",
            "function_name": "as_strided",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "storageoffset",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "as_strided"
            ]
        },
        "fromnumpy": {
            "code": "torch.from_numpy(ndarray)→Tensor¶",
            "function_name": "from_numpy",
            "args": [
                {
                    "name": "ndarray",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "from_numpy"
            ]
        },
        "zeroslike": {
            "code": "torch.zeros_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "zeros_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "zeros_like"
            ]
        },
        "oneslike": {
            "code": "torch.ones_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "ones_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ones_like"
            ]
        },
        "arange": {
            "code": "torch.arange(start=0,end,step=1,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "arange",
            "args": [
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "start"
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "step"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "arange"
            ]
        },
        "range": {
            "code": "torch.range(start=0,end,step=1,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "range",
            "args": [
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "start",
                    "tf": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "step",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype",
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "range"
            ]
        },
        "linspace": {
            "code": "torch.linspace(start,end,steps=100,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "linspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "start",
                    "tf": "start"
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "steps",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "linspace"
            ]
        },
        "softmax": {
            "code": "torch.nn.functional.softmax(input,dim=None,_stacklevel=3,dtype=None)¶",
            "function_name": "softmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dim",
                    "tf": null
                },
                {
                    "name": "stacklevel",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softmax"
            ]
        },
        "softshrink": {
            "code": "torch.nn.functional.softshrink(input,lambd=0.5)→Tensor¶",
            "function_name": "softshrink",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "lambd",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softshrink"
            ]
        },
        "logsoftmax": {
            "code": "torch.nn.functional.log_softmax(input,dim=None,_stacklevel=3,dtype=None)¶",
            "function_name": "log_softmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stacklevel",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "log_softmax"
            ]
        },
        "tanh": {
            "code": "torch.tanh(input,out=None)→Tensor¶",
            "function_name": "tanh",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tanh"
            ]
        },
        "sigmoid": {
            "code": "torch.sigmoid(input,out=None)→Tensor¶",
            "function_name": "sigmoid",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sigmoid"
            ]
        },
        "localresponsenorm": {
            "code": "torch.nn.functional.local_response_norm(input,size,alpha=0.0001,beta=0.75,k=1.0)¶",
            "function_name": "local_response_norm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "local_response_norm"
            ]
        },
        "bilinear": {
            "code": "torch.nn.functional.bilinear(input1,input2,weight,bias=None)¶",
            "function_name": "bilinear",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "bilinear"
            ]
        },
        "dropout": {
            "code": "torch.nn.functional.dropout(input,p=0.5,training=True,inplace=False)¶",
            "function_name": "dropout",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "dropout"
            ]
        },
        "alphadropout": {
            "code": "torch.nn.functional.alpha_dropout(input,p=0.5,training=False,inplace=False)¶",
            "function_name": "alpha_dropout",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "alpha_dropout"
            ]
        },
        "dropoutd": {
            "code": "torch.nn.functional.dropout3d(input,p=0.5,training=True,inplace=False)¶",
            "function_name": "dropout3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "dropout3d"
            ]
        },
        "embedding": {
            "code": "torch.nn.functional.embedding(input,weight,padding_idx=None,max_norm=None,norm_type=2.0,scale_grad_by_freq=False,sparse=False)¶",
            "function_name": "embedding",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "paddingidx",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scalegradbyfreq",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sparse",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "embedding"
            ]
        },
        "pdist": {
            "code": "torch.nn.functional.pdist(input,p=2)→Tensor¶",
            "function_name": "pdist",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "pdist"
            ]
        },
        "multilabelsoftmarginloss": {
            "code": "torch.nn.functional.multilabel_soft_margin_loss(input,target,weight=None,size_average=None)→Tensor¶",
            "function_name": "multilabel_soft_margin_loss",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sizeaverage",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "multilabel_soft_margin_loss"
            ]
        },
        "pixelshuffle": {
            "code": "torch.nn.functional.pixel_shuffle()¶",
            "function_name": "pixel_shuffle",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "pixel_shuffle"
            ]
        },
        "logspace": {
            "code": "torch.logspace(start,end,steps=100,base=10.0,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "logspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "steps",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "base",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logspace"
            ]
        },
        "empty": {
            "code": "torch.empty(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False,pin_memory=False)→Tensor¶",
            "function_name": "empty",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pinmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "empty"
            ]
        },
        "emptylike": {
            "code": "torch.empty_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "empty_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "empty_like"
            ]
        },
        "emptystrided": {
            "code": "torch.empty_strided(size,stride,dtype=None,layout=None,device=None,requires_grad=False,pin_memory=False)→Tensor¶",
            "function_name": "empty_strided",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pinmemory",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "empty_strided"
            ]
        },
        "full": {
            "code": "torch.full(size,fill_value,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "full",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "fillvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "full"
            ]
        },
        "fulllike": {
            "code": "torch.full_like(input,fill_value,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "full_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "fillvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "full_like"
            ]
        },
        "quantizepertensor": {
            "code": "torch.quantize_per_tensor(input,scale,zero_point,dtype)→Tensor¶",
            "function_name": "quantize_per_tensor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "zeropoint",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantize_per_tensor"
            ]
        },
        "quantizeperchannel": {
            "code": "torch.quantize_per_channel(input,scales,zero_points,axis,dtype)→Tensor¶",
            "function_name": "quantize_per_channel",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scales",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "zeropoints",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantize_per_channel"
            ]
        },
        "cat": {
            "code": "torch.cat(tensors,dim=0,out=None)→Tensor¶",
            "function_name": "cat",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cat"
            ]
        },
        "chunk": {
            "code": "torch.chunk(input,chunks,dim=0)→ListofTensors¶",
            "function_name": "chunk",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "chunks",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "chunk"
            ]
        },
        "indexselect": {
            "code": "torch.index_select(input,dim,index,out=None)→Tensor¶",
            "function_name": "index_select",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "index_select"
            ]
        },
        "maskedselect": {
            "code": "torch.masked_select(input,mask,out=None)→Tensor¶",
            "function_name": "masked_select",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "masked_select"
            ]
        },
        "narrow": {
            "code": "torch.narrow(input,dim,start,length)→Tensor¶",
            "function_name": "narrow",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "narrow"
            ]
        },
        "nonzero": {
            "code": "torch.nonzero(input,*,out=None,as_tuple=False)→LongTensorortupleofLongTensors¶",
            "function_name": "nonzero",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "astuple",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nonzero"
            ]
        },
        "reshape": {
            "code": "torch.reshape(input,shape)→Tensor¶",
            "function_name": "reshape",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "shape"
                }
            ],
            "attrs": [
                "torch",
                "reshape"
            ]
        },
        "affinegrid": {
            "code": "torch.nn.functional.affine_grid(theta,size,align_corners=None)¶",
            "function_name": "affine_grid",
            "args": [
                {
                    "name": "theta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "aligncorners",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "affine_grid"
            ]
        },
        "dataparallel": {
            "code": "torch.nn.parallel.data_parallel(module,inputs,device_ids=None,output_device=None,dim=0,module_kwargs=None)¶",
            "function_name": "data_parallel",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "deviceids",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "outputdevice",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "modulekwargs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "parallel",
                "data_parallel"
            ]
        },
        "clipgradnorm": {
            "code": "torch.nn.utils.clip_grad_norm_(parameters,max_norm,norm_type=2)¶",
            "function_name": "clip_grad_norm_",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "clip_grad_norm_"
            ]
        },
        "clipgradvalue": {
            "code": "torch.nn.utils.clip_grad_value_(parameters,clip_value)¶",
            "function_name": "clip_grad_value_",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "clipvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "clip_grad_value_"
            ]
        },
        "parameterstovector": {
            "code": "torch.nn.utils.parameters_to_vector(parameters)¶",
            "function_name": "parameters_to_vector",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "parameters_to_vector"
            ]
        },
        "vectortoparameters": {
            "code": "torch.nn.utils.vector_to_parameters(vec,parameters)¶",
            "function_name": "vector_to_parameters",
            "args": [
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "vector_to_parameters"
            ]
        },
        "identity": {
            "code": "torch.nn.utils.prune.identity(module,name)¶",
            "function_name": "identity",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "name"
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "identity"
            ]
        },
        "randomunstructured": {
            "code": "torch.nn.utils.prune.random_unstructured(module,name,amount)¶",
            "function_name": "random_unstructured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "random_unstructured"
            ]
        },
        "lunstructured": {
            "code": "torch.nn.utils.prune.l1_unstructured(module,name,amount)¶",
            "function_name": "l1_unstructured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "l1_unstructured"
            ]
        },
        "randomstructured": {
            "code": "torch.nn.utils.prune.random_structured(module,name,amount,dim)¶",
            "function_name": "random_structured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "random_structured"
            ]
        },
        "lnstructured": {
            "code": "torch.nn.utils.prune.ln_structured(module,name,amount,n,dim)¶",
            "function_name": "ln_structured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "ln_structured"
            ]
        },
        "globalunstructured": {
            "code": "torch.nn.utils.prune.global_unstructured(parameters,pruning_method,**kwargs)¶",
            "function_name": "global_unstructured",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pruningmethod",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "global_unstructured"
            ]
        },
        "customfrommask": {
            "code": "torch.nn.utils.prune.custom_from_mask(module,name,mask)¶",
            "function_name": "custom_from_mask",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "custom_from_mask"
            ]
        },
        "remove": {
            "code": "torch.nn.utils.prune.remove(module,name)¶",
            "function_name": "remove",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "remove"
            ]
        },
        "ispruned": {
            "code": "torch.nn.utils.prune.is_pruned(module)¶",
            "function_name": "is_pruned",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "is_pruned"
            ]
        },
        "packedsequence": {
            "code": "torch.nn.utils.rnn.PackedSequence(data,batch_sizes=None,sorted_indices=None,unsorted_indices=None)¶",
            "function_name": "PackedSequence",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batchsizes",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sortedindices",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unsortedindices",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "PackedSequence"
            ]
        },
        "packpaddedsequence": {
            "code": "torch.nn.utils.rnn.pack_padded_sequence(input,lengths,batch_first=False,enforce_sorted=True)¶",
            "function_name": "pack_padded_sequence",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batchfirst",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "enforcesorted",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pack_padded_sequence"
            ]
        },
        "padpackedsequence": {
            "code": "torch.nn.utils.rnn.pad_packed_sequence(sequence,batch_first=False,padding_value=0.0,total_length=None)¶",
            "function_name": "pad_packed_sequence",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batchfirst",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "paddingvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "totallength",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pad_packed_sequence"
            ]
        },
        "padsequence": {
            "code": "torch.nn.utils.rnn.pad_sequence(sequences,batch_first=False,padding_value=0)¶",
            "function_name": "pad_sequence",
            "args": [
                {
                    "name": "sequences",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batchfirst",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "paddingvalue",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pad_sequence"
            ]
        },
        "split": {
            "code": "torch.split(tensor,split_size_or_sections,dim=0)¶",
            "function_name": "split",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "splitsizeorsections",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "split"
            ]
        },
        "squeeze": {
            "code": "torch.squeeze(input,dim=None,out=None)→Tensor¶",
            "function_name": "squeeze",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "squeeze"
            ]
        },
        "stack": {
            "code": "torch.stack(tensors,dim=0,out=None)→Tensor¶",
            "function_name": "stack",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "tensors",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "stack"
            ]
        },
        "t": {
            "code": "torch.t(input)→Tensor¶",
            "function_name": "t",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "t"
            ]
        },
        "take": {
            "code": "torch.take(input,index)→Tensor¶",
            "function_name": "take",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "take"
            ]
        },
        "transpose": {
            "code": "torch.transpose(input,dim0,dim1)→Tensor¶",
            "function_name": "transpose",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "transpose"
            ]
        },
        "unbind": {
            "code": "torch.unbind(input,dim=0)→seq¶",
            "function_name": "unbind",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "unbind"
            ]
        },
        "unsqueeze": {
            "code": "torch.unsqueeze(input,dim,out=None)→Tensor¶",
            "function_name": "unsqueeze",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "unsqueeze"
            ]
        },
        "where": {
            "code": "torch.where(condition)→tupleofLongTensor",
            "function_name": "where",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "condition",
                    "tf": "condition"
                }
            ],
            "attrs": [
                "torch",
                "where"
            ]
        },
        "multinomial": {
            "code": "torch.multinomial(input,num_samples,replacement=False,*,generator=None,out=None)→LongTensor¶",
            "function_name": "multinomial",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "numsamples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "numsamples",
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "replacement",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "multinomial"
            ]
        },
        "packsequence": {
            "code": "torch.nn.utils.rnn.pack_sequence(sequences,enforce_sorted=True)¶",
            "function_name": "pack_sequence",
            "args": [
                {
                    "name": "sequences",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "enforcesorted",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pack_sequence"
            ]
        },
        "rand": {
            "code": "torch.rand(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "rand",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rand"
            ]
        },
        "randlike": {
            "code": "torch.rand_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "rand_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rand_like"
            ]
        },
        "randint": {
            "code": "torch.randint(low=0,high,size,*,generator=None,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randint",
            "args": [
                {
                    "name": "high",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "low",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "randint"
            ]
        },
        "randintlike": {
            "code": "torch.randint_like(input,low=0,high,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randint_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "high",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "low",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "randint_like"
            ]
        },
        "randn": {
            "code": "torch.randn(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randn",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "randn"
            ]
        },
        "randnlike": {
            "code": "torch.randn_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randn_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "randn_like"
            ]
        },
        "randperm": {
            "code": "torch.randperm(n,out=None,dtype=torch.int64,layout=torch.strided,device=None,requires_grad=False)→LongTensor¶",
            "function_name": "randperm",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "randperm"
            ]
        },
        "getnumthreads": {
            "code": "torch.get_num_threads()→int¶",
            "function_name": "get_num_threads",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "get_num_threads"
            ]
        },
        "setnumthreads": {
            "code": "torch.set_num_threads(int)¶",
            "function_name": "set_num_threads",
            "args": [
                {
                    "name": "int",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_num_threads"
            ]
        },
        "getnuminteropthreads": {
            "code": "torch.get_num_interop_threads()→int¶",
            "function_name": "get_num_interop_threads",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "get_num_interop_threads"
            ]
        },
        "setnuminteropthreads": {
            "code": "torch.set_num_interop_threads(int)¶",
            "function_name": "set_num_interop_threads",
            "args": [
                {
                    "name": "int",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "set_num_interop_threads"
            ]
        },
        "abs": {
            "code": "torch.abs(input,out=None)→Tensor¶",
            "function_name": "abs",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "abs"
            ]
        },
        "acos": {
            "code": "torch.acos(input,out=None)→Tensor¶",
            "function_name": "acos",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "acos"
            ]
        },
        "add": {
            "code": "torch.add(input,alpha=1,other,out=None)",
            "function_name": "add",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "add"
            ]
        },
        "addcdiv": {
            "code": "torch.addcdiv(input,value=1,tensor1,tensor2,out=None)→Tensor¶",
            "function_name": "addcdiv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "addcdiv"
            ]
        },
        "addcmul": {
            "code": "torch.addcmul(input,value=1,tensor1,tensor2,out=None)→Tensor¶",
            "function_name": "addcmul",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "addcmul"
            ]
        },
        "angle": {
            "code": "torch.angle(input,out=None)→Tensor¶",
            "function_name": "angle",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "angle"
            ]
        },
        "asin": {
            "code": "torch.asin(input,out=None)→Tensor¶",
            "function_name": "asin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "asin"
            ]
        },
        "atan": {
            "code": "torch.atan2(input,other,out=None)→Tensor¶",
            "function_name": "atan2",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "atan2"
            ]
        },
        "bitwisenot": {
            "code": "torch.bitwise_not(input,out=None)→Tensor¶",
            "function_name": "bitwise_not",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "bitwise_not"
            ]
        },
        "bitwisexor": {
            "code": "torch.bitwise_xor(input,other,out=None)→Tensor¶",
            "function_name": "bitwise_xor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "bitwise_xor"
            ]
        },
        "ceil": {
            "code": "torch.ceil(input,out=None)→Tensor¶",
            "function_name": "ceil",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ceil"
            ]
        },
        "clamp": {
            "code": "torch.clamp(input,*,max,out=None)→Tensor",
            "function_name": "clamp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "clamp"
            ]
        },
        "conj": {
            "code": "torch.conj(input,out=None)→Tensor¶",
            "function_name": "conj",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "conj"
            ]
        },
        "cos": {
            "code": "torch.cos(input,out=None)→Tensor¶",
            "function_name": "cos",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cos"
            ]
        },
        "cosh": {
            "code": "torch.cosh(input,out=None)→Tensor¶",
            "function_name": "cosh",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cosh"
            ]
        },
        "div": {
            "code": "torch.div(input,other,out=None)→Tensor",
            "function_name": "div",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "div"
            ]
        },
        "digamma": {
            "code": "torch.digamma(input,out=None)→Tensor¶",
            "function_name": "digamma",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "digamma"
            ]
        },
        "erf": {
            "code": "torch.erf(input,out=None)→Tensor¶",
            "function_name": "erf",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "erf"
            ]
        },
        "erfc": {
            "code": "torch.erfc(input,out=None)→Tensor¶",
            "function_name": "erfc",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "erfc"
            ]
        },
        "erfinv": {
            "code": "torch.erfinv(input,out=None)→Tensor¶",
            "function_name": "erfinv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "erfinv"
            ]
        },
        "exp": {
            "code": "torch.exp(input,out=None)→Tensor¶",
            "function_name": "exp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "exp"
            ]
        },
        "expm": {
            "code": "torch.expm1(input,out=None)→Tensor¶",
            "function_name": "expm1",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "expm1"
            ]
        },
        "floor": {
            "code": "torch.floor(input,out=None)→Tensor¶",
            "function_name": "floor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "floor"
            ]
        },
        "fmod": {
            "code": "torch.fmod(input,other,out=None)→Tensor¶",
            "function_name": "fmod",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "fmod"
            ]
        },
        "frac": {
            "code": "torch.frac(input,out=None)→Tensor¶",
            "function_name": "frac",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "frac"
            ]
        },
        "imag": {
            "code": "torch.imag(input,out=None)→Tensor¶",
            "function_name": "imag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "imag"
            ]
        },
        "lerp": {
            "code": "torch.lerp(input,end,weight,out=None)¶",
            "function_name": "lerp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lerp"
            ]
        },
        "lgamma": {
            "code": "torch.lgamma(input,out=None)→Tensor¶",
            "function_name": "lgamma",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lgamma"
            ]
        },
        "log": {
            "code": "torch.log2(input,out=None)→Tensor¶",
            "function_name": "log2",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "log2"
            ]
        },
        "logp": {
            "code": "torch.log1p(input,out=None)→Tensor¶",
            "function_name": "log1p",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "log1p"
            ]
        },
        "logicalnot": {
            "code": "torch.logical_not(input,out=None)→Tensor¶",
            "function_name": "logical_not",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logical_not"
            ]
        },
        "logicalxor": {
            "code": "torch.logical_xor(input,other,out=None)→Tensor¶",
            "function_name": "logical_xor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logical_xor"
            ]
        },
        "mul": {
            "code": "torch.mul(input,other,out=None)",
            "function_name": "mul",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "mul"
            ]
        },
        "mvlgamma": {
            "code": "torch.mvlgamma(input,p)→Tensor¶",
            "function_name": "mvlgamma",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "mvlgamma"
            ]
        },
        "neg": {
            "code": "torch.neg(input,out=None)→Tensor¶",
            "function_name": "neg",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "neg"
            ]
        },
        "polygamma": {
            "code": "torch.polygamma(n,input,out=None)→Tensor¶",
            "function_name": "polygamma",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "polygamma"
            ]
        },
        "pow": {
            "code": "torch.pow(self,exponent,out=None)→Tensor",
            "function_name": "pow",
            "args": [
                {
                    "name": "self",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "exponent",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "pow"
            ]
        },
        "real": {
            "code": "torch.real(input,out=None)→Tensor¶",
            "function_name": "real",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "real"
            ]
        },
        "reciprocal": {
            "code": "torch.reciprocal(input,out=None)→Tensor¶",
            "function_name": "reciprocal",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "reciprocal"
            ]
        },
        "remainder": {
            "code": "torch.remainder(input,other,out=None)→Tensor¶",
            "function_name": "remainder",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "remainder"
            ]
        },
        "round": {
            "code": "torch.round(input,out=None)→Tensor¶",
            "function_name": "round",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "round"
            ]
        },
        "rsqrt": {
            "code": "torch.rsqrt(input,out=None)→Tensor¶",
            "function_name": "rsqrt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rsqrt"
            ]
        },
        "sign": {
            "code": "torch.sign(input,out=None)→Tensor¶",
            "function_name": "sign",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sign"
            ]
        },
        "sin": {
            "code": "torch.sin(input,out=None)→Tensor¶",
            "function_name": "sin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sin"
            ]
        },
        "sinh": {
            "code": "torch.sinh(input,out=None)→Tensor¶",
            "function_name": "sinh",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sinh"
            ]
        },
        "sqrt": {
            "code": "torch.sqrt(input,out=None)→Tensor¶",
            "function_name": "sqrt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sqrt"
            ]
        },
        "tan": {
            "code": "torch.tan(input,out=None)→Tensor¶",
            "function_name": "tan",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tan"
            ]
        },
        "trunc": {
            "code": "torch.trunc(input,out=None)→Tensor¶",
            "function_name": "trunc",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "trunc"
            ]
        },
        "argmax": {
            "code": "torch.argmax(input,dim,keepdim=False)→LongTensor",
            "function_name": "argmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "argmax"
            ]
        },
        "argmin": {
            "code": "torch.argmin(input,dim,keepdim=False,out=None)→LongTensor",
            "function_name": "argmin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "argmin"
            ]
        },
        "dist": {
            "code": "torch.dist(input,other,p=2)→Tensor¶",
            "function_name": "dist",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "dist"
            ]
        },
        "logsumexp": {
            "code": "torch.logsumexp(input,dim,keepdim=False,out=None)¶",
            "function_name": "logsumexp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logsumexp"
            ]
        },
        "mean": {
            "code": "torch.mean(input,dim,keepdim=False,out=None)→Tensor",
            "function_name": "mean",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "mean"
            ]
        },
        "median": {
            "code": "torch.median(input)→Tensor",
            "function_name": "median",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "median"
            ]
        },
        "prod": {
            "code": "torch.prod(input,dim,keepdim=False,dtype=None)→Tensor",
            "function_name": "prod",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "prod"
            ]
        },
        "std": {
            "code": "torch.std(input,dim,keepdim=False,unbiased=True)-&gt;(Tensor,Tensor)",
            "function_name": "std",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "std"
            ]
        },
        "stdmean": {
            "code": "torch.std_mean(input,unbiased=True)-&gt;(Tensor,Tensor)",
            "function_name": "std_mean",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "std_mean"
            ]
        },
        "unique": {
            "code": "torch.unique(input,sorted=True,return_inverse=False,return_counts=False,dim=None)¶",
            "function_name": "unique",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sorted",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "returninverse",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "returncounts",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "unique"
            ]
        },
        "uniqueconsecutive": {
            "code": "torch.unique_consecutive(input,return_inverse=False,return_counts=False,dim=None)¶",
            "function_name": "unique_consecutive",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "returninverse",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "returncounts",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "unique_consecutive"
            ]
        },
        "var": {
            "code": "torch.var(input,dim,keepdim=False,unbiased=True,out=None)→Tensor",
            "function_name": "var",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "var"
            ]
        },
        "varmean": {
            "code": "torch.var_mean(input,dim,keepdim=False,unbiased=True)-&gt;(Tensor,Tensor)",
            "function_name": "var_mean",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "var_mean"
            ]
        },
        "eq": {
            "code": "torch.eq(input,other,out=None)→Tensor¶",
            "function_name": "eq",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "eq"
            ]
        },
        "equal": {
            "code": "torch.equal(input,other)→bool¶",
            "function_name": "equal",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "equal"
            ]
        },
        "ge": {
            "code": "torch.ge(input,other,out=None)→Tensor¶",
            "function_name": "ge",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ge"
            ]
        },
        "gt": {
            "code": "torch.gt(input,other,out=None)→Tensor¶",
            "function_name": "gt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "gt"
            ]
        },
        "isfinite": {
            "code": "torch.isfinite()¶",
            "function_name": "isfinite",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "isfinite"
            ]
        },
        "isinf": {
            "code": "torch.isinf(tensor)¶",
            "function_name": "isinf",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "isinf"
            ]
        },
        "isnan": {
            "code": "torch.isnan()¶",
            "function_name": "isnan",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "isnan"
            ]
        },
        "kthvalue": {
            "code": "torch.kthvalue(input,k,dim=None,keepdim=False,out=None)-&gt;(Tensor,LongTensor)¶",
            "function_name": "kthvalue",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "kthvalue"
            ]
        },
        "le": {
            "code": "torch.le(input,other,out=None)→Tensor¶",
            "function_name": "le",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "le"
            ]
        },
        "lt": {
            "code": "torch.lt(input,other,out=None)→Tensor¶",
            "function_name": "lt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lt"
            ]
        },
        "max": {
            "code": "torch.max(input,other,out=None)→Tensor",
            "function_name": "max",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "max"
            ]
        },
        "min": {
            "code": "torch.min(input,other,out=None)→Tensor",
            "function_name": "min",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "min"
            ]
        },
        "ne": {
            "code": "torch.ne(input,other,out=None)→Tensor¶",
            "function_name": "ne",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ne"
            ]
        },
        "topk": {
            "code": "torch.topk(input,k,dim=None,largest=True,sorted=True,out=None)-&gt;(Tensor,LongTensor)¶",
            "function_name": "topk",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "k",
                    "tf": "k"
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "largest",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sorted",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "sorted",
                    "tf": "sorted"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "topk"
            ]
        },
        "fft": {
            "code": "torch.fft(input,signal_ndim,normalized=False)→Tensor¶",
            "function_name": "fft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "signalndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "fft"
            ]
        },
        "ifft": {
            "code": "torch.ifft(input,signal_ndim,normalized=False)→Tensor¶",
            "function_name": "ifft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "signalndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ifft"
            ]
        },
        "rfft": {
            "code": "torch.rfft(input,signal_ndim,normalized=False,onesided=True)→Tensor¶",
            "function_name": "rfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": null
                },
                {
                    "name": "signalndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "onesided",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rfft"
            ]
        },
        "irfft": {
            "code": "torch.irfft(input,signal_ndim,normalized=False,onesided=True,signal_sizes=None)→Tensor¶",
            "function_name": "irfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": null
                },
                {
                    "name": "signalndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "onesided",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "signalsizes",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "irfft"
            ]
        },
        "bartlettwindow": {
            "code": "torch.bartlett_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "bartlett_window",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "bartlett_window"
            ]
        },
        "blackmanwindow": {
            "code": "torch.blackman_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "blackman_window",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "blackman_window"
            ]
        },
        "hammingwindow": {
            "code": "torch.hamming_window(window_length,periodic=True,alpha=0.54,beta=0.46,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "hamming_window",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "windowlength",
                    "tf": "windowlength"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "periodic"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hamming_window"
            ]
        },
        "hannwindow": {
            "code": "torch.hann_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "hann_window",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "windowlength",
                    "tf": "windowlength"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "periodic"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requiresgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hann_window"
            ]
        },
        "bincount": {
            "code": "torch.bincount(input,weights=None,minlength=0)→Tensor¶",
            "function_name": "bincount",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "weights"
                },
                {
                    "name": "minlength",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "minlength"
                }
            ],
            "attrs": [
                "torch",
                "bincount"
            ]
        },
        "broadcasttensors": {
            "code": "torch.broadcast_tensors(*tensors)→ListofTensors¶",
            "function_name": "broadcast_tensors",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "broadcast_tensors"
            ]
        },
        "cartesianprod": {
            "code": "torch.cartesian_prod(*tensors)¶",
            "function_name": "cartesian_prod",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cartesian_prod"
            ]
        },
        "combinations": {
            "code": "torch.combinations(input,r=2,with_replacement=False)→seq¶",
            "function_name": "combinations",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "r",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "withreplacement",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "combinations"
            ]
        },
        "cumprod": {
            "code": "torch.cumprod(input,dim,out=None,dtype=None)→Tensor¶",
            "function_name": "cumprod",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cumprod"
            ]
        },
        "cumsum": {
            "code": "torch.cumsum(input,dim,out=None,dtype=None)→Tensor¶",
            "function_name": "cumsum",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cumsum"
            ]
        },
        "diag": {
            "code": "torch.diag(input,diagonal=0,out=None)→Tensor¶",
            "function_name": "diag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "diagonal",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "diagonal"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "diag"
            ]
        },
        "diagflat": {
            "code": "torch.diagflat(input,offset=0)→Tensor¶",
            "function_name": "diagflat",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "offset",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "diagflat"
            ]
        },
        "diagonal": {
            "code": "torch.diagonal(input,offset=0,dim1=0,dim2=1)→Tensor¶",
            "function_name": "diagonal",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "offset",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "diagonal"
            ]
        },
        "einsum": {
            "code": "torch.einsum(equation,*operands)→Tensor¶",
            "function_name": "einsum",
            "args": [
                {
                    "name": "equation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "equation"
                },
                {
                    "name": "operands",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "einsum"
            ]
        },
        "flip": {
            "code": "torch.flip(input,dims)→Tensor¶",
            "function_name": "flip",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "flip"
            ]
        },
        "rot": {
            "code": "torch.rot90(input,k,dims)→Tensor¶",
            "function_name": "rot90",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "k"
                },
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rot90"
            ]
        },
        "histc": {
            "code": "torch.histc(input,bins=100,min=0,max=0,out=None)→Tensor¶",
            "function_name": "histc",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bins",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "min",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "max",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "histc"
            ]
        },
        "meshgrid": {
            "code": "torch.meshgrid(*tensors,**kwargs)¶",
            "function_name": "meshgrid",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "kwargs"
                }
            ],
            "attrs": [
                "torch",
                "meshgrid"
            ]
        },
        "renorm": {
            "code": "torch.renorm(input,p,dim,maxnorm,out=None)→Tensor¶",
            "function_name": "renorm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "renorm"
            ]
        },
        "repeatinterleave": {
            "code": "torch.repeat_interleave(repeats)→Tensor",
            "function_name": "repeat_interleave",
            "args": [
                {
                    "name": "repeats",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "repeat_interleave"
            ]
        },
        "roll": {
            "code": "torch.roll(input,shifts,dims=None)→Tensor¶",
            "function_name": "roll",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "shifts",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dims",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "roll"
            ]
        },
        "tensordot": {
            "code": "torch.tensordot(a,b,dims=2)¶",
            "function_name": "tensordot",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "b"
                },
                {
                    "name": "dims",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tensordot"
            ]
        },
        "trace": {
            "code": "torch.trace(input)→Tensor¶",
            "function_name": "trace",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "trace"
            ]
        },
        "tril": {
            "code": "torch.tril(input,diagonal=0,out=None)→Tensor¶",
            "function_name": "tril",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "diagonal",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tril"
            ]
        },
        "triu": {
            "code": "torch.triu(input,diagonal=0,out=None)→Tensor¶",
            "function_name": "triu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "diagonal",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "triu"
            ]
        },
        "addbmm": {
            "code": "torch.addbmm(beta=1,input,alpha=1,batch1,batch2,out=None)→Tensor¶",
            "function_name": "addbmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batch",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batch",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "addbmm"
            ]
        },
        "addmv": {
            "code": "torch.addmv(beta=1,input,alpha=1,mat,vec,out=None)→Tensor¶",
            "function_name": "addmv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "addmv"
            ]
        },
        "addr": {
            "code": "torch.addr(beta=1,input,alpha=1,vec1,vec2,out=None)→Tensor¶",
            "function_name": "addr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "addr"
            ]
        },
        "baddbmm": {
            "code": "torch.baddbmm(beta=1,input,alpha=1,batch1,batch2,out=None)→Tensor¶",
            "function_name": "baddbmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batch",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "batch",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "baddbmm"
            ]
        },
        "bmm": {
            "code": "torch.bmm(input,mat2,out=None)→Tensor¶",
            "function_name": "bmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "mat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "bmm"
            ]
        },
        "chainmatmul": {
            "code": "torch.chain_matmul(*matrices)¶",
            "function_name": "chain_matmul",
            "args": [
                {
                    "name": "matrices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "chain_matmul"
            ]
        },
        "cholesky": {
            "code": "torch.cholesky(input,upper=False,out=None)→Tensor¶",
            "function_name": "cholesky",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cholesky"
            ]
        },
        "choleskyinverse": {
            "code": "torch.cholesky_inverse(input,upper=False,out=None)→Tensor¶",
            "function_name": "cholesky_inverse",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cholesky_inverse"
            ]
        },
        "choleskysolve": {
            "code": "torch.cholesky_solve(input,input2,upper=False,out=None)→Tensor¶",
            "function_name": "cholesky_solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cholesky_solve"
            ]
        },
        "dot": {
            "code": "torch.dot(input,tensor)→Tensor¶",
            "function_name": "dot",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "dot"
            ]
        },
        "eig": {
            "code": "torch.eig(input,eigenvectors=False,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "eig",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "eigenvectors",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "eig"
            ]
        },
        "geqrf": {
            "code": "torch.geqrf(input,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "geqrf",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "geqrf"
            ]
        },
        "ger": {
            "code": "torch.ger(input,vec2,out=None)→Tensor¶",
            "function_name": "ger",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ger"
            ]
        },
        "inverse": {
            "code": "torch.inverse(input,out=None)→Tensor¶",
            "function_name": "inverse",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "inverse"
            ]
        },
        "det": {
            "code": "torch.det(input)→Tensor¶",
            "function_name": "det",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                }
            ],
            "attrs": [
                "torch",
                "det"
            ]
        },
        "logdet": {
            "code": "torch.logdet(input)→Tensor¶",
            "function_name": "logdet",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logdet"
            ]
        },
        "slogdet": {
            "code": "torch.slogdet(input)-&gt;(Tensor,Tensor)¶",
            "function_name": "slogdet",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                }
            ],
            "attrs": [
                "torch",
                "slogdet"
            ]
        },
        "lstsq": {
            "code": "torch.lstsq(input,A,out=None)→Tensor¶",
            "function_name": "lstsq",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lstsq"
            ]
        },
        "lu": {
            "code": "torch.lu(A,pivot=True,get_infos=False,out=None)¶",
            "function_name": "lu",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pivot",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "getinfos",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lu"
            ]
        },
        "lusolve": {
            "code": "torch.lu_solve(input,LU_data,LU_pivots,out=None)→Tensor¶",
            "function_name": "lu_solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "ludata",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "lupivots",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lu_solve"
            ]
        },
        "luunpack": {
            "code": "torch.lu_unpack(LU_data,LU_pivots,unpack_data=True,unpack_pivots=True)¶",
            "function_name": "lu_unpack",
            "args": [
                {
                    "name": "ludata",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "lupivots",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unpackdata",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unpackpivots",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lu_unpack"
            ]
        },
        "matmul": {
            "code": "torch.matmul(input,other,out=None)→Tensor¶",
            "function_name": "matmul",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "matmul"
            ]
        },
        "matrixpower": {
            "code": "torch.matrix_power(input,n)→Tensor¶",
            "function_name": "matrix_power",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "matrix_power"
            ]
        },
        "matrixrank": {
            "code": "torch.matrix_rank(input,tol=None,symmetric=False)→Tensor¶",
            "function_name": "matrix_rank",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tol",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "tol"
                },
                {
                    "name": "symmetric",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "matrix_rank"
            ]
        },
        "mv": {
            "code": "torch.mv(input,vec,out=None)→Tensor¶",
            "function_name": "mv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "mv"
            ]
        },
        "orgqr": {
            "code": "torch.orgqr(input,input2)→Tensor¶",
            "function_name": "orgqr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "orgqr"
            ]
        },
        "ormqr": {
            "code": "torch.ormqr(input,input2,input3,left=True,transpose=False)→Tensor¶",
            "function_name": "ormqr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "left",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "transpose",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ormqr"
            ]
        },
        "qr": {
            "code": "torch.qr(input,some=True,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "qr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": "input"
                },
                {
                    "name": "some",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "qr"
            ]
        },
        "solve": {
            "code": "torch.solve(input,A,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "solve"
            ]
        },
        "svd": {
            "code": "torch.svd(input,some=True,compute_uv=True,out=None)-&gt;(Tensor,Tensor,Tensor)¶",
            "function_name": "svd",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "some",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "computeuv",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "computeuv"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "svd"
            ]
        },
        "symeig": {
            "code": "torch.symeig(input,eigenvectors=False,upper=True,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "symeig",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "eigenvectors",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "symeig"
            ]
        },
        "trapz": {
            "code": "torch.trapz()¶",
            "function_name": "trapz",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "trapz"
            ]
        },
        "triangularsolve": {
            "code": "torch.triangular_solve(input,A,upper=True,transpose=False,unitriangular=False)-&gt;(Tensor,Tensor)¶",
            "function_name": "triangular_solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "transpose",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "unitriangular",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "triangular_solve"
            ]
        },
        "compiledwithcxxabi": {
            "code": "torch.compiled_with_cxx11_abi()¶",
            "function_name": "compiled_with_cxx11_abi",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "compiled_with_cxx11_abi"
            ]
        },
        "resulttype": {
            "code": "torch.result_type(tensor1,tensor2)→dtype¶",
            "function_name": "result_type",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "result_type"
            ]
        },
        "cancast": {
            "code": "torch.can_cast(from,to)→bool¶",
            "function_name": "can_cast",
            "args": [
                {
                    "name": "from",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "can_cast"
            ]
        },
        "promotetypes": {
            "code": "torch.promote_types(type1,type2)→dtype¶",
            "function_name": "promote_types",
            "args": [
                {
                    "name": "type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "promote_types"
            ]
        }
    }
}