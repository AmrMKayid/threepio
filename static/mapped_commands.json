{
    "tf": {
        "load_op_library": {
            "code": "tf.load_op_library(library_filename)",
            "function_name": "load_op_library",
            "args": [
                {
                    "name": "library_filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "load_op_library"
            ],
            "torch": null,
            "tfjs": null
        },
        "map_fn": {
            "code": "tf.keras.backend.map_fn(fn,elems,name=None,dtype=None)",
            "function_name": "map_fn",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "map_fn"
            ],
            "torch": null,
            "tfjs": null
        },
        "linspace": {
            "code": "tf.linspace(start,stop,num,name=None)",
            "function_name": "linspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tfjs": "start"
                },
                {
                    "name": "stop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "stop"
                },
                {
                    "name": "num",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": "num"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linspace"
            ],
            "torch": "linspace",
            "tfjs": "linspace"
        },
        "is_tensor": {
            "code": "tf.is_tensor(x)",
            "function_name": "is_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "is_tensor"
            ],
            "torch": "is_tensor",
            "tfjs": null
        },
        "make_ndarray": {
            "code": "tf.make_ndarray(tensor)",
            "function_name": "make_ndarray",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "make_ndarray"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_library": {
            "code": "tf.load_library(library_location)",
            "function_name": "load_library",
            "args": [
                {
                    "name": "library_location",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "load_library"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_tensor_proto": {
            "code": "tf.make_tensor_proto(values,dtype=None,shape=None,verify_shape=False,allow_broadcast=False)",
            "function_name": "make_tensor_proto",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "verify_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "allow_broadcast",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "make_tensor_proto"
            ],
            "torch": null,
            "tfjs": null
        },
        "identity_n": {
            "code": "tf.identity_n(input,name=None)",
            "function_name": "identity_n",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "identity_n"
            ],
            "torch": null,
            "tfjs": null
        },
        "indexedslices": {
            "code": "tf.IndexedSlices(values,indices,dense_shape=None)",
            "function_name": "IndexedSlices",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dense_shape",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "IndexedSlices"
            ],
            "torch": null,
            "tfjs": null
        },
        "indexedslicesspec": {
            "code": "tf.IndexedSlicesSpec(shape=None,dtype=tf.dtypes.float32,indices_dtype=tf.dtypes.int64,dense_shape_dtype=None,indices_shape=None)",
            "function_name": "IndexedSlicesSpec",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "indices_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dense_shape_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "indices_shape",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "IndexedSlicesSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "hessians": {
            "code": "tf.hessians(ys,xs,gate_gradients=False,aggregation_method=None,name='hessians')",
            "function_name": "hessians",
            "args": [
                {
                    "name": "ys",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "xs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "gate_gradients",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aggregation_method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "hessians"
            ],
            "torch": null,
            "tfjs": null
        },
        "jit_scope": {
            "code": "tf.xla.experimental.jit_scope(*args,**kwds)",
            "function_name": "jit_scope",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "xla",
                "experimental",
                "jit_scope"
            ],
            "torch": null,
            "tfjs": null
        },
        "histogram_fixed_width_bins": {
            "code": "tf.histogram_fixed_width_bins(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)",
            "function_name": "histogram_fixed_width_bins",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "value_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "nbins",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "histogram_fixed_width_bins"
            ],
            "torch": null,
            "tfjs": null
        },
        "identity": {
            "code": "tf.keras.initializers.Identity(gain=1.0)",
            "function_name": "Identity",
            "args": [
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "Identity"
            ],
            "torch": "identity",
            "tfjs": "identity"
        },
        "histogram_fixed_width": {
            "code": "tf.histogram_fixed_width(values,value_range,nbins=100,dtype=tf.dtypes.int32,name=None)",
            "function_name": "histogram_fixed_width",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "value_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "nbins",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "histogram_fixed_width"
            ],
            "torch": null,
            "tfjs": null
        },
        "compile": {
            "code": "tf.xla.experimental.compile(computation,inputs=None)",
            "function_name": "compile",
            "args": [
                {
                    "name": "computation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "xla",
                "experimental",
                "compile"
            ],
            "torch": null,
            "tfjs": "compile"
        },
        "enable_mixed_precision_graph_rewrite": {
            "code": "tf.train.experimental.enable_mixed_precision_graph_rewrite(opt,loss_scale='dynamic')",
            "function_name": "enable_mixed_precision_graph_rewrite",
            "args": [
                {
                    "name": "opt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "loss_scale",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "experimental",
                "enable_mixed_precision_graph_rewrite"
            ],
            "torch": null,
            "tfjs": null
        },
        "disable_mixed_precision_graph_rewrite": {
            "code": "tf.train.experimental.disable_mixed_precision_graph_rewrite()",
            "function_name": "disable_mixed_precision_graph_rewrite",
            "args": [],
            "attrs": [
                "tf",
                "train",
                "experimental",
                "disable_mixed_precision_graph_rewrite"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_variable": {
            "code": "tf.train.load_variable(ckpt_dir_or_file,name)",
            "function_name": "load_variable",
            "args": [
                {
                    "name": "ckpt_dir_or_file",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "train",
                "load_variable"
            ],
            "torch": null,
            "tfjs": null
        },
        "latest_checkpoint": {
            "code": "tf.train.latest_checkpoint(checkpoint_dir,latest_filename=None)",
            "function_name": "latest_checkpoint",
            "args": [
                {
                    "name": "checkpoint_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "latest_filename",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "latest_checkpoint"
            ],
            "torch": null,
            "tfjs": null
        },
        "list_variables": {
            "code": "tf.train.list_variables(ckpt_dir_or_file)",
            "function_name": "list_variables",
            "args": [
                {
                    "name": "ckpt_dir_or_file",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "train",
                "list_variables"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_checkpoint": {
            "code": "tf.train.load_checkpoint(ckpt_dir_or_file)",
            "function_name": "load_checkpoint",
            "args": [
                {
                    "name": "ckpt_dir_or_file",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "train",
                "load_checkpoint"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_checkpoint_state": {
            "code": "tf.train.get_checkpoint_state(checkpoint_dir,latest_filename=None)",
            "function_name": "get_checkpoint_state",
            "args": [
                {
                    "name": "checkpoint_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "latest_filename",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "get_checkpoint_state"
            ],
            "torch": null,
            "tfjs": null
        },
        "exponentialmovingaverage": {
            "code": "tf.train.ExponentialMovingAverage(decay,num_updates=None,zero_debias=False,name='ExponentialMovingAverage')",
            "function_name": "ExponentialMovingAverage",
            "args": [
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_updates",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zero_debias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "ExponentialMovingAverage"
            ],
            "torch": null,
            "tfjs": null
        },
        "checkpoints_iterator": {
            "code": "tf.train.checkpoints_iterator(checkpoint_dir,min_interval_secs=0,timeout=None,timeout_fn=None)",
            "function_name": "checkpoints_iterator",
            "args": [
                {
                    "name": "checkpoint_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min_interval_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "timeout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "timeout_fn",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "checkpoints_iterator"
            ],
            "torch": null,
            "tfjs": null
        },
        "coordinator": {
            "code": "tf.train.Coordinator(clean_stop_exception_types=None)",
            "function_name": "Coordinator",
            "args": [
                {
                    "name": "clean_stop_exception_types",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "Coordinator"
            ],
            "torch": null,
            "tfjs": null
        },
        "checkpoint": {
            "code": "tf.train.Checkpoint(**kwargs)",
            "function_name": "Checkpoint",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "train",
                "Checkpoint"
            ],
            "torch": "checkpoint",
            "tfjs": null
        },
        "checkpointmanager": {
            "code": "tf.train.CheckpointManager(checkpoint,directory,max_to_keep,keep_checkpoint_every_n_hours=None,checkpoint_name='ckpt')",
            "function_name": "CheckpointManager",
            "args": [
                {
                    "name": "checkpoint",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "directory",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_to_keep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "keep_checkpoint_every_n_hours",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "checkpoint_name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "train",
                "CheckpointManager"
            ],
            "torch": null,
            "tfjs": null
        },
        "clusterspec": {
            "code": "tf.train.ClusterSpec(cluster)",
            "function_name": "ClusterSpec",
            "args": [
                {
                    "name": "cluster",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "train",
                "ClusterSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "initialize_tpu_system": {
            "code": "tf.tpu.experimental.initialize_tpu_system(cluster_resolver=None)",
            "function_name": "initialize_tpu_system",
            "args": [
                {
                    "name": "cluster_resolver",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "tpu",
                "experimental",
                "initialize_tpu_system"
            ],
            "torch": null,
            "tfjs": null
        },
        "shutdown_tpu_system": {
            "code": "tf.tpu.experimental.shutdown_tpu_system(cluster_resolver=None)",
            "function_name": "shutdown_tpu_system",
            "args": [
                {
                    "name": "cluster_resolver",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "tpu",
                "experimental",
                "shutdown_tpu_system"
            ],
            "torch": null,
            "tfjs": null
        },
        "deviceassignment": {
            "code": "tf.tpu.experimental.DeviceAssignment(topology,core_assignment)",
            "function_name": "DeviceAssignment",
            "args": [
                {
                    "name": "topology",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "core_assignment",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "tpu",
                "experimental",
                "DeviceAssignment"
            ],
            "torch": null,
            "tfjs": null
        },
        "failureexception": {
            "code": "tf.test.TestCase.failureException(*args,**kwargs)",
            "function_name": "failureException",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "test",
                "TestCase",
                "failureException"
            ],
            "torch": null,
            "tfjs": null
        },
        "main": {
            "code": "tf.test.main(argv=None)",
            "function_name": "main",
            "args": [
                {
                    "name": "argv",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "test",
                "main"
            ],
            "torch": null,
            "tfjs": null
        },
        "testcase": {
            "code": "tf.test.TestCase(methodName='runTest')",
            "function_name": "TestCase",
            "args": [
                {
                    "name": "methodname",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "test",
                "TestCase"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_built_with_gpu_support": {
            "code": "tf.test.is_built_with_gpu_support()",
            "function_name": "is_built_with_gpu_support",
            "args": [],
            "attrs": [
                "tf",
                "test",
                "is_built_with_gpu_support"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_built_with_rocm": {
            "code": "tf.test.is_built_with_rocm()",
            "function_name": "is_built_with_rocm",
            "args": [],
            "attrs": [
                "tf",
                "test",
                "is_built_with_rocm"
            ],
            "torch": null,
            "tfjs": null
        },
        "gpu_device_name": {
            "code": "tf.test.gpu_device_name()",
            "function_name": "gpu_device_name",
            "args": [],
            "attrs": [
                "tf",
                "test",
                "gpu_device_name"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_built_with_cuda": {
            "code": "tf.test.is_built_with_cuda()",
            "function_name": "is_built_with_cuda",
            "args": [],
            "attrs": [
                "tf",
                "test",
                "is_built_with_cuda"
            ],
            "torch": null,
            "tfjs": null
        },
        "create_local_cluster": {
            "code": "tf.test.create_local_cluster(num_workers,num_ps,protocol='grpc',worker_config=None,ps_config=None)",
            "function_name": "create_local_cluster",
            "args": [
                {
                    "name": "num_workers",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_ps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "protocol",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "worker_config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ps_config",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "test",
                "create_local_cluster"
            ],
            "torch": null,
            "tfjs": null
        },
        "compute_gradient": {
            "code": "tf.test.compute_gradient(f,x,delta=0.001)",
            "function_name": "compute_gradient",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "test",
                "compute_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_gpu_available": {
            "code": "tf.test.is_gpu_available(cuda_only=False,min_cuda_compute_capability=None)",
            "function_name": "is_gpu_available",
            "args": [
                {
                    "name": "cuda_only",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_cuda_compute_capability",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "test",
                "is_gpu_available"
            ],
            "torch": null,
            "tfjs": null
        },
        "benchmark_config": {
            "code": "tf.test.benchmark_config()",
            "function_name": "benchmark_config",
            "args": [],
            "attrs": [
                "tf",
                "test",
                "benchmark_config"
            ],
            "torch": null,
            "tfjs": null
        },
        "benchmark": {
            "code": "tf.test.Benchmark()",
            "function_name": "Benchmark",
            "args": [],
            "attrs": [
                "tf",
                "test",
                "Benchmark"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_equal_graph_def": {
            "code": "tf.test.assert_equal_graph_def(expected,actual)",
            "function_name": "assert_equal_graph_def",
            "args": [
                {
                    "name": "expected",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "actual",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "test",
                "assert_equal_graph_def"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_link_flags": {
            "code": "tf.sysconfig.get_link_flags()",
            "function_name": "get_link_flags",
            "args": [],
            "attrs": [
                "tf",
                "sysconfig",
                "get_link_flags"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_include": {
            "code": "tf.sysconfig.get_include()",
            "function_name": "get_include",
            "args": [],
            "attrs": [
                "tf",
                "sysconfig",
                "get_include"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_lib": {
            "code": "tf.sysconfig.get_lib()",
            "function_name": "get_lib",
            "args": [],
            "attrs": [
                "tf",
                "sysconfig",
                "get_lib"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_compile_flags": {
            "code": "tf.sysconfig.get_compile_flags()",
            "function_name": "get_compile_flags",
            "args": [],
            "attrs": [
                "tf",
                "sysconfig",
                "get_compile_flags"
            ],
            "torch": null,
            "tfjs": null
        },
        "write_raw_pb": {
            "code": "tf.summary.experimental.write_raw_pb(tensor,step=None,name=None)",
            "function_name": "write_raw_pb",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "experimental",
                "write_raw_pb"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_step": {
            "code": "tf.summary.experimental.set_step(step)",
            "function_name": "set_step",
            "args": [
                {
                    "name": "step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "experimental",
                "set_step"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_step": {
            "code": "tf.summary.experimental.get_step()",
            "function_name": "get_step",
            "args": [],
            "attrs": [
                "tf",
                "summary",
                "experimental",
                "get_step"
            ],
            "torch": null,
            "tfjs": null
        },
        "trace_off": {
            "code": "tf.summary.trace_off()",
            "function_name": "trace_off",
            "args": [],
            "attrs": [
                "tf",
                "summary",
                "trace_off"
            ],
            "torch": null,
            "tfjs": null
        },
        "write": {
            "code": "tf.summary.write(tag,tensor,step=None,metadata=None,name=None)",
            "function_name": "write",
            "args": [
                {
                    "name": "tag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "metadata",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "write"
            ],
            "torch": null,
            "tfjs": null
        },
        "text": {
            "code": "tf.summary.text(name,data,step=None,description=None)",
            "function_name": "text",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "text"
            ],
            "torch": null,
            "tfjs": null
        },
        "trace_export": {
            "code": "tf.summary.trace_export(name,step=None,profiler_outdir=None)",
            "function_name": "trace_export",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "profiler_outdir",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "trace_export"
            ],
            "torch": null,
            "tfjs": null
        },
        "trace_on": {
            "code": "tf.summary.trace_on(graph=True,profiler=False)",
            "function_name": "trace_on",
            "args": [
                {
                    "name": "graph",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "profiler",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "trace_on"
            ],
            "torch": null,
            "tfjs": null
        },
        "scalar": {
            "code": "tf.summary.scalar(name,data,step=None,description=None)",
            "function_name": "scalar",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "scalar"
            ],
            "torch": null,
            "tfjs": "scalar"
        },
        "image": {
            "code": "tf.summary.image(name,data,step=None,max_outputs=3,description=None)",
            "function_name": "image",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_outputs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "image"
            ],
            "torch": null,
            "tfjs": null
        },
        "create_noop_writer": {
            "code": "tf.summary.create_noop_writer()",
            "function_name": "create_noop_writer",
            "args": [],
            "attrs": [
                "tf",
                "summary",
                "create_noop_writer"
            ],
            "torch": null,
            "tfjs": null
        },
        "audio": {
            "code": "tf.summary.audio(name,data,sample_rate,step=None,max_outputs=3,encoding=None,description=None)",
            "function_name": "audio",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "sample_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_outputs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "encoding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "audio"
            ],
            "torch": null,
            "tfjs": null
        },
        "histogram": {
            "code": "tf.summary.histogram(name,data,step=None,buckets=None,description=None)",
            "function_name": "histogram",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "buckets",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "description",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "histogram"
            ],
            "torch": null,
            "tfjs": null
        },
        "create_file_writer": {
            "code": "tf.summary.create_file_writer(logdir,max_queue=None,flush_millis=None,filename_suffix=None,name=None)",
            "function_name": "create_file_writer",
            "args": [
                {
                    "name": "logdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "max_queue",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "flush_millis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "filename_suffix",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "create_file_writer"
            ],
            "torch": null,
            "tfjs": null
        },
        "flush": {
            "code": "tf.summary.flush(writer=None,name=None)",
            "function_name": "flush",
            "args": [
                {
                    "name": "writer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "summary",
                "flush"
            ],
            "torch": null,
            "tfjs": null
        },
        "upper": {
            "code": "tf.strings.upper(input,encoding='',name=None)",
            "function_name": "upper",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "encoding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "upper"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_join": {
            "code": "tf.strings.unsorted_segment_join(inputs,segment_ids,num_segments,separator='',name=None)",
            "function_name": "unsorted_segment_join",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unsorted_segment_join"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_split_with_offsets": {
            "code": "tf.strings.unicode_split_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,name=None)",
            "function_name": "unicode_split_with_offsets",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replacement_char",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_split_with_offsets"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_split": {
            "code": "tf.strings.unicode_split(input,input_encoding,errors='replace',replacement_char=65533,name=None)",
            "function_name": "unicode_split",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replacement_char",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_split"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_script": {
            "code": "tf.strings.unicode_script(input,name=None)",
            "function_name": "unicode_script",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_script"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_transcode": {
            "code": "tf.strings.unicode_transcode(input,input_encoding,output_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
            "function_name": "unicode_transcode",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replacement_char",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replace_control_characters",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_transcode"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_encode": {
            "code": "tf.strings.unicode_encode(input,output_encoding,errors='replace',replacement_char=65533,name=None)",
            "function_name": "unicode_encode",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replacement_char",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_encode"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_decode": {
            "code": "tf.strings.unicode_decode(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
            "function_name": "unicode_decode",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replacement_char",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replace_control_characters",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_decode"
            ],
            "torch": null,
            "tfjs": null
        },
        "unicode_decode_with_offsets": {
            "code": "tf.strings.unicode_decode_with_offsets(input,input_encoding,errors='replace',replacement_char=65533,replace_control_characters=False,name=None)",
            "function_name": "unicode_decode_with_offsets",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_encoding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "errors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replacement_char",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replace_control_characters",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "unicode_decode_with_offsets"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_number": {
            "code": "tf.strings.to_number(input,out_type=tf.dtypes.float32,name=None)",
            "function_name": "to_number",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_number"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_hash_bucket_strong": {
            "code": "tf.strings.to_hash_bucket_strong(input,num_buckets,key,name=None)",
            "function_name": "to_hash_bucket_strong",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_buckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_hash_bucket_strong"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_hash_bucket": {
            "code": "tf.strings.to_hash_bucket(input,num_buckets,name=None)",
            "function_name": "to_hash_bucket",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_buckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_hash_bucket"
            ],
            "torch": null,
            "tfjs": null
        },
        "substr": {
            "code": "tf.strings.substr(input,pos,len,unit='BYTE',name=None)",
            "function_name": "substr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pos",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "len",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "unit",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "substr"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_hash_bucket_fast": {
            "code": "tf.strings.to_hash_bucket_fast(input,num_buckets,name=None)",
            "function_name": "to_hash_bucket_fast",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_buckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "to_hash_bucket_fast"
            ],
            "torch": null,
            "tfjs": null
        },
        "regex_full_match": {
            "code": "tf.strings.regex_full_match(input,pattern,name=None)",
            "function_name": "regex_full_match",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "regex_full_match"
            ],
            "torch": null,
            "tfjs": null
        },
        "split": {
            "code": "tf.split(value,num_or_size_splits,axis=0,num=None,name='split')",
            "function_name": "split",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "num_or_size_splits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "num",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "split"
            ],
            "torch": "split",
            "tfjs": "split"
        },
        "regex_replace": {
            "code": "tf.strings.regex_replace(input,pattern,rewrite,replace_global=True,name=None)",
            "function_name": "regex_replace",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "rewrite",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "replace_global",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "regex_replace"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_join": {
            "code": "tf.strings.reduce_join(inputs,axis=None,keepdims=False,separator='',name=None)",
            "function_name": "reduce_join",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "reduce_join"
            ],
            "torch": null,
            "tfjs": null
        },
        "ngrams": {
            "code": "tf.strings.ngrams(data,ngram_width,separator='',pad_values=None,padding_width=None,preserve_short_sequences=False,name=None)",
            "function_name": "ngrams",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ngram_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_values",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding_width",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "preserve_short_sequences",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "ngrams"
            ],
            "torch": null,
            "tfjs": null
        },
        "format": {
            "code": "tf.strings.format(template,inputs,placeholder='{}',summarize=3,name=None)",
            "function_name": "format",
            "args": [
                {
                    "name": "template",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "placeholder",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "format"
            ],
            "torch": null,
            "tfjs": null
        },
        "length": {
            "code": "tf.strings.length(input,unit='BYTE',name=None)",
            "function_name": "length",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "unit",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "length"
            ],
            "torch": null,
            "tfjs": null
        },
        "join": {
            "code": "tf.strings.join(inputs,separator='',name=None)",
            "function_name": "join",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "join"
            ],
            "torch": null,
            "tfjs": null
        },
        "strip": {
            "code": "tf.strings.strip(input,name=None)",
            "function_name": "strip",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "strip"
            ],
            "torch": null,
            "tfjs": null
        },
        "bytes_split": {
            "code": "tf.strings.bytes_split(input,name=None)",
            "function_name": "bytes_split",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "bytes_split"
            ],
            "torch": null,
            "tfjs": null
        },
        "lower": {
            "code": "tf.strings.lower(input,encoding='',name=None)",
            "function_name": "lower",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "encoding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "lower"
            ],
            "torch": null,
            "tfjs": null
        },
        "transpose": {
            "code": "tf.transpose(a,perm=None,conjugate=False,name='transpose')",
            "function_name": "transpose",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "perm",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "perm"
                },
                {
                    "name": "conjugate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "transpose"
            ],
            "torch": "transpose",
            "tfjs": "transpose"
        },
        "to_dense": {
            "code": "tf.keras.backend.to_dense(tensor)",
            "function_name": "to_dense",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "to_dense"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparse_dense_matmul": {
            "code": "tf.sparse.sparse_dense_matmul(sp_a,b,adjoint_a=False,adjoint_b=False,name=None)",
            "function_name": "sparse_dense_matmul",
            "args": [
                {
                    "name": "sp_a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "adjoint_a",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "adjoint_b",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "sparse_dense_matmul"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_indicator": {
            "code": "tf.sparse.to_indicator(sp_input,vocab_size,name=None)",
            "function_name": "to_indicator",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vocab_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "to_indicator"
            ],
            "torch": null,
            "tfjs": null
        },
        "as_string": {
            "code": "tf.strings.as_string(input,precision=-1,scientific=False,shortest=False,width=-1,fill='',name=None)",
            "function_name": "as_string",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "precision",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scientific",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shortest",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "width",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strings",
                "as_string"
            ],
            "torch": null,
            "tfjs": null
        },
        "softmax": {
            "code": "tf.keras.activations.softmax(x,axis=-1)",
            "function_name": "softmax",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "softmax"
            ],
            "torch": "softmax",
            "tfjs": "softmax"
        },
        "slice": {
            "code": "tf.slice(input_,begin,size,name=None)",
            "function_name": "slice",
            "args": [
                {
                    "name": "input_",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "begin"
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": "size"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "slice"
            ],
            "torch": null,
            "tfjs": "slice"
        },
        "sparsetensor": {
            "code": "tf.sparse.SparseTensor(indices,values,dense_shape)",
            "function_name": "SparseTensor",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dense_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "SparseTensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "segment_sum": {
            "code": "tf.math.segment_sum(data,segment_ids,name=None)",
            "function_name": "segment_sum",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_sum"
            ],
            "torch": null,
            "tfjs": null
        },
        "segment_sqrt_n": {
            "code": "tf.sparse.segment_sqrt_n(data,indices,segment_ids,num_segments=None,name=None)",
            "function_name": "segment_sqrt_n",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "num_segments",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "segment_sqrt_n"
            ],
            "torch": null,
            "tfjs": null
        },
        "retain": {
            "code": "tf.sparse.retain(sp_input,to_retain)",
            "function_name": "retain",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "to_retain",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "retain"
            ],
            "torch": null,
            "tfjs": null
        },
        "segment_mean": {
            "code": "tf.math.segment_mean(data,segment_ids,name=None)",
            "function_name": "segment_mean",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_mean"
            ],
            "torch": null,
            "tfjs": null
        },
        "reshape": {
            "code": "tf.reshape(tensor,shape,name=None)",
            "function_name": "reshape",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "shape",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "reshape"
            ],
            "torch": "reshape",
            "tfjs": "reshape"
        },
        "reorder": {
            "code": "tf.sparse.reorder(sp_input,name=None)",
            "function_name": "reorder",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "reorder"
            ],
            "torch": null,
            "tfjs": null
        },
        "minimum": {
            "code": "tf.keras.backend.minimum(x,y)",
            "function_name": "minimum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "minimum"
            ],
            "torch": null,
            "tfjs": "minimum"
        },
        "reduce_max": {
            "code": "tf.math.reduce_max(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_max",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_max"
            ],
            "torch": null,
            "tfjs": null
        },
        "reset_shape": {
            "code": "tf.sparse.reset_shape(sp_input,new_shape=None)",
            "function_name": "reset_shape",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "new_shape",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "reset_shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_sum": {
            "code": "tf.math.reduce_sum(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_sum",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_sum"
            ],
            "torch": null,
            "tfjs": null
        },
        "maximum": {
            "code": "tf.keras.backend.maximum(x,y)",
            "function_name": "maximum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "maximum"
            ],
            "torch": null,
            "tfjs": "maximum"
        },
        "from_dense": {
            "code": "tf.sparse.from_dense(tensor,name=None)",
            "function_name": "from_dense",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "from_dense"
            ],
            "torch": null,
            "tfjs": null
        },
        "mask": {
            "code": "tf.sparse.mask(a,mask_indices,name=None)",
            "function_name": "mask",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mask_indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "mask"
            ],
            "torch": null,
            "tfjs": null
        },
        "fill_empty_rows": {
            "code": "tf.sparse.fill_empty_rows(sp_input,default_value,name=None)",
            "function_name": "fill_empty_rows",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "default_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "fill_empty_rows"
            ],
            "torch": null,
            "tfjs": null
        },
        "expand_dims": {
            "code": "tf.expand_dims(input,axis,name=None)",
            "function_name": "expand_dims",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "expand_dims"
            ],
            "torch": null,
            "tfjs": null
        },
        "eye": {
            "code": "tf.eye(num_rows,num_columns=None,batch_shape=None,dtype=tf.dtypes.float32,name=None)",
            "function_name": "eye",
            "args": [
                {
                    "name": "num_rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "num_columns",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "batch_shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "eye"
            ],
            "torch": "eye",
            "tfjs": "eye"
        },
        "cross_hashed": {
            "code": "tf.sparse.cross_hashed(inputs,num_buckets=0,hash_key=None,name=None)",
            "function_name": "cross_hashed",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_buckets",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "hash_key",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sparse",
                "cross_hashed"
            ],
            "torch": null,
            "tfjs": null
        },
        "concat": {
            "code": "tf.concat(values,axis,name='concat')",
            "function_name": "concat",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "concat"
            ],
            "torch": null,
            "tfjs": "concat"
        },
        "cross": {
            "code": "tf.linalg.cross(a,b,name=None)",
            "function_name": "cross",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "cross"
            ],
            "torch": null,
            "tfjs": null
        },
        "rfft3d": {
            "code": "tf.signal.rfft3d(input_tensor,fft_length=None,name=None)",
            "function_name": "rfft3d",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "rfft3d"
            ],
            "torch": null,
            "tfjs": null
        },
        "stft": {
            "code": "tf.signal.stft(signals,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,pad_end=False,name=None)",
            "function_name": "stft",
            "args": [
                {
                    "name": "signals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "frame_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "frame_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "window_fn",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "pad_end",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "stft"
            ],
            "torch": null,
            "tfjs": "stft"
        },
        "add": {
            "code": "tf.keras.layers.add(inputs,**kwargs)",
            "function_name": "add",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "add"
            ],
            "torch": "add",
            "tfjs": "add"
        },
        "rfft": {
            "code": "tf.signal.rfft(input_tensor,fft_length=None,name=None)",
            "function_name": "rfft",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "rfft"
            ],
            "torch": "rfft",
            "tfjs": "rfft"
        },
        "overlap_and_add": {
            "code": "tf.signal.overlap_and_add(signal,frame_step,name=None)",
            "function_name": "overlap_and_add",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "frame_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "overlap_and_add"
            ],
            "torch": null,
            "tfjs": null
        },
        "rfft2d": {
            "code": "tf.signal.rfft2d(input_tensor,fft_length=None,name=None)",
            "function_name": "rfft2d",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "rfft2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "mfccs_from_log_mel_spectrograms": {
            "code": "tf.signal.mfccs_from_log_mel_spectrograms(log_mel_spectrograms,name=None)",
            "function_name": "mfccs_from_log_mel_spectrograms",
            "args": [
                {
                    "name": "log_mel_spectrograms",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "mfccs_from_log_mel_spectrograms"
            ],
            "torch": null,
            "tfjs": null
        },
        "linear_to_mel_weight_matrix": {
            "code": "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=20,num_spectrogram_bins=129,sample_rate=8000,lower_edge_hertz=125.0,upper_edge_hertz=3800.0,dtype=tf.dtypes.float32,name=None)",
            "function_name": "linear_to_mel_weight_matrix",
            "args": [
                {
                    "name": "num_mel_bins",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_spectrogram_bins",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sample_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "lower_edge_hertz",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "upper_edge_hertz",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "linear_to_mel_weight_matrix"
            ],
            "torch": null,
            "tfjs": null
        },
        "irfft2d": {
            "code": "tf.signal.irfft2d(input_tensor,fft_length=None,name=None)",
            "function_name": "irfft2d",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "irfft2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "irfft3d": {
            "code": "tf.signal.irfft3d(input_tensor,fft_length=None,name=None)",
            "function_name": "irfft3d",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "irfft3d"
            ],
            "torch": null,
            "tfjs": null
        },
        "inverse_stft_window_fn": {
            "code": "tf.signal.inverse_stft_window_fn(frame_step,forward_window_fn=tf.signal.hann_window,name=None)",
            "function_name": "inverse_stft_window_fn",
            "args": [
                {
                    "name": "frame_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "forward_window_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "inverse_stft_window_fn"
            ],
            "torch": null,
            "tfjs": null
        },
        "inverse_stft": {
            "code": "tf.signal.inverse_stft(stfts,frame_length,frame_step,fft_length=None,window_fn=tf.signal.hann_window,name=None)",
            "function_name": "inverse_stft",
            "args": [
                {
                    "name": "stfts",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "frame_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "frame_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "window_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "inverse_stft"
            ],
            "torch": null,
            "tfjs": null
        },
        "irfft": {
            "code": "tf.signal.irfft(input_tensor,fft_length=None,name=None)",
            "function_name": "irfft",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "fft_length",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "irfft"
            ],
            "torch": "irfft",
            "tfjs": "irfft"
        },
        "ifftshift": {
            "code": "tf.signal.ifftshift(x,axes=None,name=None)",
            "function_name": "ifftshift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifftshift"
            ],
            "torch": null,
            "tfjs": null
        },
        "ifft3d": {
            "code": "tf.signal.ifft3d(input,name=None)",
            "function_name": "ifft3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifft3d"
            ],
            "torch": null,
            "tfjs": null
        },
        "idct": {
            "code": "tf.signal.idct(input,type=2,n=None,axis=-1,norm=None,name=None)",
            "function_name": "idct",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "idct"
            ],
            "torch": null,
            "tfjs": null
        },
        "ifft": {
            "code": "tf.signal.ifft(input,name=None)",
            "function_name": "ifft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifft"
            ],
            "torch": "ifft",
            "tfjs": "ifft"
        },
        "ifft2d": {
            "code": "tf.signal.ifft2d(input,name=None)",
            "function_name": "ifft2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "ifft2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "hann_window": {
            "code": "tf.signal.hann_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)",
            "function_name": "hann_window",
            "args": [
                {
                    "name": "window_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "window_length"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "periodic"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hann_window"
            ],
            "torch": "hann_window",
            "tfjs": null
        },
        "fftshift": {
            "code": "tf.signal.fftshift(x,axes=None,name=None)",
            "function_name": "fftshift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fftshift"
            ],
            "torch": null,
            "tfjs": null
        },
        "frame": {
            "code": "tf.signal.frame(signal,frame_length,frame_step,pad_end=False,pad_value=0,axis=-1,name=None)",
            "function_name": "frame",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "signal"
                },
                {
                    "name": "frame_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "frame_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "pad_end",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "pad_value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "frame"
            ],
            "torch": null,
            "tfjs": "frame"
        },
        "fft3d": {
            "code": "tf.signal.fft3d(input,name=None)",
            "function_name": "fft3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fft3d"
            ],
            "torch": null,
            "tfjs": null
        },
        "fft": {
            "code": "tf.signal.fft(input,name=None)",
            "function_name": "fft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fft"
            ],
            "torch": "fft",
            "tfjs": "fft"
        },
        "hamming_window": {
            "code": "tf.signal.hamming_window(window_length,periodic=True,dtype=tf.dtypes.float32,name=None)",
            "function_name": "hamming_window",
            "args": [
                {
                    "name": "window_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "window_length"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "periodic"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hamming_window"
            ],
            "torch": "hamming_window",
            "tfjs": null
        },
        "fft2d": {
            "code": "tf.signal.fft2d(input,name=None)",
            "function_name": "fft2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "fft2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "dct": {
            "code": "tf.signal.dct(input,type=2,n=None,axis=-1,norm=None,name=None)",
            "function_name": "dct",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "dct"
            ],
            "torch": null,
            "tfjs": null
        },
        "intersection": {
            "code": "tf.sets.intersection(a,b,validate_indices=True)",
            "function_name": "intersection",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "validate_indices",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sets",
                "intersection"
            ],
            "torch": null,
            "tfjs": null
        },
        "union": {
            "code": "tf.sets.union(a,b,validate_indices=True)",
            "function_name": "union",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "validate_indices",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sets",
                "union"
            ],
            "torch": null,
            "tfjs": null
        },
        "size": {
            "code": "tf.size(input,out_type=tf.dtypes.int32,name=None)",
            "function_name": "size",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "size"
            ],
            "torch": null,
            "tfjs": null
        },
        "saveoptions": {
            "code": "tf.saved_model.SaveOptions(namespace_whitelist=None,save_debug_info=False)",
            "function_name": "SaveOptions",
            "args": [
                {
                    "name": "namespace_whitelist",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_debug_info",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "SaveOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "difference": {
            "code": "tf.sets.difference(a,b,aminusb=True,validate_indices=True)",
            "function_name": "difference",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "aminusb",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "validate_indices",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sets",
                "difference"
            ],
            "torch": null,
            "tfjs": null
        },
        "save": {
            "code": "tf.saved_model.save(obj,export_dir,signatures=None,options=None)",
            "function_name": "save",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "export_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "signatures",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "options",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "save"
            ],
            "torch": null,
            "tfjs": "save"
        },
        "load": {
            "code": "tf.saved_model.load(export_dir,tags=None)",
            "function_name": "load",
            "args": [
                {
                    "name": "export_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "tags",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "load"
            ],
            "torch": "load",
            "tfjs": null
        },
        "contains_saved_model": {
            "code": "tf.saved_model.contains_saved_model(export_dir)",
            "function_name": "contains_saved_model",
            "args": [
                {
                    "name": "export_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "contains_saved_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_global_generator": {
            "code": "tf.random.experimental.get_global_generator()",
            "function_name": "get_global_generator",
            "args": [],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "get_global_generator"
            ],
            "torch": null,
            "tfjs": null
        },
        "generator": {
            "code": "tf.random.experimental.Generator(copy_from=None,state=None,alg=None)",
            "function_name": "Generator",
            "args": [
                {
                    "name": "copy_from",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "state",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "alg",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "Generator"
            ],
            "torch": null,
            "tfjs": "generator"
        },
        "set_global_generator": {
            "code": "tf.random.experimental.set_global_generator(generator)",
            "function_name": "set_global_generator",
            "args": [
                {
                    "name": "generator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "set_global_generator"
            ],
            "torch": null,
            "tfjs": null
        },
        "asset": {
            "code": "tf.saved_model.Asset(path)",
            "function_name": "Asset",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "saved_model",
                "Asset"
            ],
            "torch": null,
            "tfjs": null
        },
        "create_rng_state": {
            "code": "tf.random.experimental.create_rng_state(seed,algorithm)",
            "function_name": "create_rng_state",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "algorithm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "random",
                "experimental",
                "create_rng_state"
            ],
            "torch": null,
            "tfjs": null
        },
        "uniform_candidate_sampler": {
            "code": "tf.random.uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
            "function_name": "uniform_candidate_sampler",
            "args": [
                {
                    "name": "true_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "range_max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "uniform_candidate_sampler"
            ],
            "torch": null,
            "tfjs": null
        },
        "uniform": {
            "code": "tf.random.uniform(shape,minval=0,maxval=None,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "uniform",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "uniform"
            ],
            "torch": null,
            "tfjs": null
        },
        "stateless_uniform": {
            "code": "tf.random.stateless_uniform(shape,seed,minval=0,maxval=None,dtype=tf.dtypes.float32,name=None)",
            "function_name": "stateless_uniform",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_uniform"
            ],
            "torch": null,
            "tfjs": null
        },
        "stateless_categorical": {
            "code": "tf.random.stateless_categorical(logits,num_samples,seed,dtype=tf.dtypes.int64,name=None)",
            "function_name": "stateless_categorical",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_samples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_categorical"
            ],
            "torch": null,
            "tfjs": null
        },
        "truncated_normal": {
            "code": "tf.keras.backend.truncated_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)",
            "function_name": "truncated_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "truncated_normal"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_seed": {
            "code": "tf.random.set_seed(seed)",
            "function_name": "set_seed",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "random",
                "set_seed"
            ],
            "torch": null,
            "tfjs": null
        },
        "shuffle": {
            "code": "tf.random.shuffle(value,seed=None,name=None)",
            "function_name": "shuffle",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "shuffle"
            ],
            "torch": null,
            "tfjs": "shuffle"
        },
        "stateless_normal": {
            "code": "tf.random.stateless_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)",
            "function_name": "stateless_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_normal"
            ],
            "torch": null,
            "tfjs": null
        },
        "stateless_truncated_normal": {
            "code": "tf.random.stateless_truncated_normal(shape,seed,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,name=None)",
            "function_name": "stateless_truncated_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "stateless_truncated_normal"
            ],
            "torch": null,
            "tfjs": null
        },
        "poisson": {
            "code": "tf.keras.losses.Poisson(reduction=losses_utils.ReductionV2.AUTO,name='poisson')",
            "function_name": "Poisson",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "Poisson"
            ],
            "torch": null,
            "tfjs": null
        },
        "normal": {
            "code": "tf.random.normal(shape,mean=0.0,stddev=1.0,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "mean"
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "random",
                "normal"
            ],
            "torch": "normal",
            "tfjs": null
        },
        "gamma": {
            "code": "tf.random.gamma(shape,alpha,beta=None,dtype=tf.dtypes.float32,seed=None,name=None)",
            "function_name": "gamma",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "gamma"
            ],
            "torch": null,
            "tfjs": null
        },
        "log_uniform_candidate_sampler": {
            "code": "tf.random.log_uniform_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
            "function_name": "log_uniform_candidate_sampler",
            "args": [
                {
                    "name": "true_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "range_max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "log_uniform_candidate_sampler"
            ],
            "torch": null,
            "tfjs": null
        },
        "learned_unigram_candidate_sampler": {
            "code": "tf.random.learned_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,seed=None,name=None)",
            "function_name": "learned_unigram_candidate_sampler",
            "args": [
                {
                    "name": "true_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "range_max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "learned_unigram_candidate_sampler"
            ],
            "torch": null,
            "tfjs": null
        },
        "fixed_unigram_candidate_sampler": {
            "code": "tf.random.fixed_unigram_candidate_sampler(true_classes,num_true,num_sampled,unique,range_max,vocab_file='',distortion=1.0,num_reserved_ids=0,num_shards=1,shard=0,unigrams=(),seed=None,name=None)",
            "function_name": "fixed_unigram_candidate_sampler",
            "args": [
                {
                    "name": "true_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "range_max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "vocab_file",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "distortion",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_reserved_ids",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_shards",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shard",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unigrams",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "fixed_unigram_candidate_sampler"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical": {
            "code": "tf.random.categorical(logits,num_samples,dtype=None,seed=None,name=None)",
            "function_name": "categorical",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_samples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "categorical"
            ],
            "torch": null,
            "tfjs": null
        },
        "all_candidate_sampler": {
            "code": "tf.random.all_candidate_sampler(true_classes,num_true,num_sampled,unique,seed=None,name=None)",
            "function_name": "all_candidate_sampler",
            "args": [
                {
                    "name": "true_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "unique",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random",
                "all_candidate_sampler"
            ],
            "torch": null,
            "tfjs": null
        },
        "stack_dynamic_partitions": {
            "code": "tf.ragged.stack_dynamic_partitions(data,partitions,num_partitions,name=None)",
            "function_name": "stack_dynamic_partitions",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "partitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_partitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "stack_dynamic_partitions"
            ],
            "torch": null,
            "tfjs": null
        },
        "stack": {
            "code": "tf.stack(values,axis=0,name='stack')",
            "function_name": "stack",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "stack"
            ],
            "torch": "stack",
            "tfjs": "stack"
        },
        "segment_ids_to_row_splits": {
            "code": "tf.ragged.segment_ids_to_row_splits(segment_ids,num_segments=None,out_type=None,name=None)",
            "function_name": "segment_ids_to_row_splits",
            "args": [
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_segments",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "segment_ids_to_row_splits"
            ],
            "torch": null,
            "tfjs": null
        },
        "map_flat_values": {
            "code": "tf.ragged.map_flat_values(op,*args,**kwargs)",
            "function_name": "map_flat_values",
            "args": [
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "map_flat_values"
            ],
            "torch": null,
            "tfjs": null
        },
        "range": {
            "code": "tf.range(limit,delta=1,dtype=None,name='range')tf.range(start,limit,delta=1,dtype=None,name='range')",
            "function_name": "range",
            "args": [
                {
                    "name": "limit",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "limit",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "range"
            ],
            "torch": "range",
            "tfjs": "range"
        },
        "row_splits_to_segment_ids": {
            "code": "tf.ragged.row_splits_to_segment_ids(splits,name=None,out_type=None)",
            "function_name": "row_splits_to_segment_ids",
            "args": [
                {
                    "name": "splits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "ragged",
                "row_splits_to_segment_ids"
            ],
            "torch": null,
            "tfjs": null
        },
        "constant": {
            "code": "tf.constant(value,dtype=None,shape=None,name='Const')",
            "function_name": "constant",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "constant"
            ],
            "torch": null,
            "tfjs": "constant"
        },
        "priorityqueue": {
            "code": "tf.queue.PriorityQueue(capacity,types,shapes=None,names=None,shared_name=None,name='priority_queue')",
            "function_name": "PriorityQueue",
            "args": [
                {
                    "name": "capacity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "types",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shared_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "queue",
                "PriorityQueue"
            ],
            "torch": null,
            "tfjs": null
        },
        "queuebase": {
            "code": "tf.queue.QueueBase(dtypes,shapes,names,queue_ref)",
            "function_name": "QueueBase",
            "args": [
                {
                    "name": "dtypes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shapes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "names",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "queue_ref",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "queue",
                "QueueBase"
            ],
            "torch": null,
            "tfjs": null
        },
        "paddingfifoqueue": {
            "code": "tf.queue.PaddingFIFOQueue(capacity,dtypes,shapes,names=None,shared_name=None,name='padding_fifo_queue')",
            "function_name": "PaddingFIFOQueue",
            "args": [
                {
                    "name": "capacity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtypes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shapes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shared_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "queue",
                "PaddingFIFOQueue"
            ],
            "torch": null,
            "tfjs": null
        },
        "quantize_and_dequantize": {
            "code": "tf.quantization.quantize_and_dequantize(input,input_min,input_max,signed_input=True,num_bits=8,range_given=False,round_mode='HALF_TO_EVEN',name=None,narrow_range=False,axis=None)",
            "function_name": "quantize_and_dequantize",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "input_max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "signed_input",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "range_given",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "round_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "quantize_and_dequantize"
            ],
            "torch": null,
            "tfjs": null
        },
        "randomshufflequeue": {
            "code": "tf.queue.RandomShuffleQueue(capacity,min_after_dequeue,dtypes,shapes=None,names=None,seed=None,shared_name=None,name='random_shuffle_queue')",
            "function_name": "RandomShuffleQueue",
            "args": [
                {
                    "name": "capacity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min_after_dequeue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtypes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shared_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "queue",
                "RandomShuffleQueue"
            ],
            "torch": null,
            "tfjs": null
        },
        "boolean_mask": {
            "code": "tf.boolean_mask(tensor,mask,axis=None,name='boolean_mask')",
            "function_name": "boolean_mask",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "boolean_mask"
            ],
            "torch": null,
            "tfjs": null
        },
        "quantized_concat": {
            "code": "tf.quantization.quantized_concat(concat_dim,values,input_mins,input_maxes,name=None)",
            "function_name": "quantized_concat",
            "args": [
                {
                    "name": "concat_dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "input_mins",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "input_maxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "quantized_concat"
            ],
            "torch": null,
            "tfjs": null
        },
        "quantize": {
            "code": "tf.quantization.quantize(input,min_range,max_range,T,mode='MIN_COMBINED',round_mode='HALF_AWAY_FROM_ZERO',name=None,narrow_range=False,axis=None,ensure_minimum_range=0.01)",
            "function_name": "quantize",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "min_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "max_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "round_mode",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "ensure_minimum_range",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "quantize"
            ],
            "torch": "quantize",
            "tfjs": null
        },
        "fake_quant_with_min_max_vars_gradient": {
            "code": "tf.quantization.fake_quant_with_min_max_vars_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars_gradient",
            "args": [
                {
                    "name": "gradients",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "fake_quant_with_min_max_vars_per_channel": {
            "code": "tf.quantization.fake_quant_with_min_max_vars_per_channel(inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars_per_channel",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars_per_channel"
            ],
            "torch": null,
            "tfjs": null
        },
        "fifoqueue": {
            "code": "tf.queue.FIFOQueue(capacity,dtypes,shapes=None,names=None,shared_name=None,name='fifo_queue')",
            "function_name": "FIFOQueue",
            "args": [
                {
                    "name": "capacity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtypes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shared_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "queue",
                "FIFOQueue"
            ],
            "torch": null,
            "tfjs": null
        },
        "fake_quant_with_min_max_vars_per_channel_gradient": {
            "code": "tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient(gradients,inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars_per_channel_gradient",
            "args": [
                {
                    "name": "gradients",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars_per_channel_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "fake_quant_with_min_max_args_gradient": {
            "code": "tf.quantization.fake_quant_with_min_max_args_gradient(gradients,inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_args_gradient",
            "args": [
                {
                    "name": "gradients",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "min",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_args_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "fake_quant_with_min_max_vars": {
            "code": "tf.quantization.fake_quant_with_min_max_vars(inputs,min,max,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_vars",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_vars"
            ],
            "torch": null,
            "tfjs": null
        },
        "dequantize": {
            "code": "tf.quantization.dequantize(input,min_range,max_range,mode='MIN_COMBINED',name=None,axis=None,narrow_range=False)",
            "function_name": "dequantize",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "dequantize"
            ],
            "torch": null,
            "tfjs": null
        },
        "weighted_moments": {
            "code": "tf.nn.weighted_moments(x,axes,frequency_weights,keepdims=False,name=None)",
            "function_name": "weighted_moments",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "frequency_weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "weighted_moments"
            ],
            "torch": null,
            "tfjs": null
        },
        "fake_quant_with_min_max_args": {
            "code": "tf.quantization.fake_quant_with_min_max_args(inputs,min=-6,max=6,num_bits=8,narrow_range=False,name=None)",
            "function_name": "fake_quant_with_min_max_args",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "narrow_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "quantization",
                "fake_quant_with_min_max_args"
            ],
            "torch": null,
            "tfjs": null
        },
        "swish": {
            "code": "tf.nn.swish(features)",
            "function_name": "swish",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "swish"
            ],
            "torch": null,
            "tfjs": null
        },
        "weighted_cross_entropy_with_logits": {
            "code": "tf.nn.weighted_cross_entropy_with_logits(labels,logits,pos_weight,name=None)",
            "function_name": "weighted_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "pos_weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "weighted_cross_entropy_with_logits"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparse_softmax_cross_entropy_with_logits": {
            "code": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels,logits,name=None)",
            "function_name": "sparse_softmax_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sparse_softmax_cross_entropy_with_logits"
            ],
            "torch": null,
            "tfjs": null
        },
        "with_space_to_batch": {
            "code": "tf.nn.with_space_to_batch(input,dilation_rate,padding,op,filter_shape=None,spatial_dims=None,data_format=None)",
            "function_name": "with_space_to_batch",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "filter_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "spatial_dims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "with_space_to_batch"
            ],
            "torch": null,
            "tfjs": null
        },
        "sufficient_statistics": {
            "code": "tf.nn.sufficient_statistics(x,axes,shift=None,keepdims=False,name=None)",
            "function_name": "sufficient_statistics",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shift",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sufficient_statistics"
            ],
            "torch": null,
            "tfjs": null
        },
        "space_to_depth": {
            "code": "tf.nn.space_to_depth(input,block_size,data_format='NHWC',name=None)",
            "function_name": "space_to_depth",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "block_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "space_to_depth"
            ],
            "torch": null,
            "tfjs": null
        },
        "softmax_cross_entropy_with_logits": {
            "code": "tf.nn.softmax_cross_entropy_with_logits(labels,logits,axis=-1,name=None)",
            "function_name": "softmax_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "softmax_cross_entropy_with_logits"
            ],
            "torch": null,
            "tfjs": null
        },
        "sigmoid_cross_entropy_with_logits": {
            "code": "tf.nn.sigmoid_cross_entropy_with_logits(labels=None,logits=None,name=None)",
            "function_name": "sigmoid_cross_entropy_with_logits",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "logits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sigmoid_cross_entropy_with_logits"
            ],
            "torch": null,
            "tfjs": null
        },
        "softsign": {
            "code": "tf.keras.activations.softsign(x)",
            "function_name": "softsign",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "softsign"
            ],
            "torch": "softsign",
            "tfjs": null
        },
        "sampled_softmax_loss": {
            "code": "tf.nn.sampled_softmax_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=True,seed=None,name='sampled_softmax_loss')",
            "function_name": "sampled_softmax_loss",
            "args": [
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "biases",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "num_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "num_true",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sampled_values",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "remove_accidental_hits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "sampled_softmax_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "safe_embedding_lookup_sparse": {
            "code": "tf.nn.safe_embedding_lookup_sparse(embedding_weights,sparse_ids,sparse_weights=None,combiner='mean',default_id=None,max_norm=None,name=None)",
            "function_name": "safe_embedding_lookup_sparse",
            "args": [
                {
                    "name": "embedding_weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sparse_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "sparse_weights",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_id",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "safe_embedding_lookup_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "scale_regularization_loss": {
            "code": "tf.nn.scale_regularization_loss(regularization_loss)",
            "function_name": "scale_regularization_loss",
            "args": [
                {
                    "name": "regularization_loss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "scale_regularization_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "selu": {
            "code": "tf.keras.activations.selu(x)",
            "function_name": "selu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "selu"
            ],
            "torch": "selu",
            "tfjs": "selu"
        },
        "separable_conv2d": {
            "code": "tf.keras.backend.separable_conv2d(x,depthwise_kernel,pointwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "separable_conv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depthwise_kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "pointwise_kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "separable_conv2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "rnncellresidualwrapper": {
            "code": "tf.nn.RNNCellResidualWrapper(*args,**kwargs)",
            "function_name": "RNNCellResidualWrapper",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "RNNCellResidualWrapper"
            ],
            "torch": null,
            "tfjs": null
        },
        "rnncelldropoutwrapper": {
            "code": "tf.nn.RNNCellDropoutWrapper(*args,**kwargs)",
            "function_name": "RNNCellDropoutWrapper",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "RNNCellDropoutWrapper"
            ],
            "torch": null,
            "tfjs": null
        },
        "relu": {
            "code": "tf.keras.activations.relu(x,alpha=0.0,max_value=None,threshold=0)",
            "function_name": "relu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "max_value",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "relu"
            ],
            "torch": "relu",
            "tfjs": "relu"
        },
        "moments": {
            "code": "tf.nn.moments(x,axes,shift=None,keepdims=False,name=None)",
            "function_name": "moments",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "x"
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "shift",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "keepdims"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "moments"
            ],
            "torch": null,
            "tfjs": "moments"
        },
        "relu6": {
            "code": "tf.nn.relu6(features,name=None)",
            "function_name": "relu6",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "relu6"
            ],
            "torch": "relu6",
            "tfjs": "relu6"
        },
        "rnncelldevicewrapper": {
            "code": "tf.nn.RNNCellDeviceWrapper(*args,**kwargs)",
            "function_name": "RNNCellDeviceWrapper",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "RNNCellDeviceWrapper"
            ],
            "torch": null,
            "tfjs": null
        },
        "normalize_moments": {
            "code": "tf.nn.normalize_moments(counts,mean_ss,variance_ss,shift,name=None)",
            "function_name": "normalize_moments",
            "args": [
                {
                    "name": "counts",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean_ss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "variance_ss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "shift",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "normalize_moments"
            ],
            "torch": null,
            "tfjs": null
        },
        "nce_loss": {
            "code": "tf.nn.nce_loss(weights,biases,labels,inputs,num_sampled,num_classes,num_true=1,sampled_values=None,remove_accidental_hits=False,name='nce_loss')",
            "function_name": "nce_loss",
            "args": [
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "biases",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "num_sampled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "num_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "num_true",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sampled_values",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "remove_accidental_hits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "nce_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "pool": {
            "code": "tf.nn.pool(input,window_shape,pooling_type,strides=None,padding='VALID',data_format=None,dilations=None,name=None)",
            "function_name": "pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input"
                },
                {
                    "name": "window_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "pooling_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dilations"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "pool"
            ],
            "torch": null,
            "tfjs": "pool"
        },
        "max_pool3d": {
            "code": "tf.nn.max_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)",
            "function_name": "max_pool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool3d"
            ],
            "torch": "max_pool3d",
            "tfjs": null
        },
        "max_pool_with_argmax": {
            "code": "tf.nn.max_pool_with_argmax(input,ksize,strides,padding,data_format='NHWC',output_dtype=tf.dtypes.int64,include_batch_in_index=False,name=None)",
            "function_name": "max_pool_with_argmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "include_batch_in_index",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool_with_argmax"
            ],
            "torch": null,
            "tfjs": null
        },
        "log_softmax": {
            "code": "tf.nn.log_softmax(logits,axis=None,name=None)",
            "function_name": "log_softmax",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "log_softmax"
            ],
            "torch": "log_softmax",
            "tfjs": null
        },
        "max_pool1d": {
            "code": "tf.nn.max_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)",
            "function_name": "max_pool1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool1d"
            ],
            "torch": "max_pool1d",
            "tfjs": null
        },
        "max_pool2d": {
            "code": "tf.nn.max_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
            "function_name": "max_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool2d"
            ],
            "torch": "max_pool2d",
            "tfjs": null
        },
        "local_response_normalization": {
            "code": "tf.nn.local_response_normalization(input,depth_radius=5,bias=1,alpha=1,beta=0.5,name=None)",
            "function_name": "local_response_normalization",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depth_radius",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "local_response_normalization"
            ],
            "torch": null,
            "tfjs": null
        },
        "log_poisson_loss": {
            "code": "tf.nn.log_poisson_loss(targets,log_input,compute_full_loss=False,name=None)",
            "function_name": "log_poisson_loss",
            "args": [
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "log_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "compute_full_loss",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "log_poisson_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "l2_loss": {
            "code": "tf.nn.l2_loss(t,name=None)",
            "function_name": "l2_loss",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "l2_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "max_pool": {
            "code": "tf.nn.max_pool(input,ksize,strides,padding,data_format=None,name=None)",
            "function_name": "max_pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "max_pool"
            ],
            "torch": null,
            "tfjs": null
        },
        "fractional_max_pool": {
            "code": "tf.nn.fractional_max_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)",
            "function_name": "fractional_max_pool",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pooling_ratio",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "pseudo_random",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "overlapping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "fractional_max_pool"
            ],
            "torch": null,
            "tfjs": null
        },
        "fractional_avg_pool": {
            "code": "tf.nn.fractional_avg_pool(value,pooling_ratio,pseudo_random=False,overlapping=False,seed=0,name=None)",
            "function_name": "fractional_avg_pool",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pooling_ratio",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "pseudo_random",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "overlapping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "fractional_avg_pool"
            ],
            "torch": null,
            "tfjs": null
        },
        "leaky_relu": {
            "code": "tf.nn.leaky_relu(features,alpha=0.2,name=None)",
            "function_name": "leaky_relu",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "leaky_relu"
            ],
            "torch": "leaky_relu",
            "tfjs": null
        },
        "erosion2d": {
            "code": "tf.nn.erosion2d(value,filters,strides,padding,data_format,dilations,name=None)",
            "function_name": "erosion2d",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "erosion2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "elu": {
            "code": "tf.keras.activations.elu(x,alpha=1.0)",
            "function_name": "elu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "alpha",
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "elu"
            ],
            "torch": "elu",
            "tfjs": "elu"
        },
        "embedding_lookup": {
            "code": "tf.nn.embedding_lookup(params,ids,max_norm=None,name=None)",
            "function_name": "embedding_lookup",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "embedding_lookup"
            ],
            "torch": null,
            "tfjs": null
        },
        "embedding_lookup_sparse": {
            "code": "tf.nn.embedding_lookup_sparse(params,sp_ids,sp_weights,combiner=None,max_norm=None,name=None)",
            "function_name": "embedding_lookup_sparse",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sp_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "sp_weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "embedding_lookup_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "dropout": {
            "code": "tf.keras.backend.dropout(x,level,noise_shape=None,seed=None)",
            "function_name": "dropout",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "level",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "noise_shape",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "seed"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "dropout"
            ],
            "torch": "dropout",
            "tfjs": "dropout"
        },
        "dilation2d": {
            "code": "tf.nn.dilation2d(input,filters,strides,padding,data_format,dilations,name=None)",
            "function_name": "dilation2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "dilation2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "depth_to_space": {
            "code": "tf.nn.depth_to_space(input,block_size,data_format='NHWC',name=None)",
            "function_name": "depth_to_space",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "block_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "depth_to_space"
            ],
            "torch": null,
            "tfjs": null
        },
        "depthwise_conv2d_backprop_input": {
            "code": "tf.nn.depthwise_conv2d_backprop_input(input_sizes,filter,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)",
            "function_name": "depthwise_conv2d_backprop_input",
            "args": [
                {
                    "name": "input_sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out_backprop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 6
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 7
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "depthwise_conv2d_backprop_input"
            ],
            "torch": null,
            "tfjs": null
        },
        "depthwise_conv2d_backprop_filter": {
            "code": "tf.nn.depthwise_conv2d_backprop_filter(input,filter_sizes,out_backprop,strides,padding,data_format='NHWC',dilations=[1,1,1,1],name=None)",
            "function_name": "depthwise_conv2d_backprop_filter",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filter_sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out_backprop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 6
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 7
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "depthwise_conv2d_backprop_filter"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_loss": {
            "code": "tf.nn.ctc_loss(labels,logits,label_length,logit_length,logits_time_major=True,unique=None,blank_index=None,name=None)",
            "function_name": "ctc_loss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "label_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "logit_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "logits_time_major",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unique",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "blank_index",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_unique_labels": {
            "code": "tf.nn.ctc_unique_labels(labels,name=None)",
            "function_name": "ctc_unique_labels",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_unique_labels"
            ],
            "torch": null,
            "tfjs": null
        },
        "depthwise_conv2d": {
            "code": "tf.keras.backend.depthwise_conv2d(x,depthwise_kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "depthwise_conv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depthwise_kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "depthwise_conv2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "crelu": {
            "code": "tf.nn.crelu(features,axis=-1,name=None)",
            "function_name": "crelu",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "crelu"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_beam_search_decoder": {
            "code": "tf.nn.ctc_beam_search_decoder(inputs,sequence_length,beam_width=100,top_paths=1)",
            "function_name": "ctc_beam_search_decoder",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sequence_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "beam_width",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "top_paths",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_beam_search_decoder"
            ],
            "torch": null,
            "tfjs": null
        },
        "conv3d_transpose": {
            "code": "tf.nn.conv3d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NDHWC',dilations=None,name=None)",
            "function_name": "conv3d_transpose",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "conv3d_transpose"
            ],
            "torch": null,
            "tfjs": null
        },
        "convolution": {
            "code": "tf.nn.convolution(input,filters,strides=None,padding='VALID',data_format=None,dilations=None,name=None)",
            "function_name": "convolution",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "convolution"
            ],
            "torch": null,
            "tfjs": null
        },
        "conv_transpose": {
            "code": "tf.nn.conv_transpose(input,filters,output_shape,strides,padding='SAME',data_format=None,dilations=None,name=None)",
            "function_name": "conv_transpose",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "conv_transpose"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_greedy_decoder": {
            "code": "tf.nn.ctc_greedy_decoder(inputs,sequence_length,merge_repeated=True)",
            "function_name": "ctc_greedy_decoder",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sequence_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "merge_repeated",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "ctc_greedy_decoder"
            ],
            "torch": null,
            "tfjs": null
        },
        "conv2d_transpose": {
            "code": "tf.keras.backend.conv2d_transpose(x,kernel,output_shape,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "conv2d_transpose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "conv2d_transpose"
            ],
            "torch": null,
            "tfjs": null
        },
        "conv3d": {
            "code": "tf.keras.backend.conv3d(x,kernel,strides=(1,1,1),padding='valid',data_format=None,dilation_rate=(1,1,1))",
            "function_name": "conv3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "padding",
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "conv3d"
            ],
            "torch": "conv3d",
            "tfjs": "conv3d"
        },
        "conv1d": {
            "code": "tf.keras.backend.conv1d(x,kernel,strides=1,padding='valid',data_format=None,dilation_rate=1)",
            "function_name": "conv1d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "padding",
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "conv1d"
            ],
            "torch": "conv1d",
            "tfjs": "conv1d"
        },
        "conv1d_transpose": {
            "code": "tf.nn.conv1d_transpose(input,filters,output_shape,strides,padding='SAME',data_format='NWC',dilations=None,name=None)",
            "function_name": "conv1d_transpose",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "conv1d_transpose"
            ],
            "torch": null,
            "tfjs": null
        },
        "conv2d": {
            "code": "tf.keras.backend.conv2d(x,kernel,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1))",
            "function_name": "conv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "padding",
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "conv2d"
            ],
            "torch": "conv2d",
            "tfjs": "conv2d"
        },
        "compute_accidental_hits": {
            "code": "tf.nn.compute_accidental_hits(true_classes,sampled_candidates,num_true,seed=None,name=None)",
            "function_name": "compute_accidental_hits",
            "args": [
                {
                    "name": "true_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sampled_candidates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "compute_accidental_hits"
            ],
            "torch": null,
            "tfjs": null
        },
        "bias_add": {
            "code": "tf.keras.backend.bias_add(x,bias,data_format=None)",
            "function_name": "bias_add",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "bias",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "bias_add"
            ],
            "torch": null,
            "tfjs": null
        },
        "compute_average_loss": {
            "code": "tf.nn.compute_average_loss(per_example_loss,sample_weight=None,global_batch_size=None)",
            "function_name": "compute_average_loss",
            "args": [
                {
                    "name": "per_example_loss",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sample_weight",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "global_batch_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "compute_average_loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "collapse_repeated": {
            "code": "tf.nn.collapse_repeated(labels,seq_length,name=None)",
            "function_name": "collapse_repeated",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seq_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "collapse_repeated"
            ],
            "torch": null,
            "tfjs": null
        },
        "batch_norm_with_global_normalization": {
            "code": "tf.nn.batch_norm_with_global_normalization(input,mean,variance,beta,gamma,variance_epsilon,scale_after_normalization,name=None)",
            "function_name": "batch_norm_with_global_normalization",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "variance",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "variance_epsilon",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "scale_after_normalization",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 6
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "batch_norm_with_global_normalization"
            ],
            "torch": null,
            "tfjs": null
        },
        "batch_normalization": {
            "code": "tf.keras.backend.batch_normalization(x,mean,var,beta,gamma,axis=-1,epsilon=0.001)",
            "function_name": "batch_normalization",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "var",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_normalization"
            ],
            "torch": null,
            "tfjs": null
        },
        "avg_pool3d": {
            "code": "tf.nn.avg_pool3d(input,ksize,strides,padding,data_format='NDHWC',name=None)",
            "function_name": "avg_pool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": "padding"
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "avg_pool3d"
            ],
            "torch": "avg_pool3d",
            "tfjs": null
        },
        "avg_pool": {
            "code": "tf.nn.avg_pool(input,ksize,strides,padding,data_format=None,name=None)",
            "function_name": "avg_pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "avg_pool"
            ],
            "torch": null,
            "tfjs": null
        },
        "atrous_conv2d_transpose": {
            "code": "tf.nn.atrous_conv2d_transpose(value,filters,output_shape,rate,padding,name=None)",
            "function_name": "atrous_conv2d_transpose",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "atrous_conv2d_transpose"
            ],
            "torch": null,
            "tfjs": null
        },
        "pack_sequence_as": {
            "code": "tf.nest.pack_sequence_as(structure,flat_sequence,expand_composites=False)",
            "function_name": "pack_sequence_as",
            "args": [
                {
                    "name": "structure",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "flat_sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "expand_composites",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "pack_sequence_as"
            ],
            "torch": null,
            "tfjs": null
        },
        "atrous_conv2d": {
            "code": "tf.nn.atrous_conv2d(value,filters,rate,padding,name=None)",
            "function_name": "atrous_conv2d",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "atrous_conv2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "avg_pool2d": {
            "code": "tf.nn.avg_pool2d(input,ksize,strides,padding,data_format='NHWC',name=None)",
            "function_name": "avg_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": "padding"
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "avg_pool2d"
            ],
            "torch": "avg_pool2d",
            "tfjs": null
        },
        "avg_pool1d": {
            "code": "tf.nn.avg_pool1d(input,ksize,strides,padding,data_format='NWC',name=None)",
            "function_name": "avg_pool1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "ksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": "padding"
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "nn",
                "avg_pool1d"
            ],
            "torch": "avg_pool1d",
            "tfjs": null
        },
        "is_nested": {
            "code": "tf.nest.is_nested(seq)",
            "function_name": "is_nested",
            "args": [
                {
                    "name": "seq",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "is_nested"
            ],
            "torch": null,
            "tfjs": null
        },
        "map_structure": {
            "code": "tf.nest.map_structure(func,*structure,**kwargs)",
            "function_name": "map_structure",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "map_structure"
            ],
            "torch": null,
            "tfjs": null
        },
        "flatten": {
            "code": "tf.keras.backend.flatten(x)",
            "function_name": "flatten",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "flatten"
            ],
            "torch": null,
            "tfjs": "flatten"
        },
        "assert_same_structure": {
            "code": "tf.nest.assert_same_structure(nest1,nest2,check_types=True,expand_composites=False)",
            "function_name": "assert_same_structure",
            "args": [
                {
                    "name": "nest1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "nest2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "check_types",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "expand_composites",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nest",
                "assert_same_structure"
            ],
            "torch": null,
            "tfjs": null
        },
        "convert_graph_def": {
            "code": "tf.mlir.experimental.convert_graph_def(graph_def,pass_pipeline='tf-standard-pipeline')",
            "function_name": "convert_graph_def",
            "args": [
                {
                    "name": "graph_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pass_pipeline",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "mlir",
                "experimental",
                "convert_graph_def"
            ],
            "torch": null,
            "tfjs": null
        },
        "lossscale": {
            "code": "tf.mixed_precision.experimental.LossScale()",
            "function_name": "LossScale",
            "args": [],
            "attrs": [
                "tf",
                "mixed_precision",
                "experimental",
                "LossScale"
            ],
            "torch": null,
            "tfjs": null
        },
        "fixedlossscale": {
            "code": "tf.mixed_precision.experimental.FixedLossScale(loss_scale_value)",
            "function_name": "FixedLossScale",
            "args": [
                {
                    "name": "loss_scale_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "mixed_precision",
                "experimental",
                "FixedLossScale"
            ],
            "torch": null,
            "tfjs": null
        },
        "dynamiclossscale": {
            "code": "tf.mixed_precision.experimental.DynamicLossScale(initial_loss_scale=(2**15),increment_period=2000,multiplier=2.0)",
            "function_name": "DynamicLossScale",
            "args": [
                {
                    "name": "initial_loss_scale",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "increment_period",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "multiplier",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "mixed_precision",
                "experimental",
                "DynamicLossScale"
            ],
            "torch": null,
            "tfjs": null
        },
        "xlogy": {
            "code": "tf.math.xlogy(x,y,name=None)",
            "function_name": "xlogy",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "xlogy"
            ],
            "torch": null,
            "tfjs": null
        },
        "zeta": {
            "code": "tf.math.zeta(x,q,name=None)",
            "function_name": "zeta",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "q",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "zeta"
            ],
            "torch": null,
            "tfjs": null
        },
        "zero_fraction": {
            "code": "tf.math.zero_fraction(value,name=None)",
            "function_name": "zero_fraction",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "zero_fraction"
            ],
            "torch": null,
            "tfjs": null
        },
        "xdivy": {
            "code": "tf.math.xdivy(x,y,name=None)",
            "function_name": "xdivy",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "xdivy"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_prod": {
            "code": "tf.math.unsorted_segment_prod(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_prod",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_prod"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_sum": {
            "code": "tf.math.unsorted_segment_sum(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_sum",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_sum"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_sqrt_n": {
            "code": "tf.math.unsorted_segment_sqrt_n(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_sqrt_n",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_sqrt_n"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_mean": {
            "code": "tf.math.unsorted_segment_mean(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_mean",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_mean"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_min": {
            "code": "tf.math.unsorted_segment_min(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_min",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_min"
            ],
            "torch": null,
            "tfjs": null
        },
        "unsorted_segment_max": {
            "code": "tf.math.unsorted_segment_max(data,segment_ids,num_segments,name=None)",
            "function_name": "unsorted_segment_max",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "unsorted_segment_max"
            ],
            "torch": null,
            "tfjs": null
        },
        "tanh": {
            "code": "tf.keras.activations.tanh(x)",
            "function_name": "tanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "tanh"
            ],
            "torch": "tanh",
            "tfjs": "tanh"
        },
        "truediv": {
            "code": "tf.math.truediv(x,y,name=None)",
            "function_name": "truediv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "truediv"
            ],
            "torch": null,
            "tfjs": null
        },
        "top_k": {
            "code": "tf.math.top_k(input,k=1,sorted=True,name=None)",
            "function_name": "top_k",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sorted",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "top_k"
            ],
            "torch": null,
            "tfjs": null
        },
        "squared_difference": {
            "code": "tf.math.squared_difference(x,y,name=None)",
            "function_name": "squared_difference",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "squared_difference"
            ],
            "torch": null,
            "tfjs": null
        },
        "tan": {
            "code": "tf.math.tan(x,name=None)",
            "function_name": "tan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "tan"
            ],
            "torch": "tan",
            "tfjs": "tan"
        },
        "subtract": {
            "code": "tf.keras.layers.Subtract(**kwargs)",
            "function_name": "Subtract",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Subtract"
            ],
            "torch": null,
            "tfjs": null
        },
        "square": {
            "code": "tf.keras.backend.square(x)",
            "function_name": "square",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "square"
            ],
            "torch": null,
            "tfjs": "square"
        },
        "sqrt": {
            "code": "tf.keras.backend.sqrt(x)",
            "function_name": "sqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sqrt"
            ],
            "torch": "sqrt",
            "tfjs": "sqrt"
        },
        "softplus": {
            "code": "tf.keras.activations.softplus(x)",
            "function_name": "softplus",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "softplus"
            ],
            "torch": "softplus",
            "tfjs": "softplus"
        },
        "sin": {
            "code": "tf.keras.backend.sin(x)",
            "function_name": "sin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sin"
            ],
            "torch": "sin",
            "tfjs": "sin"
        },
        "sign": {
            "code": "tf.keras.backend.sign(x)",
            "function_name": "sign",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sign"
            ],
            "torch": "sign",
            "tfjs": "sign"
        },
        "sinh": {
            "code": "tf.math.sinh(x,name=None)",
            "function_name": "sinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "sinh"
            ],
            "torch": "sinh",
            "tfjs": "sinh"
        },
        "segment_prod": {
            "code": "tf.math.segment_prod(data,segment_ids,name=None)",
            "function_name": "segment_prod",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_prod"
            ],
            "torch": null,
            "tfjs": null
        },
        "sigmoid": {
            "code": "tf.keras.activations.sigmoid(x)",
            "function_name": "sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "sigmoid"
            ],
            "torch": "sigmoid",
            "tfjs": "sigmoid"
        },
        "segment_min": {
            "code": "tf.math.segment_min(data,segment_ids,name=None)",
            "function_name": "segment_min",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_min"
            ],
            "torch": null,
            "tfjs": null
        },
        "segment_max": {
            "code": "tf.math.segment_max(data,segment_ids,name=None)",
            "function_name": "segment_max",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segment_ids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "segment_max"
            ],
            "torch": null,
            "tfjs": null
        },
        "scalar_mul": {
            "code": "tf.math.scalar_mul(scalar,x,name=None)",
            "function_name": "scalar_mul",
            "args": [
                {
                    "name": "scalar",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "scalar_mul"
            ],
            "torch": null,
            "tfjs": null
        },
        "round": {
            "code": "tf.keras.backend.round(x)",
            "function_name": "round",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "round"
            ],
            "torch": "round",
            "tfjs": "round"
        },
        "rsqrt": {
            "code": "tf.math.rsqrt(x,name=None)",
            "function_name": "rsqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "rsqrt"
            ],
            "torch": "rsqrt",
            "tfjs": "rsqrt"
        },
        "reduce_variance": {
            "code": "tf.math.reduce_variance(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_variance",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_variance"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_prod": {
            "code": "tf.math.reduce_prod(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_prod",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_prod"
            ],
            "torch": null,
            "tfjs": null
        },
        "rint": {
            "code": "tf.math.rint(x,name=None)",
            "function_name": "rint",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "rint"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_std": {
            "code": "tf.math.reduce_std(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_std",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_std"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_min": {
            "code": "tf.math.reduce_min(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_min",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_min"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_mean": {
            "code": "tf.math.reduce_mean(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_mean",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_mean"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_any": {
            "code": "tf.math.reduce_any(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_any",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_any"
            ],
            "torch": null,
            "tfjs": null
        },
        "reciprocal_no_nan": {
            "code": "tf.math.reciprocal_no_nan(x,name=None)",
            "function_name": "reciprocal_no_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reciprocal_no_nan"
            ],
            "torch": null,
            "tfjs": null
        },
        "reciprocal": {
            "code": "tf.math.reciprocal(x,name=None)",
            "function_name": "reciprocal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reciprocal"
            ],
            "torch": "reciprocal",
            "tfjs": "reciprocal"
        },
        "reduce_euclidean_norm": {
            "code": "tf.math.reduce_euclidean_norm(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_euclidean_norm",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_euclidean_norm"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_logsumexp": {
            "code": "tf.math.reduce_logsumexp(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_logsumexp",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "reduce_logsumexp"
            ],
            "torch": null,
            "tfjs": null
        },
        "real": {
            "code": "tf.math.real(input,name=None)",
            "function_name": "real",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "real"
            ],
            "torch": "real",
            "tfjs": "real"
        },
        "pow": {
            "code": "tf.keras.backend.pow(x,a)",
            "function_name": "pow",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "pow"
            ],
            "torch": "pow",
            "tfjs": "pow"
        },
        "polyval": {
            "code": "tf.math.polyval(coeffs,x,name=None)",
            "function_name": "polyval",
            "args": [
                {
                    "name": "coeffs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "polyval"
            ],
            "torch": null,
            "tfjs": null
        },
        "not_equal": {
            "code": "tf.keras.backend.not_equal(x,y)",
            "function_name": "not_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "not_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "polygamma": {
            "code": "tf.math.polygamma(a,x,name=None)",
            "function_name": "polygamma",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "polygamma"
            ],
            "torch": "polygamma",
            "tfjs": null
        },
        "negative": {
            "code": "tf.math.negative(x,name=None)",
            "function_name": "negative",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "negative"
            ],
            "torch": null,
            "tfjs": null
        },
        "ndtri": {
            "code": "tf.math.ndtri(x,name=None)",
            "function_name": "ndtri",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "ndtri"
            ],
            "torch": null,
            "tfjs": null
        },
        "nextafter": {
            "code": "tf.math.nextafter(x1,x2,name=None)",
            "function_name": "nextafter",
            "args": [
                {
                    "name": "x1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "nextafter"
            ],
            "torch": null,
            "tfjs": null
        },
        "multiply": {
            "code": "tf.keras.layers.multiply(inputs,**kwargs)",
            "function_name": "multiply",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "multiply"
            ],
            "torch": null,
            "tfjs": "multiply"
        },
        "multiply_no_nan": {
            "code": "tf.math.multiply_no_nan(x,y,name=None)",
            "function_name": "multiply_no_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "multiply_no_nan"
            ],
            "torch": null,
            "tfjs": null
        },
        "log_sigmoid": {
            "code": "tf.math.log_sigmoid(x,name=None)",
            "function_name": "log_sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "log_sigmoid"
            ],
            "torch": null,
            "tfjs": null
        },
        "logical_and": {
            "code": "tf.math.logical_and(x,y,name=None)",
            "function_name": "logical_and",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_and"
            ],
            "torch": null,
            "tfjs": null
        },
        "logical_xor": {
            "code": "tf.math.logical_xor(x,y,name='LogicalXor')",
            "function_name": "logical_xor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_xor"
            ],
            "torch": "logical_xor",
            "tfjs": null
        },
        "logical_or": {
            "code": "tf.math.logical_or(x,y,name=None)",
            "function_name": "logical_or",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_or"
            ],
            "torch": null,
            "tfjs": null
        },
        "lgamma": {
            "code": "tf.math.lgamma(x,name=None)",
            "function_name": "lgamma",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "lgamma"
            ],
            "torch": "lgamma",
            "tfjs": null
        },
        "log1p": {
            "code": "tf.math.log1p(x,name=None)",
            "function_name": "log1p",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "log1p"
            ],
            "torch": "log1p",
            "tfjs": "log1p"
        },
        "logical_not": {
            "code": "tf.math.logical_not(x,name=None)",
            "function_name": "logical_not",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "logical_not"
            ],
            "torch": "logical_not",
            "tfjs": null
        },
        "log": {
            "code": "tf.keras.backend.log(x)",
            "function_name": "log",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "log"
            ],
            "torch": "log",
            "tfjs": "log"
        },
        "less_equal": {
            "code": "tf.keras.backend.less_equal(x,y)",
            "function_name": "less_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "less_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "less": {
            "code": "tf.keras.backend.less(x,y)",
            "function_name": "less",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "less"
            ],
            "torch": null,
            "tfjs": "less"
        },
        "lbeta": {
            "code": "tf.math.lbeta(x,name=None)",
            "function_name": "lbeta",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "lbeta"
            ],
            "torch": null,
            "tfjs": null
        },
        "in_top_k": {
            "code": "tf.keras.backend.in_top_k(predictions,targets,k)",
            "function_name": "in_top_k",
            "args": [
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "in_top_k"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_nan": {
            "code": "tf.math.is_nan(x,name=None)",
            "function_name": "is_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_nan"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_inf": {
            "code": "tf.math.is_inf(x,name=None)",
            "function_name": "is_inf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_inf"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_finite": {
            "code": "tf.math.is_finite(x,name=None)",
            "function_name": "is_finite",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_finite"
            ],
            "torch": null,
            "tfjs": null
        },
        "l2_normalize": {
            "code": "tf.keras.backend.l2_normalize(x,axis=None)",
            "function_name": "l2_normalize",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "l2_normalize"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_strictly_increasing": {
            "code": "tf.math.is_strictly_increasing(x,name=None)",
            "function_name": "is_strictly_increasing",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_strictly_increasing"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_non_decreasing": {
            "code": "tf.math.is_non_decreasing(x,name=None)",
            "function_name": "is_non_decreasing",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "is_non_decreasing"
            ],
            "torch": null,
            "tfjs": null
        },
        "invert_permutation": {
            "code": "tf.math.invert_permutation(x,name=None)",
            "function_name": "invert_permutation",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "invert_permutation"
            ],
            "torch": null,
            "tfjs": null
        },
        "igammac": {
            "code": "tf.math.igammac(a,x,name=None)",
            "function_name": "igammac",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "igammac"
            ],
            "torch": null,
            "tfjs": null
        },
        "imag": {
            "code": "tf.math.imag(input,name=None)",
            "function_name": "imag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "imag"
            ],
            "torch": "imag",
            "tfjs": "imag"
        },
        "greater_equal": {
            "code": "tf.keras.backend.greater_equal(x,y)",
            "function_name": "greater_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "greater_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "floordiv": {
            "code": "tf.math.floordiv(x,y,name=None)",
            "function_name": "floordiv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "floordiv"
            ],
            "torch": null,
            "tfjs": "floordiv"
        },
        "expm1": {
            "code": "tf.math.expm1(x,name=None)",
            "function_name": "expm1",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "expm1"
            ],
            "torch": "expm1",
            "tfjs": "expm1"
        },
        "igamma": {
            "code": "tf.math.igamma(a,x,name=None)",
            "function_name": "igamma",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "igamma"
            ],
            "torch": null,
            "tfjs": null
        },
        "exp": {
            "code": "tf.keras.backend.exp(x)",
            "function_name": "exp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "exp"
            ],
            "torch": "exp",
            "tfjs": "exp"
        },
        "erfinv": {
            "code": "tf.math.erfinv(x,name=None)",
            "function_name": "erfinv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "erfinv"
            ],
            "torch": "erfinv",
            "tfjs": null
        },
        "floor": {
            "code": "tf.math.floor(x,name=None)",
            "function_name": "floor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "floor"
            ],
            "torch": "floor",
            "tfjs": "floor"
        },
        "floormod": {
            "code": "tf.math.floormod(x,y,name=None)",
            "function_name": "floormod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "floormod"
            ],
            "torch": null,
            "tfjs": null
        },
        "erfc": {
            "code": "tf.math.erfc(x,name=None)",
            "function_name": "erfc",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "erfc"
            ],
            "torch": "erfc",
            "tfjs": null
        },
        "greater": {
            "code": "tf.keras.backend.greater(x,y)",
            "function_name": "greater",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "greater"
            ],
            "torch": null,
            "tfjs": "greater"
        },
        "erf": {
            "code": "tf.math.erf(x,name=None)",
            "function_name": "erf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "erf"
            ],
            "torch": "erf",
            "tfjs": "erf"
        },
        "divide_no_nan": {
            "code": "tf.math.divide_no_nan(x,y,name=None)",
            "function_name": "divide_no_nan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "divide_no_nan"
            ],
            "torch": null,
            "tfjs": null
        },
        "divide": {
            "code": "tf.math.divide(x,y,name=None)",
            "function_name": "divide",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "divide"
            ],
            "torch": null,
            "tfjs": null
        },
        "equal": {
            "code": "tf.keras.backend.equal(x,y)",
            "function_name": "equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "equal"
            ],
            "torch": "equal",
            "tfjs": "equal"
        },
        "digamma": {
            "code": "tf.math.digamma(x,name=None)",
            "function_name": "digamma",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "digamma"
            ],
            "torch": "digamma",
            "tfjs": null
        },
        "cumsum": {
            "code": "tf.keras.backend.cumsum(x,axis=0)",
            "function_name": "cumsum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cumsum"
            ],
            "torch": "cumsum",
            "tfjs": "cumsum"
        },
        "count_nonzero": {
            "code": "tf.math.count_nonzero(input,axis=None,keepdims=None,dtype=tf.dtypes.int64,name=None)",
            "function_name": "count_nonzero",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "count_nonzero"
            ],
            "torch": null,
            "tfjs": null
        },
        "cumulative_logsumexp": {
            "code": "tf.math.cumulative_logsumexp(x,axis=0,exclusive=False,reverse=False,name=None)",
            "function_name": "cumulative_logsumexp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "exclusive",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reverse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "cumulative_logsumexp"
            ],
            "torch": null,
            "tfjs": null
        },
        "cosh": {
            "code": "tf.math.cosh(x,name=None)",
            "function_name": "cosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "cosh"
            ],
            "torch": "cosh",
            "tfjs": "cosh"
        },
        "cumprod": {
            "code": "tf.keras.backend.cumprod(x,axis=0)",
            "function_name": "cumprod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cumprod"
            ],
            "torch": "cumprod",
            "tfjs": null
        },
        "cos": {
            "code": "tf.keras.backend.cos(x)",
            "function_name": "cos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cos"
            ],
            "torch": "cos",
            "tfjs": "cos"
        },
        "bincount": {
            "code": "tf.math.bincount(arr,weights=None,minlength=None,maxlength=None,dtype=tf.dtypes.int32,name=None)",
            "function_name": "bincount",
            "args": [
                {
                    "name": "arr",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "weights"
                },
                {
                    "name": "minlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "minlength"
                },
                {
                    "name": "maxlength",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bincount"
            ],
            "torch": "bincount",
            "tfjs": null
        },
        "confusion_matrix": {
            "code": "tf.math.confusion_matrix(labels,predictions,num_classes=None,weights=None,dtype=tf.dtypes.int32,name=None)",
            "function_name": "confusion_matrix",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "confusion_matrix"
            ],
            "torch": null,
            "tfjs": null
        },
        "ceil": {
            "code": "tf.math.ceil(x,name=None)",
            "function_name": "ceil",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "ceil"
            ],
            "torch": "ceil",
            "tfjs": "ceil"
        },
        "bessel_i1e": {
            "code": "tf.math.bessel_i1e(x,name=None)",
            "function_name": "bessel_i1e",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bessel_i1e"
            ],
            "torch": null,
            "tfjs": null
        },
        "betainc": {
            "code": "tf.math.betainc(a,b,x,name=None)",
            "function_name": "betainc",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "betainc"
            ],
            "torch": null,
            "tfjs": null
        },
        "bessel_i0e": {
            "code": "tf.math.bessel_i0e(x,name=None)",
            "function_name": "bessel_i0e",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bessel_i0e"
            ],
            "torch": null,
            "tfjs": null
        },
        "conj": {
            "code": "tf.math.conj(x,name=None)",
            "function_name": "conj",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "conj"
            ],
            "torch": "conj",
            "tfjs": null
        },
        "bessel_i1": {
            "code": "tf.math.bessel_i1(x,name=None)",
            "function_name": "bessel_i1",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bessel_i1"
            ],
            "torch": null,
            "tfjs": null
        },
        "atan": {
            "code": "tf.math.atan(x,name=None)",
            "function_name": "atan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "atan"
            ],
            "torch": "atan",
            "tfjs": "atan"
        },
        "atanh": {
            "code": "tf.math.atanh(x,name=None)",
            "function_name": "atanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "atanh"
            ],
            "torch": null,
            "tfjs": "atanh"
        },
        "atan2": {
            "code": "tf.math.atan2(y,x,name=None)",
            "function_name": "atan2",
            "args": [
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "atan2"
            ],
            "torch": "atan2",
            "tfjs": "atan2"
        },
        "bessel_i0": {
            "code": "tf.math.bessel_i0(x,name=None)",
            "function_name": "bessel_i0",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "bessel_i0"
            ],
            "torch": null,
            "tfjs": null
        },
        "asin": {
            "code": "tf.math.asin(x,name=None)",
            "function_name": "asin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "asin"
            ],
            "torch": "asin",
            "tfjs": "asin"
        },
        "asinh": {
            "code": "tf.math.asinh(x,name=None)",
            "function_name": "asinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "asinh"
            ],
            "torch": null,
            "tfjs": "asinh"
        },
        "argmin": {
            "code": "tf.keras.backend.argmin(x,axis=-1)",
            "function_name": "argmin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "argmin"
            ],
            "torch": "argmin",
            "tfjs": "argmin"
        },
        "argmax": {
            "code": "tf.keras.backend.argmax(x,axis=-1)",
            "function_name": "argmax",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "argmax"
            ],
            "torch": "argmax",
            "tfjs": "argmax"
        },
        "angle": {
            "code": "tf.math.angle(input,name=None)",
            "function_name": "angle",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "angle"
            ],
            "torch": "angle",
            "tfjs": null
        },
        "add_n": {
            "code": "tf.math.add_n(inputs,name=None)",
            "function_name": "add_n",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "add_n"
            ],
            "torch": null,
            "tfjs": null
        },
        "acos": {
            "code": "tf.math.acos(x,name=None)",
            "function_name": "acos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "acos"
            ],
            "torch": "acos",
            "tfjs": "acos"
        },
        "abs": {
            "code": "tf.keras.backend.abs(x)",
            "function_name": "abs",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "abs"
            ],
            "torch": "abs",
            "tfjs": "abs"
        },
        "accumulate_n": {
            "code": "tf.math.accumulate_n(inputs,shape=None,tensor_dtype=None,name=None)",
            "function_name": "accumulate_n",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tensor_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "math",
                "accumulate_n"
            ],
            "torch": null,
            "tfjs": null
        },
        "acosh": {
            "code": "tf.math.acosh(x,name=None)",
            "function_name": "acosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "x"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "math",
                "acosh"
            ],
            "torch": null,
            "tfjs": "acosh"
        },
        "densehashtable": {
            "code": "tf.lookup.experimental.DenseHashTable(key_dtype,value_dtype,default_value,empty_key,deleted_key,initial_num_buckets=None,name='MutableDenseHashTable',checkpoint=True)",
            "function_name": "DenseHashTable",
            "args": [
                {
                    "name": "key_dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "value_dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "default_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "empty_key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "deleted_key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "initial_num_buckets",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "checkpoint",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lookup",
                "experimental",
                "DenseHashTable"
            ],
            "torch": null,
            "tfjs": null
        },
        "staticvocabularytable": {
            "code": "tf.lookup.StaticVocabularyTable(initializer,num_oov_buckets,lookup_key_dtype=None,name=None)",
            "function_name": "StaticVocabularyTable",
            "args": [
                {
                    "name": "initializer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_oov_buckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "lookup_key_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lookup",
                "StaticVocabularyTable"
            ],
            "torch": null,
            "tfjs": null
        },
        "statichashtable": {
            "code": "tf.lookup.StaticHashTable(initializer,default_value,name=None)",
            "function_name": "StaticHashTable",
            "args": [
                {
                    "name": "initializer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "default_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lookup",
                "StaticHashTable"
            ],
            "torch": null,
            "tfjs": null
        },
        "keyvaluetensorinitializer": {
            "code": "tf.lookup.KeyValueTensorInitializer(keys,values,key_dtype=None,value_dtype=None,name=None)",
            "function_name": "KeyValueTensorInitializer",
            "args": [
                {
                    "name": "keys",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "key_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "value_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lookup",
                "KeyValueTensorInitializer"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_delegate": {
            "code": "tf.lite.experimental.load_delegate(library,options=None)",
            "function_name": "load_delegate",
            "args": [
                {
                    "name": "library",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "options",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lite",
                "experimental",
                "load_delegate"
            ],
            "torch": null,
            "tfjs": null
        },
        "tfliteconverter": {
            "code": "tf.lite.TFLiteConverter(funcs,trackable_obj=None)",
            "function_name": "TFLiteConverter",
            "args": [
                {
                    "name": "funcs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "trackable_obj",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lite",
                "TFLiteConverter"
            ],
            "torch": null,
            "tfjs": null
        },
        "targetspec": {
            "code": "tf.lite.TargetSpec(supported_ops=None,supported_types=None)",
            "function_name": "TargetSpec",
            "args": [
                {
                    "name": "supported_ops",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "supported_types",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lite",
                "TargetSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "textfileinitializer": {
            "code": "tf.lookup.TextFileInitializer(filename,key_dtype,key_index,value_dtype,value_index,vocab_size=None,delimiter='\\t',name=None)",
            "function_name": "TextFileInitializer",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "key_dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "key_index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "value_dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "value_index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "vocab_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "delimiter",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lookup",
                "TextFileInitializer"
            ],
            "torch": null,
            "tfjs": null
        },
        "representativedataset": {
            "code": "tf.lite.RepresentativeDataset(input_gen)",
            "function_name": "RepresentativeDataset",
            "args": [
                {
                    "name": "input_gen",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "lite",
                "RepresentativeDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "interpreter": {
            "code": "tf.lite.Interpreter(model_path=None,model_content=None,experimental_delegates=None)",
            "function_name": "Interpreter",
            "args": [
                {
                    "name": "model_path",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "model_content",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_delegates",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "lite",
                "Interpreter"
            ],
            "torch": null,
            "tfjs": null
        },
        "tridiagonal_matmul": {
            "code": "tf.linalg.tridiagonal_matmul(diagonals,rhs,diagonals_format='compact',name=None)",
            "function_name": "tridiagonal_matmul",
            "args": [
                {
                    "name": "diagonals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "diagonals_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tridiagonal_matmul"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensor_diag_part": {
            "code": "tf.linalg.tensor_diag_part(input,name=None)",
            "function_name": "tensor_diag_part",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tensor_diag_part"
            ],
            "torch": null,
            "tfjs": null
        },
        "sqrtm": {
            "code": "tf.linalg.sqrtm(input,name=None)",
            "function_name": "sqrtm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "sqrtm"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensor_diag": {
            "code": "tf.linalg.tensor_diag(diagonal,name=None)",
            "function_name": "tensor_diag",
            "args": [
                {
                    "name": "diagonal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tensor_diag"
            ],
            "torch": null,
            "tfjs": null
        },
        "trace": {
            "code": "tf.autograph.trace(*args)",
            "function_name": "trace",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "trace"
            ],
            "torch": "trace",
            "tfjs": null
        },
        "svd": {
            "code": "tf.linalg.svd(tensor,full_matrices=False,compute_uv=True,name=None)",
            "function_name": "svd",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "full_matrices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "compute_uv",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "compute_uv"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "svd"
            ],
            "torch": "svd",
            "tfjs": null
        },
        "solve": {
            "code": "tf.linalg.solve(matrix,rhs,adjoint=False,name=None)",
            "function_name": "solve",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "adjoint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "solve"
            ],
            "torch": "solve",
            "tfjs": null
        },
        "slogdet": {
            "code": "tf.linalg.slogdet(input,name=None)",
            "function_name": "slogdet",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "slogdet"
            ],
            "torch": "slogdet",
            "tfjs": null
        },
        "triangular_solve": {
            "code": "tf.linalg.triangular_solve(matrix,rhs,lower=True,adjoint=False,name=None)",
            "function_name": "triangular_solve",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "adjoint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "triangular_solve"
            ],
            "torch": "triangular_solve",
            "tfjs": null
        },
        "set_diag": {
            "code": "tf.linalg.set_diag(input,diagonal,name='set_diag',k=0)",
            "function_name": "set_diag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "diagonal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "set_diag"
            ],
            "torch": null,
            "tfjs": null
        },
        "tridiagonal_solve": {
            "code": "tf.linalg.tridiagonal_solve(diagonals,rhs,diagonals_format='compact',transpose_rhs=False,conjugate_rhs=False,name=None,partial_pivoting=True)",
            "function_name": "tridiagonal_solve",
            "args": [
                {
                    "name": "diagonals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "diagonals_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "transpose_rhs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "conjugate_rhs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "partial_pivoting",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "tridiagonal_solve"
            ],
            "torch": null,
            "tfjs": null
        },
        "pinv": {
            "code": "tf.linalg.pinv(a,rcond=None,validate_args=False,name=None)",
            "function_name": "pinv",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rcond",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "validate_args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "pinv"
            ],
            "torch": null,
            "tfjs": null
        },
        "qr": {
            "code": "tf.linalg.qr(input,full_matrices=False,name=None)",
            "function_name": "qr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "a"
                },
                {
                    "name": "full_matrices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "qr"
            ],
            "torch": "qr",
            "tfjs": "qr"
        },
        "matvec": {
            "code": "tf.linalg.matvec(a,b,transpose_a=False,adjoint_a=False,a_is_sparse=False,b_is_sparse=False,name=None)",
            "function_name": "matvec",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "transpose_a",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "adjoint_a",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "a_is_sparse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "b_is_sparse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matvec"
            ],
            "torch": null,
            "tfjs": null
        },
        "matrix_transpose": {
            "code": "tf.linalg.matrix_transpose(a,name='matrix_transpose',conjugate=False)",
            "function_name": "matrix_transpose",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "conjugate",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matrix_transpose"
            ],
            "torch": null,
            "tfjs": null
        },
        "normalize": {
            "code": "tf.keras.utils.normalize(x,axis=-1,order=2)",
            "function_name": "normalize",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "order",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "normalize"
            ],
            "torch": "normalize",
            "tfjs": null
        },
        "matrix_rank": {
            "code": "tf.linalg.matrix_rank(a,tol=None,validate_args=False,name=None)",
            "function_name": "matrix_rank",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "tol",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "tol"
                },
                {
                    "name": "validate_args",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matrix_rank"
            ],
            "torch": "matrix_rank",
            "tfjs": null
        },
        "matmul": {
            "code": "tf.linalg.matmul(a,b,transpose_a=False,transpose_b=False,adjoint_a=False,adjoint_b=False,a_is_sparse=False,b_is_sparse=False,name=None)",
            "function_name": "matmul",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "b"
                },
                {
                    "name": "transpose_a",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "transpose_b",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjoint_a",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "adjoint_b",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "a_is_sparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "b_is_sparse",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "matmul"
            ],
            "torch": "matmul",
            "tfjs": "matmul"
        },
        "lu_solve": {
            "code": "tf.linalg.lu_solve(lower_upper,perm,rhs,validate_args=False,name=None)",
            "function_name": "lu_solve",
            "args": [
                {
                    "name": "lower_upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "validate_args",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu_solve"
            ],
            "torch": "lu_solve",
            "tfjs": null
        },
        "lu_reconstruct": {
            "code": "tf.linalg.lu_reconstruct(lower_upper,perm,validate_args=False,name=None)",
            "function_name": "lu_reconstruct",
            "args": [
                {
                    "name": "lower_upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "validate_args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu_reconstruct"
            ],
            "torch": null,
            "tfjs": null
        },
        "lu": {
            "code": "tf.linalg.lu(input,output_idx_type=tf.dtypes.int32,name=None)",
            "function_name": "lu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "output_idx_type",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu"
            ],
            "torch": "lu",
            "tfjs": null
        },
        "lstsq": {
            "code": "tf.linalg.lstsq(matrix,rhs,l2_regularizer=0.0,fast=True,name=None)",
            "function_name": "lstsq",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "l2_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "fast",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lstsq"
            ],
            "torch": "lstsq",
            "tfjs": null
        },
        "lu_matrix_inverse": {
            "code": "tf.linalg.lu_matrix_inverse(lower_upper,perm,validate_args=False,name=None)",
            "function_name": "lu_matrix_inverse",
            "args": [
                {
                    "name": "lower_upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "validate_args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "lu_matrix_inverse"
            ],
            "torch": null,
            "tfjs": null
        },
        "logm": {
            "code": "tf.linalg.logm(input,name=None)",
            "function_name": "logm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "logm"
            ],
            "torch": null,
            "tfjs": null
        },
        "logdet": {
            "code": "tf.linalg.logdet(matrix,name=None)",
            "function_name": "logdet",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "logdet"
            ],
            "torch": "logdet",
            "tfjs": null
        },
        "linearoperatorzeros": {
            "code": "tf.linalg.LinearOperatorZeros(num_rows,num_columns=None,batch_shape=None,dtype=None,is_non_singular=False,is_self_adjoint=True,is_positive_definite=False,is_square=True,assert_proper_shapes=False,name='LinearOperatorZeros')",
            "function_name": "LinearOperatorZeros",
            "args": [
                {
                    "name": "num_rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "assert_proper_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorZeros"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatortoeplitz": {
            "code": "tf.linalg.LinearOperatorToeplitz(col,row,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorToeplitz')",
            "function_name": "LinearOperatorToeplitz",
            "args": [
                {
                    "name": "col",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "row",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorToeplitz"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorlowrankupdate": {
            "code": "tf.linalg.LinearOperatorLowRankUpdate(base_operator,u,diag_update=None,v=None,is_diag_update_positive=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorLowRankUpdate')",
            "function_name": "LinearOperatorLowRankUpdate",
            "args": [
                {
                    "name": "base_operator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "u",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "diag_update",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "v",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_diag_update_positive",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorLowRankUpdate"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorpermutation": {
            "code": "tf.linalg.LinearOperatorPermutation(perm,dtype=tf.dtypes.float32,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorPermutation')",
            "function_name": "LinearOperatorPermutation",
            "args": [
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorPermutation"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorlowertriangular": {
            "code": "tf.linalg.LinearOperatorLowerTriangular(tril,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorLowerTriangular')",
            "function_name": "LinearOperatorLowerTriangular",
            "args": [
                {
                    "name": "tril",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorLowerTriangular"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorscaledidentity": {
            "code": "tf.linalg.LinearOperatorScaledIdentity(num_rows,multiplier,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,assert_proper_shapes=False,name='LinearOperatorScaledIdentity')",
            "function_name": "LinearOperatorScaledIdentity",
            "args": [
                {
                    "name": "num_rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "multiplier",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "assert_proper_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorScaledIdentity"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorinversion": {
            "code": "tf.linalg.LinearOperatorInversion(operator,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)",
            "function_name": "LinearOperatorInversion",
            "args": [
                {
                    "name": "operator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorInversion"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorkronecker": {
            "code": "tf.linalg.LinearOperatorKronecker(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)",
            "function_name": "LinearOperatorKronecker",
            "args": [
                {
                    "name": "operators",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorKronecker"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorfullmatrix": {
            "code": "tf.linalg.LinearOperatorFullMatrix(matrix,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorFullMatrix')",
            "function_name": "LinearOperatorFullMatrix",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorFullMatrix"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatoridentity": {
            "code": "tf.linalg.LinearOperatorIdentity(num_rows,batch_shape=None,dtype=None,is_non_singular=True,is_self_adjoint=True,is_positive_definite=True,is_square=True,assert_proper_shapes=False,name='LinearOperatorIdentity')",
            "function_name": "LinearOperatorIdentity",
            "args": [
                {
                    "name": "num_rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "assert_proper_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorIdentity"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorhouseholder": {
            "code": "tf.linalg.LinearOperatorHouseholder(reflection_axis,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorHouseholder')",
            "function_name": "LinearOperatorHouseholder",
            "args": [
                {
                    "name": "reflection_axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorHouseholder"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatordiag": {
            "code": "tf.linalg.LinearOperatorDiag(diag,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name='LinearOperatorDiag')",
            "function_name": "LinearOperatorDiag",
            "args": [
                {
                    "name": "diag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorDiag"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorcirculant2d": {
            "code": "tf.linalg.LinearOperatorCirculant2D(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant2D')",
            "function_name": "LinearOperatorCirculant2D",
            "args": [
                {
                    "name": "spectrum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_output_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorCirculant2D"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorcomposition": {
            "code": "tf.linalg.LinearOperatorComposition(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)",
            "function_name": "LinearOperatorComposition",
            "args": [
                {
                    "name": "operators",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorComposition"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorcirculant3d": {
            "code": "tf.linalg.LinearOperatorCirculant3D(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant3D')",
            "function_name": "LinearOperatorCirculant3D",
            "args": [
                {
                    "name": "spectrum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_output_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorCirculant3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorcirculant": {
            "code": "tf.linalg.LinearOperatorCirculant(spectrum,input_output_dtype=tf.dtypes.complex64,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name='LinearOperatorCirculant')",
            "function_name": "LinearOperatorCirculant",
            "args": [
                {
                    "name": "spectrum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_output_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorCirculant"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatorblockdiag": {
            "code": "tf.linalg.LinearOperatorBlockDiag(operators,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=True,name=None)",
            "function_name": "LinearOperatorBlockDiag",
            "args": [
                {
                    "name": "operators",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorBlockDiag"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperatoradjoint": {
            "code": "tf.linalg.LinearOperatorAdjoint(operator,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)",
            "function_name": "LinearOperatorAdjoint",
            "args": [
                {
                    "name": "operator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperatorAdjoint"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearoperator": {
            "code": "tf.linalg.LinearOperator(dtype,graph_parents=None,is_non_singular=None,is_self_adjoint=None,is_positive_definite=None,is_square=None,name=None)",
            "function_name": "LinearOperator",
            "args": [
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "graph_parents",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_non_singular",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_self_adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_positive_definite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_square",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "LinearOperator"
            ],
            "torch": null,
            "tfjs": null
        },
        "inv": {
            "code": "tf.linalg.inv(input,adjoint=False,name=None)",
            "function_name": "inv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "adjoint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "inv"
            ],
            "torch": null,
            "tfjs": null
        },
        "global_norm": {
            "code": "tf.linalg.global_norm(t_list,name=None)",
            "function_name": "global_norm",
            "args": [
                {
                    "name": "t_list",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "global_norm"
            ],
            "torch": null,
            "tfjs": null
        },
        "eigvalsh": {
            "code": "tf.linalg.eigvalsh(tensor,name=None)",
            "function_name": "eigvalsh",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "eigvalsh"
            ],
            "torch": null,
            "tfjs": null
        },
        "det": {
            "code": "tf.linalg.det(input,name=None)",
            "function_name": "det",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "det"
            ],
            "torch": "det",
            "tfjs": null
        },
        "expm": {
            "code": "tf.linalg.expm(input,name=None)",
            "function_name": "expm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "expm"
            ],
            "torch": null,
            "tfjs": null
        },
        "diag_part": {
            "code": "tf.linalg.diag_part(input,name='diag_part',k=0,padding_value=0)",
            "function_name": "diag_part",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding_value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "diag_part"
            ],
            "torch": null,
            "tfjs": null
        },
        "eigh": {
            "code": "tf.linalg.eigh(tensor,name=None)",
            "function_name": "eigh",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "eigh"
            ],
            "torch": null,
            "tfjs": null
        },
        "diag": {
            "code": "tf.linalg.diag(diagonal,name='diag',k=0,num_rows=-1,num_cols=-1,padding_value=0)",
            "function_name": "diag",
            "args": [
                {
                    "name": "diagonal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "diagonal"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "num_rows",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "num_cols",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "padding_value",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "diag"
            ],
            "torch": "diag",
            "tfjs": null
        },
        "cholesky_solve": {
            "code": "tf.linalg.cholesky_solve(chol,rhs,name=None)",
            "function_name": "cholesky_solve",
            "args": [
                {
                    "name": "chol",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "rhs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "cholesky_solve"
            ],
            "torch": "cholesky_solve",
            "tfjs": null
        },
        "cholesky": {
            "code": "tf.linalg.cholesky(input,name=None)",
            "function_name": "cholesky",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "cholesky"
            ],
            "torch": "cholesky",
            "tfjs": null
        },
        "band_part": {
            "code": "tf.linalg.band_part(input,num_lower,num_upper,name=None)",
            "function_name": "band_part",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_lower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "band_part"
            ],
            "torch": null,
            "tfjs": null
        },
        "kerasregressor": {
            "code": "tf.keras.wrappers.scikit_learn.KerasRegressor(build_fn=None,**sk_params)",
            "function_name": "KerasRegressor",
            "args": [
                {
                    "name": "_params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "build_fn",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "wrappers",
                "scikit_learn",
                "KerasRegressor"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_categorical": {
            "code": "tf.keras.utils.to_categorical(y,num_classes=None,dtype='float32')",
            "function_name": "to_categorical",
            "args": [
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "to_categorical"
            ],
            "torch": null,
            "tfjs": null
        },
        "adjoint": {
            "code": "tf.linalg.adjoint(matrix,name=None)",
            "function_name": "adjoint",
            "args": [
                {
                    "name": "matrix",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "adjoint"
            ],
            "torch": null,
            "tfjs": null
        },
        "kerasclassifier": {
            "code": "tf.keras.wrappers.scikit_learn.KerasClassifier(build_fn=None,**sk_params)",
            "function_name": "KerasClassifier",
            "args": [
                {
                    "name": "_params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "build_fn",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "wrappers",
                "scikit_learn",
                "KerasClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "serialize_keras_object": {
            "code": "tf.keras.utils.serialize_keras_object(instance)",
            "function_name": "serialize_keras_object",
            "args": [
                {
                    "name": "instance",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "serialize_keras_object"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequenceenqueuer": {
            "code": "tf.keras.utils.SequenceEnqueuer(sequence,use_multiprocessing=False)",
            "function_name": "SequenceEnqueuer",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "use_multiprocessing",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "SequenceEnqueuer"
            ],
            "torch": null,
            "tfjs": null
        },
        "register_keras_serializable": {
            "code": "tf.keras.utils.register_keras_serializable(package='Custom',name=None)",
            "function_name": "register_keras_serializable",
            "args": [
                {
                    "name": "package",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "register_keras_serializable"
            ],
            "torch": null,
            "tfjs": null
        },
        "progbar": {
            "code": "tf.keras.utils.Progbar(target,width=30,verbose=1,interval=0.05,stateful_metrics=None,unit_name='step')",
            "function_name": "Progbar",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "width",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stateful_metrics",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unit_name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "Progbar"
            ],
            "torch": null,
            "tfjs": null
        },
        "orderedenqueuer": {
            "code": "tf.keras.utils.OrderedEnqueuer(sequence,use_multiprocessing=False,shuffle=False)",
            "function_name": "OrderedEnqueuer",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "use_multiprocessing",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "OrderedEnqueuer"
            ],
            "torch": null,
            "tfjs": null
        },
        "model_to_dot": {
            "code": "tf.keras.utils.model_to_dot(model,show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96,subgraph=False)",
            "function_name": "model_to_dot",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "show_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "show_layer_names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rankdir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "expand_nested",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dpi",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "subgraph",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "model_to_dot"
            ],
            "torch": null,
            "tfjs": null
        },
        "multi_gpu_model": {
            "code": "tf.keras.utils.multi_gpu_model(model,gpus,cpu_merge=True,cpu_relocation=False)",
            "function_name": "multi_gpu_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "gpus",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "cpu_merge",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cpu_relocation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "multi_gpu_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "hdf5matrix": {
            "code": "tf.keras.utils.HDF5Matrix(datapath,dataset,start=0,end=None,normalizer=None)",
            "function_name": "HDF5Matrix",
            "args": [
                {
                    "name": "datapath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "end",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "normalizer",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "HDF5Matrix"
            ],
            "torch": null,
            "tfjs": null
        },
        "plot_model": {
            "code": "tf.keras.utils.plot_model(model,to_file='model.png',show_shapes=False,show_layer_names=True,rankdir='TB',expand_nested=False,dpi=96)",
            "function_name": "plot_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "to_file",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "show_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "show_layer_names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rankdir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "expand_nested",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dpi",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "plot_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_source_inputs": {
            "code": "tf.keras.utils.get_source_inputs(tensor,layer=None,node_index=None)",
            "function_name": "get_source_inputs",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "layer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "node_index",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "get_source_inputs"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_file": {
            "code": "tf.keras.utils.get_file(fname,origin,untar=False,md5_hash=None,file_hash=None,cache_subdir='datasets',hash_algorithm='auto',extract=False,archive_format='auto',cache_dir=None)",
            "function_name": "get_file",
            "args": [
                {
                    "name": "fname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "origin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "untar",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "md5_hash",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "file_hash",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cache_subdir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "hash_algorithm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "extract",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "archive_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cache_dir",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "get_file"
            ],
            "torch": null,
            "tfjs": null
        },
        "generatorenqueuer": {
            "code": "tf.keras.utils.GeneratorEnqueuer(sequence,use_multiprocessing=False,random_seed=None)",
            "function_name": "GeneratorEnqueuer",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "use_multiprocessing",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "random_seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "GeneratorEnqueuer"
            ],
            "torch": null,
            "tfjs": null
        },
        "custom_object_scope": {
            "code": "tf.keras.utils.custom_object_scope(*args)",
            "function_name": "custom_object_scope",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "custom_object_scope"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_custom_objects": {
            "code": "tf.keras.utils.get_custom_objects()",
            "function_name": "get_custom_objects",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "get_custom_objects"
            ],
            "torch": null,
            "tfjs": null
        },
        "customobjectscope": {
            "code": "tf.keras.utils.CustomObjectScope(*args)",
            "function_name": "CustomObjectScope",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "CustomObjectScope"
            ],
            "torch": null,
            "tfjs": null
        },
        "deserialize_keras_object": {
            "code": "tf.keras.utils.deserialize_keras_object(identifier,module_objects=None,custom_objects=None,printable_module_name='object')",
            "function_name": "deserialize_keras_object",
            "args": [
                {
                    "name": "identifier",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "module_objects",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "printable_module_name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "deserialize_keras_object"
            ],
            "torch": null,
            "tfjs": null
        },
        "convert_all_kernels_in_model": {
            "code": "tf.keras.utils.convert_all_kernels_in_model(model)",
            "function_name": "convert_all_kernels_in_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "utils",
                "convert_all_kernels_in_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "l1_l2": {
            "code": "tf.keras.regularizers.l1_l2(l1=0.01,l2=0.01)",
            "function_name": "l1_l2",
            "args": [
                {
                    "name": "l1",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "regularizers",
                "l1_l2"
            ],
            "torch": null,
            "tfjs": null
        },
        "serialize": {
            "code": "serialize(value)",
            "function_name": "serialize",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "serialize"
            ],
            "torch": null,
            "tfjs": null
        },
        "l1l2": {
            "code": "tf.keras.regularizers.L1L2(l1=0.0,l2=0.0)",
            "function_name": "L1L2",
            "args": [
                {
                    "name": "l1",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "l2",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "regularizers",
                "L1L2"
            ],
            "torch": null,
            "tfjs": "l1l2"
        },
        "l1": {
            "code": "tf.keras.regularizers.l1(l=0.01)",
            "function_name": "l1",
            "args": [
                {
                    "name": "l",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "regularizers",
                "l1"
            ],
            "torch": null,
            "tfjs": "l1"
        },
        "get": {
            "code": "tf.keras.activations.get(identifier)",
            "function_name": "get",
            "args": [
                {
                    "name": "identifier",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "get"
            ],
            "torch": null,
            "tfjs": "get"
        },
        "l2": {
            "code": "tf.keras.regularizers.l2(l=0.01)",
            "function_name": "l2",
            "args": [
                {
                    "name": "l",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "regularizers",
                "l2"
            ],
            "torch": null,
            "tfjs": "l2"
        },
        "deserialize": {
            "code": "tf.keras.activations.deserialize(name,custom_objects=None)",
            "function_name": "deserialize",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "deserialize"
            ],
            "torch": null,
            "tfjs": null
        },
        "tokenizer_from_json": {
            "code": "tf.keras.preprocessing.text.tokenizer_from_json(json_string)",
            "function_name": "tokenizer_from_json",
            "args": [
                {
                    "name": "json_string",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "tokenizer_from_json"
            ],
            "torch": null,
            "tfjs": null
        },
        "hashing_trick": {
            "code": "tf.keras.preprocessing.text.hashing_trick(text,n,hash_function=None,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')",
            "function_name": "hashing_trick",
            "args": [
                {
                    "name": "text",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "hash_function",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "filters",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "split",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "hashing_trick"
            ],
            "torch": null,
            "tfjs": null
        },
        "tokenizer": {
            "code": "tf.keras.preprocessing.text.Tokenizer(num_words=None,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='',char_level=False,oov_token=None,document_count=0,**kwargs)",
            "function_name": "Tokenizer",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_words",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "filters",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "split",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "char_level",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "oov_token",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "document_count",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "Tokenizer"
            ],
            "torch": null,
            "tfjs": null
        },
        "text_to_word_sequence": {
            "code": "tf.keras.preprocessing.text.text_to_word_sequence(text,filters='!\"#$%&amp;()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~\\t\\n',lower=True,split='')",
            "function_name": "text_to_word_sequence",
            "args": [
                {
                    "name": "text",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filters",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "lower",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "split",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "text",
                "text_to_word_sequence"
            ],
            "torch": null,
            "tfjs": null
        },
        "skipgrams": {
            "code": "tf.keras.preprocessing.sequence.skipgrams(sequence,vocabulary_size,window_size=4,negative_samples=1.0,shuffle=True,categorical=False,sampling_table=None,seed=None)",
            "function_name": "skipgrams",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vocabulary_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "window_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "negative_samples",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "categorical",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sampling_table",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "skipgrams"
            ],
            "torch": null,
            "tfjs": null
        },
        "one_hot": {
            "code": "tf.one_hot(indices,depth,on_value=None,off_value=None,axis=None,dtype=None,name=None)",
            "function_name": "one_hot",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "on_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "off_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "one_hot"
            ],
            "torch": null,
            "tfjs": null
        },
        "timeseriesgenerator": {
            "code": "tf.keras.preprocessing.sequence.TimeseriesGenerator(data,targets,length,sampling_rate=1,stride=1,start_index=0,end_index=None,shuffle=False,reverse=False,batch_size=128)",
            "function_name": "TimeseriesGenerator",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "sampling_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "start_index",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "end_index",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reverse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "TimeseriesGenerator"
            ],
            "torch": null,
            "tfjs": null
        },
        "pad_sequences": {
            "code": "tf.keras.preprocessing.sequence.pad_sequences(sequences,maxlen=None,dtype='int32',padding='pre',truncating='pre',value=0.0)",
            "function_name": "pad_sequences",
            "args": [
                {
                    "name": "sequences",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "maxlen",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "truncating",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "pad_sequences"
            ],
            "torch": null,
            "tfjs": null
        },
        "save_img": {
            "code": "tf.keras.preprocessing.image.save_img(path,x,data_format=None,file_format=None,scale=True,**kwargs)",
            "function_name": "save_img",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "file_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "save_img"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_zoom": {
            "code": "tf.keras.preprocessing.image.random_zoom(x,zoom_range,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_zoom",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "zoom_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "row_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "col_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interpolation_order",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_zoom"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_sampling_table": {
            "code": "tf.keras.preprocessing.sequence.make_sampling_table(size,sampling_factor=1e-05)",
            "function_name": "make_sampling_table",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sampling_factor",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "sequence",
                "make_sampling_table"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_shift": {
            "code": "tf.keras.preprocessing.image.random_shift(x,wrg,hrg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "wrg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "hrg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "row_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "col_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interpolation_order",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_shift"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_shear": {
            "code": "tf.keras.preprocessing.image.random_shear(x,intensity,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_shear",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "intensity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "row_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "col_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interpolation_order",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_shear"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_rotation": {
            "code": "tf.keras.preprocessing.image.random_rotation(x,rg,row_axis=1,col_axis=2,channel_axis=0,fill_mode='nearest',cval=0.0,interpolation_order=1)",
            "function_name": "random_rotation",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "row_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "col_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interpolation_order",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_rotation"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_channel_shift": {
            "code": "tf.keras.preprocessing.image.random_channel_shift(x,intensity_range,channel_axis=0)",
            "function_name": "random_channel_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "intensity_range",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "random_channel_shift"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_brightness": {
            "code": "tf.image.random_brightness(image,max_delta,seed=None)",
            "function_name": "random_brightness",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "max_delta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_brightness"
            ],
            "torch": null,
            "tfjs": null
        },
        "imagedatagenerator": {
            "code": "tf.keras.preprocessing.image.ImageDataGenerator(featurewise_center=False,samplewise_center=False,featurewise_std_normalization=False,samplewise_std_normalization=False,zca_whitening=False,zca_epsilon=1e-06,rotation_range=0,width_shift_range=0.0,height_shift_range=0.0,brightness_range=None,shear_range=0.0,zoom_range=0.0,channel_shift_range=0.0,fill_mode='nearest',cval=0.0,horizontal_flip=False,vertical_flip=False,rescale=None,preprocessing_function=None,data_format=None,validation_split=0.0,dtype=None)",
            "function_name": "ImageDataGenerator",
            "args": [
                {
                    "name": "featurewise_center",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "samplewise_center",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "featurewise_std_normalization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "samplewise_std_normalization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zca_whitening",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zca_epsilon",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rotation_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "width_shift_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "height_shift_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "brightness_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shear_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zoom_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "channel_shift_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "horizontal_flip",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "vertical_flip",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rescale",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "preprocessing_function",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "validation_split",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "ImageDataGenerator"
            ],
            "torch": null,
            "tfjs": null
        },
        "numpyarrayiterator": {
            "code": "tf.keras.preprocessing.image.NumpyArrayIterator(x,y,image_data_generator,batch_size=32,shuffle=False,sample_weight=None,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',subset=None,dtype=None)",
            "function_name": "NumpyArrayIterator",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "image_data_generator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "batch_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sample_weight",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_to_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_prefix",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "subset",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "NumpyArrayIterator"
            ],
            "torch": null,
            "tfjs": null
        },
        "img_to_array": {
            "code": "tf.keras.preprocessing.image.img_to_array(img,data_format=None,dtype=None)",
            "function_name": "img_to_array",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "img_to_array"
            ],
            "torch": null,
            "tfjs": null
        },
        "iterator": {
            "code": "tf.keras.preprocessing.image.Iterator(n,batch_size,shuffle,seed)",
            "function_name": "Iterator",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shuffle",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "Iterator"
            ],
            "torch": null,
            "tfjs": null
        },
        "directoryiterator": {
            "code": "tf.keras.preprocessing.image.DirectoryIterator(directory,image_data_generator,target_size=(256,256),color_mode='rgb',classes=None,class_mode='categorical',batch_size=32,shuffle=True,seed=None,data_format=None,save_to_dir=None,save_prefix='',save_format='png',follow_links=False,subset=None,interpolation='nearest',dtype=None)",
            "function_name": "DirectoryIterator",
            "args": [
                {
                    "name": "directory",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "image_data_generator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "256",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "target_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "color_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "class_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_to_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_prefix",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "follow_links",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "subset",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "DirectoryIterator"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_img": {
            "code": "tf.keras.preprocessing.image.load_img(path,grayscale=False,color_mode='rgb',target_size=None,interpolation='nearest')",
            "function_name": "load_img",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "grayscale",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "color_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "target_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "load_img"
            ],
            "torch": null,
            "tfjs": null
        },
        "array_to_img": {
            "code": "tf.keras.preprocessing.image.array_to_img(x,data_format=None,scale=True,dtype=None)",
            "function_name": "array_to_img",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "array_to_img"
            ],
            "torch": null,
            "tfjs": null
        },
        "apply_channel_shift": {
            "code": "tf.keras.preprocessing.image.apply_channel_shift(x,intensity,channel_axis=0)",
            "function_name": "apply_channel_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "intensity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "apply_channel_shift"
            ],
            "torch": null,
            "tfjs": null
        },
        "apply_brightness_shift": {
            "code": "tf.keras.preprocessing.image.apply_brightness_shift(x,brightness)",
            "function_name": "apply_brightness_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "brightness",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "apply_brightness_shift"
            ],
            "torch": null,
            "tfjs": null
        },
        "apply_affine_transform": {
            "code": "tf.keras.preprocessing.image.apply_affine_transform(x,theta=0,tx=0,ty=0,shear=0,zx=1,zy=1,row_axis=0,col_axis=1,channel_axis=2,fill_mode='nearest',cval=0.0,order=1)",
            "function_name": "apply_affine_transform",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "theta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tx",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ty",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shear",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zx",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zy",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "row_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "col_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "channel_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "order",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "preprocessing",
                "image",
                "apply_affine_transform"
            ],
            "torch": null,
            "tfjs": null
        },
        "polynomialdecay": {
            "code": "tf.keras.optimizers.schedules.PolynomialDecay(initial_learning_rate,decay_steps,end_learning_rate=0.0001,power=1.0,cycle=False,name=None)",
            "function_name": "PolynomialDecay",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "end_learning_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "power",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cycle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "schedules",
                "PolynomialDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "piecewiseconstantdecay": {
            "code": "tf.keras.optimizers.schedules.PiecewiseConstantDecay(boundaries,values,name=None)",
            "function_name": "PiecewiseConstantDecay",
            "args": [
                {
                    "name": "boundaries",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "schedules",
                "PiecewiseConstantDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "exponentialdecay": {
            "code": "tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)",
            "function_name": "ExponentialDecay",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "decay_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "staircase",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "schedules",
                "ExponentialDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "inversetimedecay": {
            "code": "tf.keras.optimizers.schedules.InverseTimeDecay(initial_learning_rate,decay_steps,decay_rate,staircase=False,name=None)",
            "function_name": "InverseTimeDecay",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "decay_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "staircase",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "schedules",
                "InverseTimeDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "rmsprop": {
            "code": "tf.keras.optimizers.RMSprop(learning_rate=0.001,rho=0.9,momentum=0.0,epsilon=1e-07,centered=False,name='RMSprop',**kwargs)",
            "function_name": "RMSprop",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "rho",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "momentum"
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "epsilon"
                },
                {
                    "name": "centered",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "centered"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "RMSprop"
            ],
            "torch": null,
            "tfjs": "rmsprop"
        },
        "optimizer": {
            "code": "tf.keras.optimizers.Optimizer(name,**kwargs)",
            "function_name": "Optimizer",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Optimizer"
            ],
            "torch": null,
            "tfjs": null
        },
        "nadam": {
            "code": "tf.keras.optimizers.Nadam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Nadam',**kwargs)",
            "function_name": "Nadam",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beta_1",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beta_2",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Nadam"
            ],
            "torch": null,
            "tfjs": null
        },
        "sgd": {
            "code": "tf.keras.optimizers.SGD(learning_rate=0.01,momentum=0.0,nesterov=False,name='SGD',**kwargs)",
            "function_name": "SGD",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "nesterov",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "SGD"
            ],
            "torch": null,
            "tfjs": "sgd"
        },
        "ftrl": {
            "code": "tf.keras.optimizers.Ftrl(learning_rate=0.001,learning_rate_power=-0.5,initial_accumulator_value=0.1,l1_regularization_strength=0.0,l2_regularization_strength=0.0,name='Ftrl',l2_shrinkage_regularization_strength=0.0,**kwargs)",
            "function_name": "Ftrl",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "learning_rate_power",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "initial_accumulator_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l1_regularization_strength",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2_regularization_strength",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2_shrinkage_regularization_strength",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Ftrl"
            ],
            "torch": null,
            "tfjs": null
        },
        "adam": {
            "code": "tf.keras.optimizers.Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False,name='Adam',**kwargs)",
            "function_name": "Adam",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_1",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_2",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "epsilon"
                },
                {
                    "name": "amsgrad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Adam"
            ],
            "torch": null,
            "tfjs": "adam"
        },
        "adamax": {
            "code": "tf.keras.optimizers.Adamax(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,name='Adamax',**kwargs)",
            "function_name": "Adamax",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_1",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_2",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "epsilon"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Adamax"
            ],
            "torch": null,
            "tfjs": "adamax"
        },
        "model_from_yaml": {
            "code": "tf.keras.models.model_from_yaml(yaml_string,custom_objects=None)",
            "function_name": "model_from_yaml",
            "args": [
                {
                    "name": "yaml_string",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "model_from_yaml"
            ],
            "torch": null,
            "tfjs": null
        },
        "adadelta": {
            "code": "tf.keras.optimizers.Adadelta(learning_rate=0.001,rho=0.95,epsilon=1e-07,name='Adadelta',**kwargs)",
            "function_name": "Adadelta",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "rho",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "rho"
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "epsilon"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Adadelta"
            ],
            "torch": null,
            "tfjs": "adadelta"
        },
        "save_model": {
            "code": "tf.keras.models.save_model(model,filepath,overwrite=True,include_optimizer=True,save_format=None,signatures=None,options=None)",
            "function_name": "save_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filepath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "overwrite",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "include_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "signatures",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "options",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "save_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "adagrad": {
            "code": "tf.keras.optimizers.Adagrad(learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07,name='Adagrad',**kwargs)",
            "function_name": "Adagrad",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "initial_accumulator_value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "optimizers",
                "Adagrad"
            ],
            "torch": null,
            "tfjs": "adagrad"
        },
        "model_from_config": {
            "code": "tf.keras.models.model_from_config(config,custom_objects=None)",
            "function_name": "model_from_config",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "model_from_config"
            ],
            "torch": null,
            "tfjs": null
        },
        "model_from_json": {
            "code": "tf.keras.models.model_from_json(json_string,custom_objects=None)",
            "function_name": "model_from_json",
            "args": [
                {
                    "name": "json_string",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "model_from_json"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_model": {
            "code": "tf.keras.models.load_model(filepath,custom_objects=None,compile=True)",
            "function_name": "load_model",
            "args": [
                {
                    "name": "filepath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compile",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "load_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_policy": {
            "code": "tf.keras.mixed_precision.experimental.set_policy(policy)",
            "function_name": "set_policy",
            "args": [
                {
                    "name": "policy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "mixed_precision",
                "experimental",
                "set_policy"
            ],
            "torch": null,
            "tfjs": null
        },
        "clone_model": {
            "code": "tf.keras.models.clone_model(model,input_tensors=None,clone_function=None)",
            "function_name": "clone_model",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_tensors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "clone_function",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "models",
                "clone_model"
            ],
            "torch": null,
            "tfjs": null
        },
        "lossscaleoptimizer": {
            "code": "tf.keras.mixed_precision.experimental.LossScaleOptimizer(optimizer,loss_scale)",
            "function_name": "LossScaleOptimizer",
            "args": [
                {
                    "name": "optimizer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "loss_scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "mixed_precision",
                "experimental",
                "LossScaleOptimizer"
            ],
            "torch": null,
            "tfjs": null
        },
        "policy": {
            "code": "tf.keras.mixed_precision.experimental.Policy(name,loss_scale=USE_DEFAULT)",
            "function_name": "Policy",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "loss_scale",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "mixed_precision",
                "experimental",
                "Policy"
            ],
            "torch": null,
            "tfjs": null
        },
        "global_policy": {
            "code": "tf.keras.mixed_precision.experimental.global_policy()",
            "function_name": "global_policy",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "mixed_precision",
                "experimental",
                "global_policy"
            ],
            "torch": null,
            "tfjs": null
        },
        "truepositives": {
            "code": "tf.keras.metrics.TruePositives(thresholds=None,name=None,dtype=None)",
            "function_name": "TruePositives",
            "args": [
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "TruePositives"
            ],
            "torch": null,
            "tfjs": null
        },
        "truenegatives": {
            "code": "tf.keras.metrics.TrueNegatives(thresholds=None,name=None,dtype=None)",
            "function_name": "TrueNegatives",
            "args": [
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "TrueNegatives"
            ],
            "torch": null,
            "tfjs": null
        },
        "sum": {
            "code": "tf.keras.backend.sum(x,axis=None,keepdims=False)",
            "function_name": "sum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sum"
            ],
            "torch": "sum",
            "tfjs": "sum"
        },
        "squaredhinge": {
            "code": "tf.keras.losses.SquaredHinge(reduction=losses_utils.ReductionV2.AUTO,name='squared_hinge')",
            "function_name": "SquaredHinge",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "SquaredHinge"
            ],
            "torch": null,
            "tfjs": null
        },
        "topkcategoricalaccuracy": {
            "code": "tf.keras.metrics.TopKCategoricalAccuracy(k=5,name='top_k_categorical_accuracy',dtype=None)",
            "function_name": "TopKCategoricalAccuracy",
            "args": [
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "TopKCategoricalAccuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "specificityatsensitivity": {
            "code": "tf.keras.metrics.SpecificityAtSensitivity(sensitivity,num_thresholds=200,name=None,dtype=None)",
            "function_name": "SpecificityAtSensitivity",
            "args": [
                {
                    "name": "sensitivity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "SpecificityAtSensitivity"
            ],
            "torch": null,
            "tfjs": null
        },
        "top_k_categorical_accuracy": {
            "code": "tf.keras.metrics.top_k_categorical_accuracy(y_true,y_pred,k=5)",
            "function_name": "top_k_categorical_accuracy",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "top_k_categorical_accuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparse_categorical_accuracy": {
            "code": "tf.keras.metrics.sparse_categorical_accuracy(y_true,y_pred)",
            "function_name": "sparse_categorical_accuracy",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "sparse_categorical_accuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparse_top_k_categorical_accuracy": {
            "code": "tf.keras.metrics.sparse_top_k_categorical_accuracy(y_true,y_pred,k=5)",
            "function_name": "sparse_top_k_categorical_accuracy",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "sparse_top_k_categorical_accuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparsetopkcategoricalaccuracy": {
            "code": "tf.keras.metrics.SparseTopKCategoricalAccuracy(k=5,name='sparse_top_k_categorical_accuracy',dtype=None)",
            "function_name": "SparseTopKCategoricalAccuracy",
            "args": [
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "SparseTopKCategoricalAccuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparsecategoricalcrossentropy": {
            "code": "tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False,reduction=losses_utils.ReductionV2.AUTO,name='sparse_categorical_crossentropy')",
            "function_name": "SparseCategoricalCrossentropy",
            "args": [
                {
                    "name": "from_logits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "SparseCategoricalCrossentropy"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparsecategoricalaccuracy": {
            "code": "tf.keras.metrics.SparseCategoricalAccuracy(name='sparse_categorical_accuracy',dtype=None)",
            "function_name": "SparseCategoricalAccuracy",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "SparseCategoricalAccuracy"
            ],
            "torch": null,
            "tfjs": "sparsecategoricalaccuracy"
        },
        "rootmeansquarederror": {
            "code": "tf.keras.metrics.RootMeanSquaredError(name='root_mean_squared_error',dtype=None)",
            "function_name": "RootMeanSquaredError",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "RootMeanSquaredError"
            ],
            "torch": null,
            "tfjs": null
        },
        "recall": {
            "code": "tf.keras.metrics.Recall(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)",
            "function_name": "Recall",
            "args": [
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "top_k",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "class_id",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "Recall"
            ],
            "torch": null,
            "tfjs": "recall"
        },
        "precisionatrecall": {
            "code": "tf.keras.metrics.PrecisionAtRecall(recall,num_thresholds=200,name=None,dtype=None)",
            "function_name": "PrecisionAtRecall",
            "args": [
                {
                    "name": "recall",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "PrecisionAtRecall"
            ],
            "torch": null,
            "tfjs": null
        },
        "precision": {
            "code": "tf.keras.metrics.Precision(thresholds=None,top_k=None,class_id=None,name=None,dtype=None)",
            "function_name": "Precision",
            "args": [
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "top_k",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "class_id",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "Precision"
            ],
            "torch": null,
            "tfjs": "precision"
        },
        "meantensor": {
            "code": "tf.keras.metrics.MeanTensor(name='mean_tensor',dtype=None)",
            "function_name": "MeanTensor",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "MeanTensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "sensitivityatspecificity": {
            "code": "tf.keras.metrics.SensitivityAtSpecificity(specificity,num_thresholds=200,name=None,dtype=None)",
            "function_name": "SensitivityAtSpecificity",
            "args": [
                {
                    "name": "specificity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "SensitivityAtSpecificity"
            ],
            "torch": null,
            "tfjs": null
        },
        "meansquarederror": {
            "code": "tf.keras.losses.MeanSquaredError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_error')",
            "function_name": "MeanSquaredError",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MeanSquaredError"
            ],
            "torch": null,
            "tfjs": "meansquarederror"
        },
        "meansquaredlogarithmicerror": {
            "code": "tf.keras.losses.MeanSquaredLogarithmicError(reduction=losses_utils.ReductionV2.AUTO,name='mean_squared_logarithmic_error')",
            "function_name": "MeanSquaredLogarithmicError",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MeanSquaredLogarithmicError"
            ],
            "torch": null,
            "tfjs": null
        },
        "meanrelativeerror": {
            "code": "tf.keras.metrics.MeanRelativeError(normalizer,name=None,dtype=None)",
            "function_name": "MeanRelativeError",
            "args": [
                {
                    "name": "normalizer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "MeanRelativeError"
            ],
            "torch": null,
            "tfjs": null
        },
        "meaniou": {
            "code": "tf.keras.metrics.MeanIoU(num_classes,name=None,dtype=None)",
            "function_name": "MeanIoU",
            "args": [
                {
                    "name": "num_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "MeanIoU"
            ],
            "torch": null,
            "tfjs": null
        },
        "meanabsoluteerror": {
            "code": "tf.keras.losses.MeanAbsoluteError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_error')",
            "function_name": "MeanAbsoluteError",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MeanAbsoluteError"
            ],
            "torch": null,
            "tfjs": "meanabsoluteerror"
        },
        "metric": {
            "code": "tf.keras.metrics.Metric(name=None,dtype=None,**kwargs)",
            "function_name": "Metric",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "Metric"
            ],
            "torch": null,
            "tfjs": null
        },
        "meanabsolutepercentageerror": {
            "code": "tf.keras.losses.MeanAbsolutePercentageError(reduction=losses_utils.ReductionV2.AUTO,name='mean_absolute_percentage_error')",
            "function_name": "MeanAbsolutePercentageError",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MeanAbsolutePercentageError"
            ],
            "torch": null,
            "tfjs": "meanabsolutepercentageerror"
        },
        "mean": {
            "code": "tf.keras.backend.mean(x,axis=None,keepdims=False)",
            "function_name": "mean",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "mean"
            ],
            "torch": "mean",
            "tfjs": "mean"
        },
        "logcosherror": {
            "code": "tf.keras.metrics.LogCoshError(name='logcosh',dtype=None)",
            "function_name": "LogCoshError",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "LogCoshError"
            ],
            "torch": null,
            "tfjs": null
        },
        "kldivergence": {
            "code": "tf.keras.losses.KLDivergence(reduction=losses_utils.ReductionV2.AUTO,name='kullback_leibler_divergence')",
            "function_name": "KLDivergence",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "KLDivergence"
            ],
            "torch": null,
            "tfjs": null
        },
        "hinge": {
            "code": "tf.keras.losses.Hinge(reduction=losses_utils.ReductionV2.AUTO,name='hinge')",
            "function_name": "Hinge",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "Hinge"
            ],
            "torch": null,
            "tfjs": null
        },
        "falsepositives": {
            "code": "tf.keras.metrics.FalsePositives(thresholds=None,name=None,dtype=None)",
            "function_name": "FalsePositives",
            "args": [
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "FalsePositives"
            ],
            "torch": null,
            "tfjs": null
        },
        "falsenegatives": {
            "code": "tf.keras.metrics.FalseNegatives(thresholds=None,name=None,dtype=None)",
            "function_name": "FalseNegatives",
            "args": [
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "FalseNegatives"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_accuracy": {
            "code": "tf.keras.metrics.categorical_accuracy(y_true,y_pred)",
            "function_name": "categorical_accuracy",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "categorical_accuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "cosinesimilarity": {
            "code": "tf.keras.losses.CosineSimilarity(axis=-1,reduction=losses_utils.ReductionV2.AUTO,name='cosine_similarity')",
            "function_name": "CosineSimilarity",
            "args": [
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "CosineSimilarity"
            ],
            "torch": null,
            "tfjs": null
        },
        "categoricalhinge": {
            "code": "tf.keras.losses.CategoricalHinge(reduction=losses_utils.ReductionV2.AUTO,name='categorical_hinge')",
            "function_name": "CategoricalHinge",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "CategoricalHinge"
            ],
            "torch": null,
            "tfjs": null
        },
        "categoricalcrossentropy": {
            "code": "tf.keras.losses.CategoricalCrossentropy(from_logits=False,label_smoothing=0,reduction=losses_utils.ReductionV2.AUTO,name='categorical_crossentropy')",
            "function_name": "CategoricalCrossentropy",
            "args": [
                {
                    "name": "from_logits",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "label_smoothing",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "CategoricalCrossentropy"
            ],
            "torch": null,
            "tfjs": "categoricalcrossentropy"
        },
        "categoricalaccuracy": {
            "code": "tf.keras.metrics.CategoricalAccuracy(name='categorical_accuracy',dtype=None)",
            "function_name": "CategoricalAccuracy",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "CategoricalAccuracy"
            ],
            "torch": null,
            "tfjs": "categoricalaccuracy"
        },
        "binary_accuracy": {
            "code": "tf.keras.metrics.binary_accuracy(y_true,y_pred,threshold=0.5)",
            "function_name": "binary_accuracy",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "binary_accuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "binarycrossentropy": {
            "code": "tf.keras.losses.BinaryCrossentropy(from_logits=False,label_smoothing=0,reduction=losses_utils.ReductionV2.AUTO,name='binary_crossentropy')",
            "function_name": "BinaryCrossentropy",
            "args": [
                {
                    "name": "from_logits",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "label_smoothing",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "BinaryCrossentropy"
            ],
            "torch": null,
            "tfjs": "binarycrossentropy"
        },
        "accuracy": {
            "code": "tf.keras.metrics.Accuracy(name='accuracy',dtype=None)",
            "function_name": "Accuracy",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "Accuracy"
            ],
            "torch": null,
            "tfjs": null
        },
        "squared_hinge": {
            "code": "tf.keras.losses.squared_hinge(y_true,y_pred)",
            "function_name": "squared_hinge",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "squared_hinge"
            ],
            "torch": null,
            "tfjs": null
        },
        "binaryaccuracy": {
            "code": "tf.keras.metrics.BinaryAccuracy(name='binary_accuracy',dtype=None,threshold=0.5)",
            "function_name": "BinaryAccuracy",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "BinaryAccuracy"
            ],
            "torch": null,
            "tfjs": "binaryaccuracy"
        },
        "auc": {
            "code": "tf.keras.metrics.AUC(num_thresholds=200,curve='ROC',summation_method='interpolation',name=None,dtype=None,thresholds=None,multi_label=False,label_weights=None)",
            "function_name": "AUC",
            "args": [
                {
                    "name": "num_thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "curve",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summation_method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "multi_label",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_weights",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "metrics",
                "AUC"
            ],
            "torch": null,
            "tfjs": null
        },
        "sparse_categorical_crossentropy": {
            "code": "tf.keras.backend.sparse_categorical_crossentropy(target,output,from_logits=False,axis=-1)",
            "function_name": "sparse_categorical_crossentropy",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "from_logits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "sparse_categorical_crossentropy"
            ],
            "torch": null,
            "tfjs": null
        },
        "msle": {
            "code": "tf.keras.losses.MSLE(y_true,y_pred)",
            "function_name": "MSLE",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MSLE"
            ],
            "torch": null,
            "tfjs": null
        },
        "mse": {
            "code": "tf.keras.losses.MSE(y_true,y_pred)",
            "function_name": "MSE",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MSE"
            ],
            "torch": null,
            "tfjs": null
        },
        "mape": {
            "code": "tf.keras.losses.MAPE(y_true,y_pred)",
            "function_name": "MAPE",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MAPE"
            ],
            "torch": null,
            "tfjs": null
        },
        "mae": {
            "code": "tf.keras.losses.MAE(y_true,y_pred)",
            "function_name": "MAE",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "MAE"
            ],
            "torch": null,
            "tfjs": null
        },
        "logcosh": {
            "code": "tf.keras.losses.LogCosh(reduction=losses_utils.ReductionV2.AUTO,name='logcosh')",
            "function_name": "LogCosh",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "LogCosh"
            ],
            "torch": null,
            "tfjs": null
        },
        "loss": {
            "code": "tf.keras.losses.Loss(reduction=losses_utils.ReductionV2.AUTO,name=None)",
            "function_name": "Loss",
            "args": [
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "Loss"
            ],
            "torch": null,
            "tfjs": null
        },
        "kld": {
            "code": "tf.keras.losses.KLD(y_true,y_pred)",
            "function_name": "KLD",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "KLD"
            ],
            "torch": null,
            "tfjs": null
        },
        "huber": {
            "code": "tf.keras.losses.Huber(delta=1.0,reduction=losses_utils.ReductionV2.AUTO,name='huber_loss')",
            "function_name": "Huber",
            "args": [
                {
                    "name": "delta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "Huber"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_hinge": {
            "code": "tf.keras.losses.categorical_hinge(y_true,y_pred)",
            "function_name": "categorical_hinge",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "categorical_hinge"
            ],
            "torch": null,
            "tfjs": null
        },
        "cosine_similarity": {
            "code": "tf.keras.losses.cosine_similarity(y_true,y_pred,axis=-1)",
            "function_name": "cosine_similarity",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "losses",
                "cosine_similarity"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_crossentropy": {
            "code": "tf.keras.backend.categorical_crossentropy(target,output,from_logits=False,axis=-1)",
            "function_name": "categorical_crossentropy",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "from_logits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "categorical_crossentropy"
            ],
            "torch": null,
            "tfjs": null
        },
        "binary_crossentropy": {
            "code": "tf.keras.backend.binary_crossentropy(target,output,from_logits=False)",
            "function_name": "binary_crossentropy",
            "args": [
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "from_logits",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "binary_crossentropy"
            ],
            "torch": null,
            "tfjs": null
        },
        "textvectorization": {
            "code": "tf.keras.layers.experimental.preprocessing.TextVectorization(max_tokens=None,standardize=LOWER_AND_STRIP_PUNCTUATION,split=SPLIT_ON_WHITESPACE,ngrams=None,output_mode=INT,output_sequence_length=None,pad_to_max_tokens=True,**kwargs)",
            "function_name": "TextVectorization",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "max_tokens",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "standardize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "split",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ngrams",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_sequence_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_to_max_tokens",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "experimental",
                "preprocessing",
                "TextVectorization"
            ],
            "torch": null,
            "tfjs": null
        },
        "preprocessinglayer": {
            "code": "tf.keras.layers.experimental.preprocessing.PreprocessingLayer(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)",
            "function_name": "PreprocessingLayer",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dynamic",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "experimental",
                "preprocessing",
                "PreprocessingLayer"
            ],
            "torch": null,
            "tfjs": null
        },
        "zeropadding2d": {
            "code": "tf.keras.layers.ZeroPadding2D(padding=(1,1),data_format=None,**kwargs)",
            "function_name": "ZeroPadding2D",
            "args": [
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "ZeroPadding2D"
            ],
            "torch": null,
            "tfjs": "zeropadding2d"
        },
        "normalization": {
            "code": "tf.keras.layers.experimental.preprocessing.Normalization(axis=-1,dtype=None,**kwargs)",
            "function_name": "Normalization",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "experimental",
                "preprocessing",
                "Normalization"
            ],
            "torch": null,
            "tfjs": null
        },
        "zeropadding1d": {
            "code": "tf.keras.layers.ZeroPadding1D(padding=1,**kwargs)",
            "function_name": "ZeroPadding1D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "ZeroPadding1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "zeropadding3d": {
            "code": "tf.keras.layers.ZeroPadding3D(padding=(1,1,1),data_format=None,**kwargs)",
            "function_name": "ZeroPadding3D",
            "args": [
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "ZeroPadding3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "upsampling3d": {
            "code": "tf.keras.layers.UpSampling3D(size=(2,2,2),data_format=None,**kwargs)",
            "function_name": "UpSampling3D",
            "args": [
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "UpSampling3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "wrapper": {
            "code": "tf.keras.layers.Wrapper(layer,**kwargs)",
            "function_name": "Wrapper",
            "args": [
                {
                    "name": "layer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Wrapper"
            ],
            "torch": null,
            "tfjs": null
        },
        "upsampling2d": {
            "code": "tf.keras.layers.UpSampling2D(size=(2,2),data_format=None,interpolation='nearest',**kwargs)",
            "function_name": "UpSampling2D",
            "args": [
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "UpSampling2D"
            ],
            "torch": null,
            "tfjs": "upsampling2d"
        },
        "upsampling1d": {
            "code": "tf.keras.layers.UpSampling1D(size=2,**kwargs)",
            "function_name": "UpSampling1D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "UpSampling1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "timedistributed": {
            "code": "tf.keras.layers.TimeDistributed(layer,**kwargs)",
            "function_name": "TimeDistributed",
            "args": [
                {
                    "name": "layer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "TimeDistributed"
            ],
            "torch": null,
            "tfjs": "timedistributed"
        },
        "thresholdedrelu": {
            "code": "tf.keras.layers.ThresholdedReLU(theta=1.0,**kwargs)",
            "function_name": "ThresholdedReLU",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "theta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "ThresholdedReLU"
            ],
            "torch": null,
            "tfjs": "thresholdedrelu"
        },
        "spatialdropout3d": {
            "code": "tf.keras.layers.SpatialDropout3D(rate,data_format=None,**kwargs)",
            "function_name": "SpatialDropout3D",
            "args": [
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SpatialDropout3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "stackedrnncells": {
            "code": "tf.keras.layers.StackedRNNCells(cells,**kwargs)",
            "function_name": "StackedRNNCells",
            "args": [
                {
                    "name": "cells",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "StackedRNNCells"
            ],
            "torch": null,
            "tfjs": "stackedrnncells"
        },
        "spatialdropout1d": {
            "code": "tf.keras.layers.SpatialDropout1D(rate,**kwargs)",
            "function_name": "SpatialDropout1D",
            "args": [
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SpatialDropout1D"
            ],
            "torch": null,
            "tfjs": "spatialdropout1d"
        },
        "spatialdropout2d": {
            "code": "tf.keras.layers.SpatialDropout2D(rate,data_format=None,**kwargs)",
            "function_name": "SpatialDropout2D",
            "args": [
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SpatialDropout2D"
            ],
            "torch": null,
            "tfjs": null
        },
        "simplernn": {
            "code": "tf.keras.layers.SimpleRNN(units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,**kwargs)",
            "function_name": "SimpleRNN",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "return_sequences",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "return_state",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "go_backwards",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "stateful",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "unroll",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SimpleRNN"
            ],
            "torch": null,
            "tfjs": "simplernn"
        },
        "separableconv2d": {
            "code": "tf.keras.layers.SeparableConv2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)",
            "function_name": "SeparableConv2D",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depth_multiplier",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depthwise_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "pointwise_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depthwise_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "pointwise_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depthwise_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "pointwise_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SeparableConv2D"
            ],
            "torch": null,
            "tfjs": "separableconv2d"
        },
        "simplernncell": {
            "code": "tf.keras.layers.SimpleRNNCell(units,activation='tanh',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,**kwargs)",
            "function_name": "SimpleRNNCell",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SimpleRNNCell"
            ],
            "torch": null,
            "tfjs": "simplernncell"
        },
        "rnn": {
            "code": "tf.keras.backend.rnn(step_function,inputs,initial_states,go_backwards=False,mask=None,constants=None,unroll=False,input_length=None,time_major=False,zero_output_for_mask=False)",
            "function_name": "rnn",
            "args": [
                {
                    "name": "step_function",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "initial_states",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "go_backwards",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "mask",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "constants",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "unroll",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "input_length",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "time_major",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "zero_output_for_mask",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "rnn"
            ],
            "torch": null,
            "tfjs": "rnn"
        },
        "separableconv1d": {
            "code": "tf.keras.layers.SeparableConv1D(filters,kernel_size,strides=1,padding='valid',data_format=None,dilation_rate=1,depth_multiplier=1,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',pointwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,pointwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,pointwise_constraint=None,bias_constraint=None,**kwargs)",
            "function_name": "SeparableConv1D",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "depth_multiplier",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "depthwise_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pointwise_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "depthwise_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pointwise_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "depthwise_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pointwise_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "SeparableConv1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "repeatvector": {
            "code": "tf.keras.layers.RepeatVector(n,**kwargs)",
            "function_name": "RepeatVector",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "RepeatVector"
            ],
            "torch": null,
            "tfjs": "repeatvector"
        },
        "permute": {
            "code": "tf.keras.layers.Permute(dims,**kwargs)",
            "function_name": "Permute",
            "args": [
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Permute"
            ],
            "torch": null,
            "tfjs": "permute"
        },
        "prelu": {
            "code": "tf.keras.layers.PReLU(alpha_initializer='zeros',alpha_regularizer=None,alpha_constraint=None,shared_axes=None,**kwargs)",
            "function_name": "PReLU",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alpha_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alpha_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "alpha_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "shared_axes",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "PReLU"
            ],
            "torch": "prelu",
            "tfjs": "prelu"
        },
        "maxpool2d": {
            "code": "tf.keras.layers.MaxPool2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)",
            "function_name": "MaxPool2D",
            "args": [
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "pool_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "MaxPool2D"
            ],
            "torch": null,
            "tfjs": null
        },
        "maxpool3d": {
            "code": "tf.keras.layers.MaxPool3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)",
            "function_name": "MaxPool3D",
            "args": [
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "pool_size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "MaxPool3D"
            ],
            "torch": null,
            "tfjs": "maxpool3d"
        },
        "maxpool1d": {
            "code": "tf.keras.layers.MaxPool1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)",
            "function_name": "MaxPool1D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pool_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "MaxPool1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "masking": {
            "code": "tf.keras.layers.Masking(mask_value=0.0,**kwargs)",
            "function_name": "Masking",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "mask_value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Masking"
            ],
            "torch": null,
            "tfjs": "masking"
        },
        "locallyconnected1d": {
            "code": "tf.keras.layers.LocallyConnected1D(filters,kernel_size,strides=1,padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,implementation=1,**kwargs)",
            "function_name": "LocallyConnected1D",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "LocallyConnected1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "lstmcell": {
            "code": "tf.keras.layers.LSTMCell(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=2,**kwargs)",
            "function_name": "LSTMCell",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "unit_forget_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "LSTMCell"
            ],
            "torch": null,
            "tfjs": "lstmcell"
        },
        "layernormalization": {
            "code": "tf.keras.layers.LayerNormalization(axis=-1,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,trainable=True,name=None,**kwargs)",
            "function_name": "LayerNormalization",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "center",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "gamma_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "gamma_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "gamma_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "LayerNormalization"
            ],
            "torch": null,
            "tfjs": "layernormalization"
        },
        "locallyconnected2d": {
            "code": "tf.keras.layers.LocallyConnected2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,implementation=1,**kwargs)",
            "function_name": "LocallyConnected2D",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "LocallyConnected2D"
            ],
            "torch": null,
            "tfjs": null
        },
        "lstm": {
            "code": "tf.keras.layers.LSTM(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=2,return_sequences=False,return_state=False,go_backwards=False,stateful=False,time_major=False,unroll=False,**kwargs)",
            "function_name": "LSTM",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "unit_forget_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "return_sequences",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "return_state",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "go_backwards",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "stateful",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "time_major",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "unroll",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "LSTM"
            ],
            "torch": null,
            "tfjs": "lstm"
        },
        "leakyrelu": {
            "code": "tf.keras.layers.LeakyReLU(alpha=0.3,**kwargs)",
            "function_name": "LeakyReLU",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "alpha"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "LeakyReLU"
            ],
            "torch": null,
            "tfjs": "leakyrelu"
        },
        "layer": {
            "code": "tf.keras.layers.Layer(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)",
            "function_name": "Layer",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dynamic",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Layer"
            ],
            "torch": null,
            "tfjs": null
        },
        "lambda": {
            "code": "tf.keras.layers.Lambda(function,output_shape=None,mask=None,arguments=None,**kwargs)",
            "function_name": "Lambda",
            "args": [
                {
                    "name": "function",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "arguments",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Lambda"
            ],
            "torch": null,
            "tfjs": null
        },
        "globalmaxpool1d": {
            "code": "tf.keras.layers.GlobalMaxPool1D(data_format='channels_last',**kwargs)",
            "function_name": "GlobalMaxPool1D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GlobalMaxPool1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "gru": {
            "code": "tf.keras.layers.GRU(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=2,return_sequences=False,return_state=False,go_backwards=False,stateful=False,unroll=False,time_major=False,reset_after=True,**kwargs)",
            "function_name": "GRU",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "return_sequences",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "return_state",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "go_backwards",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "stateful",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "unroll",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "time_major",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "reset_after",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GRU"
            ],
            "torch": null,
            "tfjs": "gru"
        },
        "globalaveragepooling3d": {
            "code": "tf.keras.layers.GlobalAveragePooling3D(data_format=None,**kwargs)",
            "function_name": "GlobalAveragePooling3D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GlobalAveragePooling3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "inputspec": {
            "code": "tf.keras.layers.InputSpec(dtype=None,shape=None,ndim=None,max_ndim=None,min_ndim=None,axes=None)",
            "function_name": "InputSpec",
            "args": [
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ndim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_ndim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_ndim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "InputSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "grucell": {
            "code": "tf.keras.layers.GRUCell(units,activation='tanh',recurrent_activation='sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=2,reset_after=True,**kwargs)",
            "function_name": "GRUCell",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "reset_after",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GRUCell"
            ],
            "torch": null,
            "tfjs": "grucell"
        },
        "inputlayer": {
            "code": "tf.keras.layers.InputLayer(input_shape=None,batch_size=None,dtype=None,input_tensor=None,sparse=False,name=None,ragged=False,**kwargs)",
            "function_name": "InputLayer",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "input_shape",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "batch_size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "input_tensor",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "sparse",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "ragged",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "InputLayer"
            ],
            "torch": null,
            "tfjs": "inputlayer"
        },
        "globalmaxpool3d": {
            "code": "tf.keras.layers.GlobalMaxPool3D(data_format=None,**kwargs)",
            "function_name": "GlobalMaxPool3D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GlobalMaxPool3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "globalmaxpool2d": {
            "code": "tf.keras.layers.GlobalMaxPool2D(data_format=None,**kwargs)",
            "function_name": "GlobalMaxPool2D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GlobalMaxPool2D"
            ],
            "torch": null,
            "tfjs": null
        },
        "globalaveragepooling2d": {
            "code": "tf.keras.layers.GlobalAveragePooling2D(data_format=None,**kwargs)",
            "function_name": "GlobalAveragePooling2D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GlobalAveragePooling2D"
            ],
            "torch": null,
            "tfjs": "globalaveragepooling2d"
        },
        "gaussiannoise": {
            "code": "tf.keras.layers.GaussianNoise(stddev,**kwargs)",
            "function_name": "GaussianNoise",
            "args": [
                {
                    "name": "stddev",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GaussianNoise"
            ],
            "torch": null,
            "tfjs": "gaussiannoise"
        },
        "globalaveragepooling1d": {
            "code": "tf.keras.layers.GlobalAveragePooling1D(data_format='channels_last',**kwargs)",
            "function_name": "GlobalAveragePooling1D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GlobalAveragePooling1D"
            ],
            "torch": null,
            "tfjs": "globalaveragepooling1d"
        },
        "dot": {
            "code": "tf.keras.backend.dot(x,y)",
            "function_name": "dot",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "dot"
            ],
            "torch": "dot",
            "tfjs": "dot"
        },
        "embedding": {
            "code": "tf.keras.layers.Embedding(input_dim,output_dim,embeddings_initializer='uniform',embeddings_regularizer=None,activity_regularizer=None,embeddings_constraint=None,mask_zero=False,input_length=None,**kwargs)",
            "function_name": "Embedding",
            "args": [
                {
                    "name": "input_dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "output_dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "embeddings_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "embeddings_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "embeddings_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "mask_zero",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "input_length",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Embedding"
            ],
            "torch": "embedding",
            "tfjs": "embedding"
        },
        "gaussiandropout": {
            "code": "tf.keras.layers.GaussianDropout(rate,**kwargs)",
            "function_name": "GaussianDropout",
            "args": [
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "GaussianDropout"
            ],
            "torch": null,
            "tfjs": "gaussiandropout"
        },
        "depthwiseconv2d": {
            "code": "tf.keras.layers.DepthwiseConv2D(kernel_size,strides=(1,1),padding='valid',depth_multiplier=1,data_format=None,activation=None,use_bias=True,depthwise_initializer='glorot_uniform',bias_initializer='zeros',depthwise_regularizer=None,bias_regularizer=None,activity_regularizer=None,depthwise_constraint=None,bias_constraint=None,**kwargs)",
            "function_name": "DepthwiseConv2D",
            "args": [
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depth_multiplier",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depthwise_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depthwise_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "depthwise_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "DepthwiseConv2D"
            ],
            "torch": null,
            "tfjs": "depthwiseconv2d"
        },
        "dense": {
            "code": "tf.keras.layers.Dense(units,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)",
            "function_name": "Dense",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Dense"
            ],
            "torch": null,
            "tfjs": "dense"
        },
        "cropping3d": {
            "code": "tf.keras.layers.Cropping3D(cropping=((1,1),(1,1),(1,1)),data_format=None,**kwargs)",
            "function_name": "Cropping3D",
            "args": [
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "cropping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Cropping3D"
            ],
            "torch": null,
            "tfjs": null
        },
        "densefeatures": {
            "code": "tf.keras.layers.DenseFeatures(feature_columns,trainable=True,name=None,**kwargs)",
            "function_name": "DenseFeatures",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "DenseFeatures"
            ],
            "torch": null,
            "tfjs": null
        },
        "cropping1d": {
            "code": "tf.keras.layers.Cropping1D(cropping=(1,1),**kwargs)",
            "function_name": "Cropping1D",
            "args": [
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "cropping",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Cropping1D"
            ],
            "torch": null,
            "tfjs": null
        },
        "convlstm2d": {
            "code": "tf.keras.layers.ConvLSTM2D(filters,kernel_size,strides=(1,1),padding='valid',data_format=None,dilation_rate=(1,1),activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,return_sequences=False,go_backwards=False,stateful=False,dropout=0.0,recurrent_dropout=0.0,**kwargs)",
            "function_name": "ConvLSTM2D",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unit_forget_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "return_sequences",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "go_backwards",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stateful",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "ConvLSTM2D"
            ],
            "torch": null,
            "tfjs": null
        },
        "cropping2d": {
            "code": "tf.keras.layers.Cropping2D(cropping=((0,0),(0,0)),data_format=None,**kwargs)",
            "function_name": "Cropping2D",
            "args": [
                {
                    "name": "0",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "0",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null
                },
                {
                    "name": "cropping",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Cropping2D"
            ],
            "torch": null,
            "tfjs": "cropping2d"
        },
        "conv3dtranspose": {
            "code": "tf.keras.layers.Conv3DTranspose(filters,kernel_size,strides=(1,1,1),padding='valid',output_padding=None,data_format=None,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)",
            "function_name": "Conv3DTranspose",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "output_padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Conv3DTranspose"
            ],
            "torch": null,
            "tfjs": "conv3dtranspose"
        },
        "conv2dtranspose": {
            "code": "tf.keras.layers.Conv2DTranspose(filters,kernel_size,strides=(1,1),padding='valid',output_padding=None,data_format=None,dilation_rate=(1,1),activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,activity_regularizer=None,kernel_constraint=None,bias_constraint=None,**kwargs)",
            "function_name": "Conv2DTranspose",
            "args": [
                {
                    "name": "filters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "strides"
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "output_padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "dilation_rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "activity_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Conv2DTranspose"
            ],
            "torch": null,
            "tfjs": "conv2dtranspose"
        },
        "concatenate": {
            "code": "tf.keras.backend.concatenate(tensors,axis=-1)",
            "function_name": "concatenate",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "concatenate"
            ],
            "torch": null,
            "tfjs": "concatenate"
        },
        "bidirectional": {
            "code": "tf.keras.layers.Bidirectional(layer,merge_mode='concat',weights=None,backward_layer=None,**kwargs)",
            "function_name": "Bidirectional",
            "args": [
                {
                    "name": "layer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "merge_mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "backward_layer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Bidirectional"
            ],
            "torch": null,
            "tfjs": "bidirectional"
        },
        "averagepooling3d": {
            "code": "tf.keras.layers.AveragePooling3D(pool_size=(2,2,2),strides=None,padding='valid',data_format=None,**kwargs)",
            "function_name": "AveragePooling3D",
            "args": [
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "pool_size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "AveragePooling3D"
            ],
            "torch": null,
            "tfjs": "averagepooling3d"
        },
        "batchnormalization": {
            "code": "tf.keras.layers.BatchNormalization(axis=-1,momentum=0.99,epsilon=0.001,center=True,scale=True,beta_initializer='zeros',gamma_initializer='ones',moving_mean_initializer='zeros',moving_variance_initializer='ones',beta_regularizer=None,gamma_regularizer=None,beta_constraint=None,gamma_constraint=None,renorm=False,renorm_clipping=None,renorm_momentum=0.99,fused=None,trainable=True,virtual_batch_size=None,adjustment=None,name=None,**kwargs)",
            "function_name": "BatchNormalization",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "center",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "gamma_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "moving_mean_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "moving_variance_initializer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "gamma_regularizer",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "beta_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "gamma_constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "renorm",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "renorm_clipping",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "renorm_momentum",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "fused",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "virtual_batch_size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "adjustment",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "BatchNormalization"
            ],
            "torch": null,
            "tfjs": "batchnormalization"
        },
        "alphadropout": {
            "code": "tf.keras.layers.AlphaDropout(rate,noise_shape=None,seed=None,**kwargs)",
            "function_name": "AlphaDropout",
            "args": [
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "noise_shape",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "AlphaDropout"
            ],
            "torch": null,
            "tfjs": "alphadropout"
        },
        "average": {
            "code": "tf.keras.layers.average(inputs,**kwargs)",
            "function_name": "average",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "average"
            ],
            "torch": null,
            "tfjs": "average"
        },
        "averagepooling2d": {
            "code": "tf.keras.layers.AveragePooling2D(pool_size=(2,2),strides=None,padding='valid',data_format=None,**kwargs)",
            "function_name": "AveragePooling2D",
            "args": [
                {
                    "name": "2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "pool_size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "AveragePooling2D"
            ],
            "torch": null,
            "tfjs": "averagepooling2d"
        },
        "averagepooling1d": {
            "code": "tf.keras.layers.AveragePooling1D(pool_size=2,strides=None,padding='valid',data_format='channels_last',**kwargs)",
            "function_name": "AveragePooling1D",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "pool_size",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "AveragePooling1D"
            ],
            "torch": null,
            "tfjs": "averagepooling1d"
        },
        "additiveattention": {
            "code": "tf.keras.layers.AdditiveAttention(use_scale=True,**kwargs)",
            "function_name": "AdditiveAttention",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "use_scale",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "AdditiveAttention"
            ],
            "torch": null,
            "tfjs": null
        },
        "attention": {
            "code": "tf.keras.layers.Attention(use_scale=False,**kwargs)",
            "function_name": "Attention",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "use_scale",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Attention"
            ],
            "torch": null,
            "tfjs": null
        },
        "activityregularization": {
            "code": "tf.keras.layers.ActivityRegularization(l1=0.0,l2=0.0,**kwargs)",
            "function_name": "ActivityRegularization",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "l1",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "ActivityRegularization"
            ],
            "torch": null,
            "tfjs": null
        },
        "variancescaling": {
            "code": "tf.keras.initializers.VarianceScaling(scale=1.0,mode='fan_in',distribution='truncated_normal',seed=None)",
            "function_name": "VarianceScaling",
            "args": [
                {
                    "name": "scale",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "distribution",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "VarianceScaling"
            ],
            "torch": null,
            "tfjs": "variancescaling"
        },
        "abstractrnncell": {
            "code": "tf.keras.layers.AbstractRNNCell(trainable=True,name=None,dtype=None,dynamic=False,**kwargs)",
            "function_name": "AbstractRNNCell",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dynamic",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "AbstractRNNCell"
            ],
            "torch": null,
            "tfjs": null
        },
        "truncatednormal": {
            "code": "tf.keras.initializers.TruncatedNormal(mean=0.0,stddev=0.05,seed=None)",
            "function_name": "TruncatedNormal",
            "args": [
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "TruncatedNormal"
            ],
            "torch": null,
            "tfjs": "truncatednormal"
        },
        "activation": {
            "code": "tf.keras.layers.Activation(activation,**kwargs)",
            "function_name": "Activation",
            "args": [
                {
                    "name": "activation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "layers",
                "Activation"
            ],
            "torch": null,
            "tfjs": "activation"
        },
        "orthogonal": {
            "code": "tf.keras.initializers.Orthogonal(gain=1.0,seed=None)",
            "function_name": "Orthogonal",
            "args": [
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "Orthogonal"
            ],
            "torch": null,
            "tfjs": "orthogonal"
        },
        "lecun_uniform": {
            "code": "tf.keras.initializers.lecun_uniform(seed=None)",
            "function_name": "lecun_uniform",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "lecun_uniform"
            ],
            "torch": null,
            "tfjs": null
        },
        "lecun_normal": {
            "code": "tf.keras.initializers.lecun_normal(seed=None)",
            "function_name": "lecun_normal",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "lecun_normal"
            ],
            "torch": null,
            "tfjs": null
        },
        "he_normal": {
            "code": "tf.keras.initializers.he_normal(seed=None)",
            "function_name": "he_normal",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "he_normal"
            ],
            "torch": null,
            "tfjs": null
        },
        "he_uniform": {
            "code": "tf.keras.initializers.he_uniform(seed=None)",
            "function_name": "he_uniform",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "he_uniform"
            ],
            "torch": null,
            "tfjs": null
        },
        "glorotuniform": {
            "code": "tf.keras.initializers.GlorotUniform(seed=None)",
            "function_name": "GlorotUniform",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "GlorotUniform"
            ],
            "torch": null,
            "tfjs": "glorotuniform"
        },
        "glorotnormal": {
            "code": "tf.keras.initializers.GlorotNormal(seed=None)",
            "function_name": "GlorotNormal",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "initializers",
                "GlorotNormal"
            ],
            "torch": null,
            "tfjs": "glorotnormal"
        },
        "terminate_keras_multiprocessing_pools": {
            "code": "tf.keras.experimental.terminate_keras_multiprocessing_pools(grace_period=0.1,use_sigkill=False)",
            "function_name": "terminate_keras_multiprocessing_pools",
            "args": [
                {
                    "name": "grace_period",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_sigkill",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "terminate_keras_multiprocessing_pools"
            ],
            "torch": null,
            "tfjs": null
        },
        "peepholelstmcell": {
            "code": "tf.keras.experimental.PeepholeLSTMCell(units,activation='tanh',recurrent_activation='hard_sigmoid',use_bias=True,kernel_initializer='glorot_uniform',recurrent_initializer='orthogonal',bias_initializer='zeros',unit_forget_bias=True,kernel_regularizer=None,recurrent_regularizer=None,bias_regularizer=None,kernel_constraint=None,recurrent_constraint=None,bias_constraint=None,dropout=0.0,recurrent_dropout=0.0,implementation=1,**kwargs)",
            "function_name": "PeepholeLSTMCell",
            "args": [
                {
                    "name": "units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unit_forget_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_constraint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "recurrent_dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "implementation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "PeepholeLSTMCell"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequencefeatures": {
            "code": "tf.keras.experimental.SequenceFeatures(feature_columns,trainable=True,name=None,**kwargs)",
            "function_name": "SequenceFeatures",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "SequenceFeatures"
            ],
            "torch": null,
            "tfjs": null
        },
        "noisylinearcosinedecay": {
            "code": "tf.keras.experimental.NoisyLinearCosineDecay(initial_learning_rate,decay_steps,initial_variance=1.0,variance_decay=0.55,num_periods=0.5,alpha=0.0,beta=0.001,name=None)",
            "function_name": "NoisyLinearCosineDecay",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "initial_variance",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "variance_decay",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_periods",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "NoisyLinearCosineDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "cosinedecayrestarts": {
            "code": "tf.keras.experimental.CosineDecayRestarts(initial_learning_rate,first_decay_steps,t_mul=2.0,m_mul=1.0,alpha=0.0,name=None)",
            "function_name": "CosineDecayRestarts",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "first_decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "t_mul",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "m_mul",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "CosineDecayRestarts"
            ],
            "torch": null,
            "tfjs": null
        },
        "widedeepmodel": {
            "code": "tf.keras.experimental.WideDeepModel(linear_model,dnn_model,activation=None,**kwargs)",
            "function_name": "WideDeepModel",
            "args": [
                {
                    "name": "linear_model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dnn_model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "WideDeepModel"
            ],
            "torch": null,
            "tfjs": null
        },
        "cosinedecay": {
            "code": "tf.keras.experimental.CosineDecay(initial_learning_rate,decay_steps,alpha=0.0,name=None)",
            "function_name": "CosineDecay",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "CosineDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearmodel": {
            "code": "tf.keras.experimental.LinearModel(units=1,activation=None,use_bias=True,kernel_initializer='glorot_uniform',bias_initializer='zeros',kernel_regularizer=None,bias_regularizer=None,**kwargs)",
            "function_name": "LinearModel",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "units",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kernel_regularizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "bias_regularizer",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "LinearModel"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearcosinedecay": {
            "code": "tf.keras.experimental.LinearCosineDecay(initial_learning_rate,decay_steps,num_periods=0.5,alpha=0.0,beta=0.001,name=None)",
            "function_name": "LinearCosineDecay",
            "args": [
                {
                    "name": "initial_learning_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decay_steps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_periods",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "experimental",
                "LinearCosineDecay"
            ],
            "torch": null,
            "tfjs": null
        },
        "model_to_estimator": {
            "code": "tf.keras.estimator.model_to_estimator(keras_model=None,keras_model_path=None,custom_objects=None,model_dir=None,config=None,checkpoint_format='checkpoint')",
            "function_name": "model_to_estimator",
            "args": [
                {
                    "name": "keras_model",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keras_model_path",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "custom_objects",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "checkpoint_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "estimator",
                "model_to_estimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "load_data": {
            "code": "tf.keras.datasets.boston_housing.load_data(path='boston_housing.npz',test_split=0.2,seed=113)",
            "function_name": "load_data",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "test_split",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "datasets",
                "boston_housing",
                "load_data"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_word_index": {
            "code": "tf.keras.datasets.imdb.get_word_index(path='imdb_word_index.json')",
            "function_name": "get_word_index",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "datasets",
                "imdb",
                "get_word_index"
            ],
            "torch": null,
            "tfjs": null
        },
        "unitnorm": {
            "code": "tf.keras.constraints.UnitNorm(axis=0)",
            "function_name": "UnitNorm",
            "args": [
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "constraints",
                "UnitNorm"
            ],
            "torch": null,
            "tfjs": "unitnorm"
        },
        "maxnorm": {
            "code": "tf.keras.constraints.MaxNorm(max_value=2,axis=0)",
            "function_name": "MaxNorm",
            "args": [
                {
                    "name": "max_value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "constraints",
                "MaxNorm"
            ],
            "torch": null,
            "tfjs": "maxnorm"
        },
        "minmaxnorm": {
            "code": "tf.keras.constraints.MinMaxNorm(min_value=0.0,max_value=1.0,rate=1.0,axis=0)",
            "function_name": "MinMaxNorm",
            "args": [
                {
                    "name": "min_value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "max_value",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "rate",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "constraints",
                "MinMaxNorm"
            ],
            "torch": null,
            "tfjs": "minmaxnorm"
        },
        "terminateonnan": {
            "code": "tf.keras.callbacks.TerminateOnNaN()",
            "function_name": "TerminateOnNaN",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "TerminateOnNaN"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensorboard": {
            "code": "tf.keras.callbacks.TensorBoard(log_dir='logs',histogram_freq=0,write_graph=True,write_images=False,update_freq='epoch',profile_batch=2,embeddings_freq=0,embeddings_metadata=None,**kwargs)",
            "function_name": "TensorBoard",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "log_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "histogram_freq",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "write_graph",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "write_images",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "update_freq",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "profile_batch",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "embeddings_freq",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "embeddings_metadata",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "TensorBoard"
            ],
            "torch": null,
            "tfjs": null
        },
        "progbarlogger": {
            "code": "tf.keras.callbacks.ProgbarLogger(count_mode='samples',stateful_metrics=None)",
            "function_name": "ProgbarLogger",
            "args": [
                {
                    "name": "count_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stateful_metrics",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "ProgbarLogger"
            ],
            "torch": null,
            "tfjs": null
        },
        "modelcheckpoint": {
            "code": "tf.keras.callbacks.ModelCheckpoint(filepath,monitor='val_loss',verbose=0,save_best_only=False,save_weights_only=False,mode='auto',save_freq='epoch',**kwargs)",
            "function_name": "ModelCheckpoint",
            "args": [
                {
                    "name": "filepath",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "monitor",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_best_only",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_weights_only",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_freq",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "ModelCheckpoint"
            ],
            "torch": null,
            "tfjs": null
        },
        "learningratescheduler": {
            "code": "tf.keras.callbacks.LearningRateScheduler(schedule,verbose=0)",
            "function_name": "LearningRateScheduler",
            "args": [
                {
                    "name": "schedule",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "LearningRateScheduler"
            ],
            "torch": null,
            "tfjs": null
        },
        "reducelronplateau": {
            "code": "tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss',factor=0.1,patience=10,verbose=0,mode='auto',min_delta=0.0001,cooldown=0,min_lr=0,**kwargs)",
            "function_name": "ReduceLROnPlateau",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "monitor",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "factor",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "patience",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_delta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cooldown",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_lr",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "ReduceLROnPlateau"
            ],
            "torch": null,
            "tfjs": null
        },
        "remotemonitor": {
            "code": "tf.keras.callbacks.RemoteMonitor(root='http://localhost:9000',path='/publish/epoch/end/',field='data',headers=None,send_as_json=False)",
            "function_name": "RemoteMonitor",
            "args": [
                {
                    "name": "root",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "path",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "field",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "headers",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "send_as_json",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "RemoteMonitor"
            ],
            "torch": null,
            "tfjs": null
        },
        "lambdacallback": {
            "code": "tf.keras.callbacks.LambdaCallback(on_epoch_begin=None,on_epoch_end=None,on_batch_begin=None,on_batch_end=None,on_train_begin=None,on_train_end=None,**kwargs)",
            "function_name": "LambdaCallback",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "on_epoch_begin",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "on_epoch_end",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "on_batch_begin",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "on_batch_end",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "on_train_begin",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "on_train_end",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "LambdaCallback"
            ],
            "torch": null,
            "tfjs": null
        },
        "earlystopping": {
            "code": "tf.keras.callbacks.EarlyStopping(monitor='val_loss',min_delta=0,patience=0,verbose=0,mode='auto',baseline=None,restore_best_weights=False)",
            "function_name": "EarlyStopping",
            "args": [
                {
                    "name": "monitor",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "min_delta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "patience",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "baseline",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "restore_best_weights",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "EarlyStopping"
            ],
            "torch": null,
            "tfjs": "earlystopping"
        },
        "history": {
            "code": "tf.keras.callbacks.History()",
            "function_name": "History",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "History"
            ],
            "torch": null,
            "tfjs": null
        },
        "baselogger": {
            "code": "tf.keras.callbacks.BaseLogger(stateful_metrics=None)",
            "function_name": "BaseLogger",
            "args": [
                {
                    "name": "stateful_metrics",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "BaseLogger"
            ],
            "torch": null,
            "tfjs": null
        },
        "csvlogger": {
            "code": "tf.keras.callbacks.CSVLogger(filename,separator=',',append=False)",
            "function_name": "CSVLogger",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "separator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "append",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "CSVLogger"
            ],
            "torch": null,
            "tfjs": null
        },
        "callback": {
            "code": "tf.keras.callbacks.Callback()",
            "function_name": "Callback",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "callbacks",
                "Callback"
            ],
            "torch": null,
            "tfjs": null
        },
        "zeros_like": {
            "code": "tf.zeros_like(input,dtype=None,name=None)",
            "function_name": "zeros_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "zeros_like"
            ],
            "torch": "zeros_like",
            "tfjs": null
        },
        "var": {
            "code": "tf.keras.backend.var(x,axis=None,keepdims=False)",
            "function_name": "var",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "var"
            ],
            "torch": "var",
            "tfjs": null
        },
        "update_sub": {
            "code": "tf.keras.backend.update_sub(x,decrement)",
            "function_name": "update_sub",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "decrement",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "update_sub"
            ],
            "torch": null,
            "tfjs": null
        },
        "zeros": {
            "code": "tf.zeros(shape,dtype=tf.dtypes.float32,name=None)",
            "function_name": "zeros",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "zeros"
            ],
            "torch": "zeros",
            "tfjs": "zeros"
        },
        "variable": {
            "code": "tf.keras.backend.variable(value,dtype=None,name=None,constraint=None)",
            "function_name": "variable",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "name"
                },
                {
                    "name": "constraint",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "variable"
            ],
            "torch": null,
            "tfjs": "variable"
        },
        "update_add": {
            "code": "tf.keras.backend.update_add(x,increment)",
            "function_name": "update_add",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "increment",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "update_add"
            ],
            "torch": null,
            "tfjs": null
        },
        "update": {
            "code": "tf.keras.backend.update(x,new_x)",
            "function_name": "update",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "new_x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "update"
            ],
            "torch": null,
            "tfjs": null
        },
        "switch": {
            "code": "tf.keras.backend.switch(condition,then_expression,else_expression)",
            "function_name": "switch",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "then_expression",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "else_expression",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "switch"
            ],
            "torch": null,
            "tfjs": null
        },
        "tile": {
            "code": "tf.tile(input,multiples,name=None)",
            "function_name": "tile",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "multiples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "tile"
            ],
            "torch": null,
            "tfjs": "tile"
        },
        "stop_gradient": {
            "code": "tf.stop_gradient(input,name=None)",
            "function_name": "stop_gradient",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "stop_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "temporal_padding": {
            "code": "tf.keras.backend.temporal_padding(x,padding=(1,1))",
            "function_name": "temporal_padding",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "temporal_padding"
            ],
            "torch": null,
            "tfjs": null
        },
        "std": {
            "code": "tf.keras.backend.std(x,axis=None,keepdims=False)",
            "function_name": "std",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "std"
            ],
            "torch": "std",
            "tfjs": null
        },
        "squeeze": {
            "code": "tf.squeeze(input,axis=None,name=None)",
            "function_name": "squeeze",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tfjs": "a"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "squeeze"
            ],
            "torch": "squeeze",
            "tfjs": "squeeze"
        },
        "spatial_2d_padding": {
            "code": "tf.keras.backend.spatial_2d_padding(x,padding=((1,1),(1,1)),data_format=None)",
            "function_name": "spatial_2d_padding",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "spatial_2d_padding"
            ],
            "torch": null,
            "tfjs": null
        },
        "spatial_3d_padding": {
            "code": "tf.keras.backend.spatial_3d_padding(x,padding=((1,1),(1,1),(1,1)),data_format=None)",
            "function_name": "spatial_3d_padding",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "spatial_3d_padding"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_image_data_format": {
            "code": "tf.keras.backend.set_image_data_format(data_format)",
            "function_name": "set_image_data_format",
            "args": [
                {
                    "name": "data_format",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_image_data_format"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_value": {
            "code": "tf.keras.backend.set_value(x,value)",
            "function_name": "set_value",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_value"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_learning_phase": {
            "code": "tf.keras.backend.set_learning_phase(value)",
            "function_name": "set_learning_phase",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_learning_phase"
            ],
            "torch": null,
            "tfjs": null
        },
        "shape": {
            "code": "tf.shape(input,out_type=tf.dtypes.int32,name=None)",
            "function_name": "shape",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_floatx": {
            "code": "tf.keras.backend.set_floatx(value)",
            "function_name": "set_floatx",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_floatx"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_epsilon": {
            "code": "tf.keras.backend.set_epsilon(value)",
            "function_name": "set_epsilon",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "set_epsilon"
            ],
            "torch": null,
            "tfjs": null
        },
        "resize_volumes": {
            "code": "tf.keras.backend.resize_volumes(x,depth_factor,height_factor,width_factor,data_format)",
            "function_name": "resize_volumes",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depth_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "height_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "width_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "resize_volumes"
            ],
            "torch": null,
            "tfjs": null
        },
        "reverse": {
            "code": "tf.reverse(tensor,axis,name=None)",
            "function_name": "reverse",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "reverse"
            ],
            "torch": null,
            "tfjs": "reverse"
        },
        "resize_images": {
            "code": "tf.keras.backend.resize_images(x,height_factor,width_factor,data_format,interpolation='nearest')",
            "function_name": "resize_images",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "height_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "width_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "data_format",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "resize_images"
            ],
            "torch": null,
            "tfjs": null
        },
        "reset_uids": {
            "code": "tf.keras.backend.reset_uids()",
            "function_name": "reset_uids",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "reset_uids"
            ],
            "torch": null,
            "tfjs": null
        },
        "repeat_elements": {
            "code": "tf.keras.backend.repeat_elements(x,rep,axis)",
            "function_name": "repeat_elements",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "repeat_elements"
            ],
            "torch": null,
            "tfjs": null
        },
        "repeat": {
            "code": "tf.repeat(input,repeats,axis=None,name=None)",
            "function_name": "repeat",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "repeats",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "repeat"
            ],
            "torch": null,
            "tfjs": "repeat"
        },
        "random_normal": {
            "code": "tf.keras.backend.random_normal(shape,mean=0.0,stddev=1.0,dtype=None,seed=None)",
            "function_name": "random_normal",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_normal"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_uniform": {
            "code": "tf.keras.backend.random_uniform(shape,minval=0.0,maxval=1.0,dtype=None,seed=None)",
            "function_name": "random_uniform",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_uniform"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_binomial": {
            "code": "tf.keras.backend.random_binomial(shape,p=0.0,dtype=None,seed=None)",
            "function_name": "random_binomial",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_binomial"
            ],
            "torch": null,
            "tfjs": null
        },
        "print_tensor": {
            "code": "tf.keras.backend.print_tensor(x,message='')",
            "function_name": "print_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "print_tensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "prod": {
            "code": "tf.keras.backend.prod(x,axis=None,keepdims=False)",
            "function_name": "prod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "prod"
            ],
            "torch": "prod",
            "tfjs": "prod"
        },
        "random_uniform_variable": {
            "code": "tf.keras.backend.random_uniform_variable(shape,low,high,dtype=None,name=None,seed=None)",
            "function_name": "random_uniform_variable",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "low",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "high",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_uniform_variable"
            ],
            "torch": null,
            "tfjs": null
        },
        "placeholder": {
            "code": "tf.keras.backend.placeholder(shape=None,ndim=None,dtype=None,sparse=False,name=None,ragged=False)",
            "function_name": "placeholder",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ndim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sparse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ragged",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "placeholder"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_normal_variable": {
            "code": "tf.keras.backend.random_normal_variable(shape,mean,scale,dtype=None,name=None,seed=None)",
            "function_name": "random_normal_variable",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "random_normal_variable"
            ],
            "torch": null,
            "tfjs": null
        },
        "permute_dimensions": {
            "code": "tf.keras.backend.permute_dimensions(x,pattern)",
            "function_name": "permute_dimensions",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "permute_dimensions"
            ],
            "torch": null,
            "tfjs": null
        },
        "pool3d": {
            "code": "tf.keras.backend.pool3d(x,pool_size,strides=(1,1,1),padding='valid',data_format=None,pool_mode='max')",
            "function_name": "pool3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pool_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pool_mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "pool3d"
            ],
            "torch": null,
            "tfjs": null
        },
        "ones": {
            "code": "tf.ones(shape,dtype=tf.dtypes.float32,name=None)",
            "function_name": "ones",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype",
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "ones"
            ],
            "torch": "ones",
            "tfjs": "ones"
        },
        "normalize_batch_in_training": {
            "code": "tf.keras.backend.normalize_batch_in_training(x,gamma,beta,reduction_axes,epsilon=0.001)",
            "function_name": "normalize_batch_in_training",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "reduction_axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "epsilon",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "normalize_batch_in_training"
            ],
            "torch": null,
            "tfjs": null
        },
        "pool2d": {
            "code": "tf.keras.backend.pool2d(x,pool_size,strides=(1,1),padding='valid',data_format=None,pool_mode='max')",
            "function_name": "pool2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pool_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pool_mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "pool2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "ones_like": {
            "code": "tf.ones_like(input,dtype=None,name=None)",
            "function_name": "ones_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "ones_like"
            ],
            "torch": "ones_like",
            "tfjs": null
        },
        "ndim": {
            "code": "tf.keras.backend.ndim(x)",
            "function_name": "ndim",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ndim"
            ],
            "torch": null,
            "tfjs": null
        },
        "name_scope": {
            "code": "tf.name_scope(name)",
            "function_name": "name_scope",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "name_scope"
            ],
            "torch": null,
            "tfjs": null
        },
        "moving_average_update": {
            "code": "tf.keras.backend.moving_average_update(x,value,momentum)",
            "function_name": "moving_average_update",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "momentum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "moving_average_update"
            ],
            "torch": null,
            "tfjs": null
        },
        "max": {
            "code": "tf.keras.backend.max(x,axis=None,keepdims=False)",
            "function_name": "max",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "max"
            ],
            "torch": "max",
            "tfjs": "max"
        },
        "manual_variable_initialization": {
            "code": "tf.keras.backend.manual_variable_initialization(value)",
            "function_name": "manual_variable_initialization",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "manual_variable_initialization"
            ],
            "torch": null,
            "tfjs": null
        },
        "local_conv2d": {
            "code": "tf.keras.backend.local_conv2d(inputs,kernel,kernel_size,strides,output_shape,data_format=None)",
            "function_name": "local_conv2d",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "output_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "local_conv2d"
            ],
            "torch": null,
            "tfjs": null
        },
        "local_conv1d": {
            "code": "tf.keras.backend.local_conv1d(inputs,kernel,kernel_size,strides,data_format=None)",
            "function_name": "local_conv1d",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "data_format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "local_conv1d"
            ],
            "torch": null,
            "tfjs": null
        },
        "min": {
            "code": "tf.keras.backend.min(x,axis=None,keepdims=False)",
            "function_name": "min",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "min"
            ],
            "torch": "min",
            "tfjs": "min"
        },
        "learning_phase": {
            "code": "tf.keras.backend.learning_phase()",
            "function_name": "learning_phase",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "learning_phase"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_keras_tensor": {
            "code": "tf.keras.backend.is_keras_tensor(x)",
            "function_name": "is_keras_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "is_keras_tensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_sparse": {
            "code": "tf.keras.backend.is_sparse(tensor)",
            "function_name": "is_sparse",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "is_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "in_train_phase": {
            "code": "tf.keras.backend.in_train_phase(x,alt,training=None)",
            "function_name": "in_train_phase",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "in_train_phase"
            ],
            "torch": null,
            "tfjs": null
        },
        "gradients": {
            "code": "tf.gradients(ys,xs,grad_ys=None,name='gradients',gate_gradients=False,aggregation_method=None,stop_gradients=None,unconnected_gradients=tf.UnconnectedGradients.NONE)",
            "function_name": "gradients",
            "args": [
                {
                    "name": "ys",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "xs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "grad_ys",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "gate_gradients",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aggregation_method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stop_gradients",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unconnected_gradients",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "gradients"
            ],
            "torch": null,
            "tfjs": null
        },
        "hard_sigmoid": {
            "code": "tf.keras.activations.hard_sigmoid(x)",
            "function_name": "hard_sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "hard_sigmoid"
            ],
            "torch": null,
            "tfjs": null
        },
        "int_shape": {
            "code": "tf.keras.backend.int_shape(x)",
            "function_name": "int_shape",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "int_shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "in_test_phase": {
            "code": "tf.keras.backend.in_test_phase(x,alt,training=None)",
            "function_name": "in_test_phase",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alt",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "in_test_phase"
            ],
            "torch": null,
            "tfjs": null
        },
        "image_data_format": {
            "code": "tf.keras.backend.image_data_format()",
            "function_name": "image_data_format",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "image_data_format"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_value": {
            "code": "tf.keras.backend.get_value(x)",
            "function_name": "get_value",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "get_value"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_uid": {
            "code": "tf.keras.backend.get_uid(prefix='')",
            "function_name": "get_uid",
            "args": [
                {
                    "name": "prefix",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "get_uid"
            ],
            "torch": null,
            "tfjs": null
        },
        "gather": {
            "code": "tf.gather(params,indices,validate_indices=None,axis=None,batch_dims=0,name=None)",
            "function_name": "gather",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": "indices"
                },
                {
                    "name": "validate_indices",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "batch_dims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "gather"
            ],
            "torch": "gather",
            "tfjs": "gather"
        },
        "foldl": {
            "code": "tf.foldl(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)",
            "function_name": "foldl",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "parallel_iterations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "back_prop",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "swap_memory",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "foldl"
            ],
            "torch": null,
            "tfjs": null
        },
        "function": {
            "code": "tf.function(func=None,input_signature=None,autograph=True,experimental_implements=None,experimental_autograph_options=None,experimental_relax_shapes=False,experimental_compile=None)",
            "function_name": "function",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "input_signature",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "autograph",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_implements",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_autograph_options",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_relax_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_compile",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "function"
            ],
            "torch": null,
            "tfjs": null
        },
        "foldr": {
            "code": "tf.foldr(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,name=None)",
            "function_name": "foldr",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "parallel_iterations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "back_prop",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "swap_memory",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "foldr"
            ],
            "torch": null,
            "tfjs": null
        },
        "floatx": {
            "code": "tf.keras.backend.floatx()",
            "function_name": "floatx",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "floatx"
            ],
            "torch": null,
            "tfjs": null
        },
        "eval": {
            "code": "tf.keras.backend.eval(x)",
            "function_name": "eval",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "eval"
            ],
            "torch": null,
            "tfjs": null
        },
        "epsilon": {
            "code": "tf.keras.backend.epsilon()",
            "function_name": "epsilon",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "epsilon"
            ],
            "torch": null,
            "tfjs": null
        },
        "dtype": {
            "code": "tf.dtypes.DType(type_enum)",
            "function_name": "DType",
            "args": [
                {
                    "name": "type_enum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "DType"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_decode": {
            "code": "tf.keras.backend.ctc_decode(y_pred,input_length,greedy=True,beam_width=100,top_paths=1)",
            "function_name": "ctc_decode",
            "args": [
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "greedy",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beam_width",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "top_paths",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ctc_decode"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_label_dense_to_sparse": {
            "code": "tf.keras.backend.ctc_label_dense_to_sparse(labels,label_lengths)",
            "function_name": "ctc_label_dense_to_sparse",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "label_lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ctc_label_dense_to_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "ctc_batch_cost": {
            "code": "tf.keras.backend.ctc_batch_cost(y_true,y_pred,input_length,label_length)",
            "function_name": "ctc_batch_cost",
            "args": [
                {
                    "name": "y_true",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y_pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "input_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "label_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "ctc_batch_cost"
            ],
            "torch": null,
            "tfjs": null
        },
        "count_params": {
            "code": "tf.keras.backend.count_params(x)",
            "function_name": "count_params",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "count_params"
            ],
            "torch": null,
            "tfjs": null
        },
        "clip": {
            "code": "tf.keras.backend.clip(x,min_value,max_value)",
            "function_name": "clip",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "clip"
            ],
            "torch": null,
            "tfjs": null
        },
        "clear_session": {
            "code": "tf.keras.backend.clear_session()",
            "function_name": "clear_session",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "clear_session"
            ],
            "torch": null,
            "tfjs": null
        },
        "cast_to_floatx": {
            "code": "tf.keras.backend.cast_to_floatx(x)",
            "function_name": "cast_to_floatx",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "cast_to_floatx"
            ],
            "torch": null,
            "tfjs": null
        },
        "cast": {
            "code": "tf.cast(x,dtype,name=None)",
            "function_name": "cast",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "x"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "dtype"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "cast"
            ],
            "torch": null,
            "tfjs": "cast"
        },
        "batch_set_value": {
            "code": "tf.keras.backend.batch_set_value(tuples)",
            "function_name": "batch_set_value",
            "args": [
                {
                    "name": "tuples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_set_value"
            ],
            "torch": null,
            "tfjs": null
        },
        "batch_get_value": {
            "code": "tf.keras.backend.batch_get_value(tensors)",
            "function_name": "batch_get_value",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_get_value"
            ],
            "torch": null,
            "tfjs": null
        },
        "backend": {
            "code": "tf.keras.backend.backend()",
            "function_name": "backend",
            "args": [],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "backend"
            ],
            "torch": null,
            "tfjs": "backend"
        },
        "batch_flatten": {
            "code": "tf.keras.backend.batch_flatten(x)",
            "function_name": "batch_flatten",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_flatten"
            ],
            "torch": null,
            "tfjs": null
        },
        "batch_dot": {
            "code": "tf.keras.backend.batch_dot(x,y,axes=None)",
            "function_name": "batch_dot",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "batch_dot"
            ],
            "torch": null,
            "tfjs": null
        },
        "all": {
            "code": "tf.keras.backend.all(x,axis=None,keepdims=False)",
            "function_name": "all",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "all"
            ],
            "torch": "all",
            "tfjs": "all"
        },
        "any": {
            "code": "tf.keras.backend.any(x,axis=None,keepdims=False)",
            "function_name": "any",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "any"
            ],
            "torch": "any",
            "tfjs": "any"
        },
        "arange": {
            "code": "tf.keras.backend.arange(start,stop=None,step=1,dtype='int32')",
            "function_name": "arange",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start"
                },
                {
                    "name": "stop",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "step"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "backend",
                "arange"
            ],
            "torch": "arange",
            "tfjs": null
        },
        "preprocess_input": {
            "code": "tf.keras.applications.densenet.preprocess_input(*args,**kwargs)",
            "function_name": "preprocess_input",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "densenet",
                "preprocess_input"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_predictions": {
            "code": "tf.keras.applications.densenet.decode_predictions(*args,**kwargs)",
            "function_name": "decode_predictions",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "densenet",
                "decode_predictions"
            ],
            "torch": null,
            "tfjs": null
        },
        "xception": {
            "code": "tf.keras.applications.Xception(*args,**kwargs)",
            "function_name": "Xception",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "Xception"
            ],
            "torch": null,
            "tfjs": null
        },
        "vgg19": {
            "code": "tf.keras.applications.VGG19(*args,**kwargs)",
            "function_name": "VGG19",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "VGG19"
            ],
            "torch": "vgg19",
            "tfjs": null
        },
        "vgg16": {
            "code": "tf.keras.applications.VGG16(*args,**kwargs)",
            "function_name": "VGG16",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "VGG16"
            ],
            "torch": "vgg16",
            "tfjs": null
        },
        "resnet50": {
            "code": "tf.keras.applications.ResNet50(*args,**kwargs)",
            "function_name": "ResNet50",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "ResNet50"
            ],
            "torch": "resnet50",
            "tfjs": null
        },
        "resnet152v2": {
            "code": "tf.keras.applications.ResNet152V2(*args,**kwargs)",
            "function_name": "ResNet152V2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "ResNet152V2"
            ],
            "torch": null,
            "tfjs": null
        },
        "resnet50v2": {
            "code": "tf.keras.applications.ResNet50V2(*args,**kwargs)",
            "function_name": "ResNet50V2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "ResNet50V2"
            ],
            "torch": null,
            "tfjs": null
        },
        "resnet152": {
            "code": "tf.keras.applications.ResNet152(*args,**kwargs)",
            "function_name": "ResNet152",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "ResNet152"
            ],
            "torch": "resnet152",
            "tfjs": null
        },
        "resnet101v2": {
            "code": "tf.keras.applications.ResNet101V2(*args,**kwargs)",
            "function_name": "ResNet101V2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "ResNet101V2"
            ],
            "torch": null,
            "tfjs": null
        },
        "resnet101": {
            "code": "tf.keras.applications.ResNet101(*args,**kwargs)",
            "function_name": "ResNet101",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "ResNet101"
            ],
            "torch": "resnet101",
            "tfjs": null
        },
        "nasnetmobile": {
            "code": "tf.keras.applications.NASNetMobile(*args,**kwargs)",
            "function_name": "NASNetMobile",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "NASNetMobile"
            ],
            "torch": null,
            "tfjs": null
        },
        "nasnetlarge": {
            "code": "tf.keras.applications.NASNetLarge(*args,**kwargs)",
            "function_name": "NASNetLarge",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "NASNetLarge"
            ],
            "torch": null,
            "tfjs": null
        },
        "mobilenet": {
            "code": "tf.keras.applications.MobileNet(*args,**kwargs)",
            "function_name": "MobileNet",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "MobileNet"
            ],
            "torch": null,
            "tfjs": null
        },
        "mobilenetv2": {
            "code": "tf.keras.applications.MobileNetV2(*args,**kwargs)",
            "function_name": "MobileNetV2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "MobileNetV2"
            ],
            "torch": null,
            "tfjs": null
        },
        "inceptionresnetv2": {
            "code": "tf.keras.applications.InceptionResNetV2(*args,**kwargs)",
            "function_name": "InceptionResNetV2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "InceptionResNetV2"
            ],
            "torch": null,
            "tfjs": null
        },
        "inceptionv3": {
            "code": "tf.keras.applications.InceptionV3(*args,**kwargs)",
            "function_name": "InceptionV3",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "InceptionV3"
            ],
            "torch": null,
            "tfjs": null
        },
        "densenet169": {
            "code": "tf.keras.applications.DenseNet169(*args,**kwargs)",
            "function_name": "DenseNet169",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "DenseNet169"
            ],
            "torch": "densenet169",
            "tfjs": null
        },
        "densenet201": {
            "code": "tf.keras.applications.DenseNet201(*args,**kwargs)",
            "function_name": "DenseNet201",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "DenseNet201"
            ],
            "torch": "densenet201",
            "tfjs": null
        },
        "densenet121": {
            "code": "tf.keras.applications.DenseNet121(*args,**kwargs)",
            "function_name": "DenseNet121",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "applications",
                "DenseNet121"
            ],
            "torch": "densenet121",
            "tfjs": null
        },
        "linear": {
            "code": "tf.keras.activations.linear(x)",
            "function_name": "linear",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "linear"
            ],
            "torch": "linear",
            "tfjs": null
        },
        "exponential": {
            "code": "tf.keras.activations.exponential(x)",
            "function_name": "exponential",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "activations",
                "exponential"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequential": {
            "code": "tf.keras.Sequential(layers=None,name=None)",
            "function_name": "Sequential",
            "args": [
                {
                    "name": "layers",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "Sequential"
            ],
            "torch": null,
            "tfjs": "sequential"
        },
        "input": {
            "code": "tf.keras.Input(shape=None,batch_size=None,name=None,dtype=None,sparse=False,tensor=None,ragged=False,**kwargs)",
            "function_name": "Input",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sparse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tensor",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ragged",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "Input"
            ],
            "torch": null,
            "tfjs": null
        },
        "walk": {
            "code": "tf.io.gfile.walk(top,topdown=True,onerror=None)",
            "function_name": "walk",
            "args": [
                {
                    "name": "top",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "topdown",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "onerror",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "walk"
            ],
            "torch": null,
            "tfjs": null
        },
        "stat": {
            "code": "tf.io.gfile.stat(path)",
            "function_name": "stat",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "stat"
            ],
            "torch": null,
            "tfjs": null
        },
        "rmtree": {
            "code": "tf.io.gfile.rmtree(path)",
            "function_name": "rmtree",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "rmtree"
            ],
            "torch": null,
            "tfjs": null
        },
        "model": {
            "code": "tf.keras.Model(*args,**kwargs)",
            "function_name": "Model",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "keras",
                "Model"
            ],
            "torch": null,
            "tfjs": "model"
        },
        "isdir": {
            "code": "tf.io.gfile.isdir(path)",
            "function_name": "isdir",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "isdir"
            ],
            "torch": null,
            "tfjs": null
        },
        "rename": {
            "code": "tf.io.gfile.rename(src,dst,overwrite=False)",
            "function_name": "rename",
            "args": [
                {
                    "name": "src",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dst",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "overwrite",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "rename"
            ],
            "torch": null,
            "tfjs": null
        },
        "remove": {
            "code": "tf.io.gfile.remove(path)",
            "function_name": "remove",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "remove"
            ],
            "torch": "remove",
            "tfjs": null
        },
        "glob": {
            "code": "tf.io.gfile.glob(pattern)",
            "function_name": "glob",
            "args": [
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "glob"
            ],
            "torch": null,
            "tfjs": null
        },
        "mkdir": {
            "code": "tf.io.gfile.mkdir(path)",
            "function_name": "mkdir",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "mkdir"
            ],
            "torch": null,
            "tfjs": null
        },
        "listdir": {
            "code": "tf.io.gfile.listdir(path)",
            "function_name": "listdir",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "listdir"
            ],
            "torch": null,
            "tfjs": null
        },
        "makedirs": {
            "code": "tf.io.gfile.makedirs(path)",
            "function_name": "makedirs",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "makedirs"
            ],
            "torch": null,
            "tfjs": null
        },
        "gfile": {
            "code": "tf.io.gfile.GFile(name,mode='r')",
            "function_name": "GFile",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "GFile"
            ],
            "torch": null,
            "tfjs": null
        },
        "exists": {
            "code": "tf.io.gfile.exists(path)",
            "function_name": "exists",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "exists"
            ],
            "torch": null,
            "tfjs": null
        },
        "copy": {
            "code": "tf.io.gfile.copy(src,dst,overwrite=False)",
            "function_name": "copy",
            "args": [
                {
                    "name": "src",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dst",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "overwrite",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "gfile",
                "copy"
            ],
            "torch": null,
            "tfjs": null
        },
        "write_graph": {
            "code": "tf.io.write_graph(graph_or_graph_def,logdir,name,as_text=True)",
            "function_name": "write_graph",
            "args": [
                {
                    "name": "graph_or_graph_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logdir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "as_text",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "write_graph"
            ],
            "torch": null,
            "tfjs": null
        },
        "write_file": {
            "code": "tf.io.write_file(filename,contents,name=None)",
            "function_name": "write_file",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "write_file"
            ],
            "torch": null,
            "tfjs": null
        },
        "tfrecordwriter": {
            "code": "tf.data.experimental.TFRecordWriter(filename,compression_type=None)",
            "function_name": "TFRecordWriter",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "TFRecordWriter"
            ],
            "torch": null,
            "tfjs": null
        },
        "tfrecordoptions": {
            "code": "tf.io.TFRecordOptions(compression_type=None,flush_mode=None,input_buffer_size=None,output_buffer_size=None,window_bits=None,compression_level=None,compression_method=None,mem_level=None,compression_strategy=None)",
            "function_name": "TFRecordOptions",
            "args": [
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "flush_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "input_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "window_bits",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compression_level",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compression_method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "mem_level",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compression_strategy",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "TFRecordOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "serialize_tensor": {
            "code": "tf.io.serialize_tensor(tensor,name=None)",
            "function_name": "serialize_tensor",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "serialize_tensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "read_file": {
            "code": "tf.io.read_file(filename,name=None)",
            "function_name": "read_file",
            "args": [
                {
                    "name": "filename",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "read_file"
            ],
            "torch": null,
            "tfjs": null
        },
        "serialize_many_sparse": {
            "code": "tf.io.serialize_many_sparse(sp_input,out_type=tf.dtypes.string,name=None)",
            "function_name": "serialize_many_sparse",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "serialize_many_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "serialize_sparse": {
            "code": "tf.io.serialize_sparse(sp_input,out_type=tf.dtypes.string,name=None)",
            "function_name": "serialize_sparse",
            "args": [
                {
                    "name": "sp_input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "serialize_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "parse_sequence_example": {
            "code": "tf.io.parse_sequence_example(serialized,context_features=None,sequence_features=None,example_names=None,name=None)",
            "function_name": "parse_sequence_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "context_features",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sequence_features",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "example_names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_sequence_example"
            ],
            "torch": null,
            "tfjs": null
        },
        "parse_single_example": {
            "code": "tf.io.parse_single_example(serialized,features,example_names=None,name=None)",
            "function_name": "parse_single_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "example_names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_single_example"
            ],
            "torch": null,
            "tfjs": null
        },
        "parse_tensor": {
            "code": "tf.io.parse_tensor(serialized,out_type,name=None)",
            "function_name": "parse_tensor",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_tensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "parse_single_sequence_example": {
            "code": "tf.io.parse_single_sequence_example(serialized,context_features=None,sequence_features=None,example_name=None,name=None)",
            "function_name": "parse_single_sequence_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "context_features",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sequence_features",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "example_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_single_sequence_example"
            ],
            "torch": null,
            "tfjs": null
        },
        "parse_example": {
            "code": "tf.io.parse_example(serialized,features,example_names=None,name=None)",
            "function_name": "parse_example",
            "args": [
                {
                    "name": "serialized",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "example_names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "parse_example"
            ],
            "torch": null,
            "tfjs": null
        },
        "matching_files": {
            "code": "tf.io.matching_files(pattern,name=None)",
            "function_name": "matching_files",
            "args": [
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "matching_files"
            ],
            "torch": null,
            "tfjs": null
        },
        "match_filenames_once": {
            "code": "tf.io.match_filenames_once(pattern,name=None)",
            "function_name": "match_filenames_once",
            "args": [
                {
                    "name": "pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "match_filenames_once"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_jpeg": {
            "code": "tf.io.is_jpeg(contents,name=None)",
            "function_name": "is_jpeg",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "is_jpeg"
            ],
            "torch": null,
            "tfjs": null
        },
        "encode_proto": {
            "code": "tf.io.encode_proto(sizes,values,field_names,message_type,descriptor_source='local://',name=None)",
            "function_name": "encode_proto",
            "args": [
                {
                    "name": "sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "field_names",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "message_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "descriptor_source",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "encode_proto"
            ],
            "torch": null,
            "tfjs": null
        },
        "extract_jpeg_shape": {
            "code": "tf.io.extract_jpeg_shape(contents,output_type=tf.dtypes.int32,name=None)",
            "function_name": "extract_jpeg_shape",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "extract_jpeg_shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "encode_jpeg": {
            "code": "tf.io.encode_jpeg(image,format='',quality=95,progressive=False,optimize_size=False,chroma_downsampling=True,density_unit='in',x_density=300,y_density=300,xmp_metadata='',name=None)",
            "function_name": "encode_jpeg",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "quality",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progressive",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimize_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "chroma_downsampling",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "density_unit",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "x_density",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "y_density",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "xmp_metadata",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "encode_jpeg"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_proto": {
            "code": "tf.io.decode_proto(bytes,message_type,field_names,output_types,descriptor_source='local://',message_format='binary',sanitize=False,name=None)",
            "function_name": "decode_proto",
            "args": [
                {
                    "name": "bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "field_names",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "output_types",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "descriptor_source",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "message_format",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sanitize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_proto"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_png": {
            "code": "tf.io.decode_png(contents,channels=0,dtype=tf.dtypes.uint8,name=None)",
            "function_name": "decode_png",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_png"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_raw": {
            "code": "tf.io.decode_raw(input_bytes,out_type,little_endian=True,fixed_length=None,name=None)",
            "function_name": "decode_raw",
            "args": [
                {
                    "name": "input_bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "little_endian",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fixed_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_raw"
            ],
            "torch": null,
            "tfjs": null
        },
        "encode_base64": {
            "code": "tf.io.encode_base64(input,pad=False,name=None)",
            "function_name": "encode_base64",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pad",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "encode_base64"
            ],
            "torch": null,
            "tfjs": null
        },
        "deserialize_many_sparse": {
            "code": "tf.io.deserialize_many_sparse(serialized_sparse,dtype,rank=None,name=None)",
            "function_name": "deserialize_many_sparse",
            "args": [
                {
                    "name": "serialized_sparse",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "rank",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "deserialize_many_sparse"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_json_example": {
            "code": "tf.io.decode_json_example(json_examples,name=None)",
            "function_name": "decode_json_example",
            "args": [
                {
                    "name": "json_examples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_json_example"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_image": {
            "code": "tf.io.decode_image(contents,channels=None,dtype=tf.dtypes.uint8,name=None,expand_animations=True)",
            "function_name": "decode_image",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "expand_animations",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_image"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_jpeg": {
            "code": "tf.io.decode_jpeg(contents,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)",
            "function_name": "decode_jpeg",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ratio",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fancy_upscaling",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "try_recover_truncated",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "acceptable_fraction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dct_method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_jpeg"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_csv": {
            "code": "tf.io.decode_csv(records,record_defaults,field_delim=',',use_quote_delim=True,na_value='',select_cols=None,name=None)",
            "function_name": "decode_csv",
            "args": [
                {
                    "name": "records",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "record_defaults",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "field_delim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_quote_delim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "na_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "select_cols",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_csv"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_gif": {
            "code": "tf.io.decode_gif(contents,name=None)",
            "function_name": "decode_gif",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_gif"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_compressed": {
            "code": "tf.io.decode_compressed(bytes,compression_type='',name=None)",
            "function_name": "decode_compressed",
            "args": [
                {
                    "name": "bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_compressed"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_and_crop_jpeg": {
            "code": "tf.io.decode_and_crop_jpeg(contents,crop_window,channels=0,ratio=1,fancy_upscaling=True,try_recover_truncated=False,acceptable_fraction=1,dct_method='',name=None)",
            "function_name": "decode_and_crop_jpeg",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "crop_window",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ratio",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fancy_upscaling",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "try_recover_truncated",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "acceptable_fraction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dct_method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_and_crop_jpeg"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_base64": {
            "code": "tf.io.decode_base64(input,name=None)",
            "function_name": "decode_base64",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_base64"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_bmp": {
            "code": "tf.io.decode_bmp(contents,channels=0,name=None)",
            "function_name": "decode_bmp",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "channels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "io",
                "decode_bmp"
            ],
            "torch": null,
            "tfjs": null
        },
        "yiq_to_rgb": {
            "code": "tf.image.yiq_to_rgb(images)",
            "function_name": "yiq_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "yiq_to_rgb"
            ],
            "torch": null,
            "tfjs": null
        },
        "yuv_to_rgb": {
            "code": "tf.image.yuv_to_rgb(images)",
            "function_name": "yuv_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "yuv_to_rgb"
            ],
            "torch": null,
            "tfjs": null
        },
        "total_variation": {
            "code": "tf.image.total_variation(images,name=None)",
            "function_name": "total_variation",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "total_variation"
            ],
            "torch": null,
            "tfjs": null
        },
        "rot90": {
            "code": "tf.image.rot90(image,k=1,name=None)",
            "function_name": "rot90",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "k"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rot90"
            ],
            "torch": "rot90",
            "tfjs": null
        },
        "rgb_to_yuv": {
            "code": "tf.image.rgb_to_yuv(images)",
            "function_name": "rgb_to_yuv",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_yuv"
            ],
            "torch": null,
            "tfjs": null
        },
        "sobel_edges": {
            "code": "tf.image.sobel_edges(image)",
            "function_name": "sobel_edges",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "sobel_edges"
            ],
            "torch": null,
            "tfjs": null
        },
        "ssim_multiscale": {
            "code": "tf.image.ssim_multiscale(img1,img2,max_val,power_factors=_MSSSIM_WEIGHTS,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)",
            "function_name": "ssim_multiscale",
            "args": [
                {
                    "name": "img1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "img2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_val",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "power_factors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "filter_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "filter_sigma",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k1",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k2",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "ssim_multiscale"
            ],
            "torch": null,
            "tfjs": null
        },
        "rgb_to_yiq": {
            "code": "tf.image.rgb_to_yiq(images)",
            "function_name": "rgb_to_yiq",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_yiq"
            ],
            "torch": null,
            "tfjs": null
        },
        "sample_distorted_bounding_box": {
            "code": "tf.image.sample_distorted_bounding_box(image_size,bounding_boxes,seed=0,min_object_covered=0.1,aspect_ratio_range=None,area_range=None,max_attempts=None,use_image_if_no_bounding_boxes=None,name=None)",
            "function_name": "sample_distorted_bounding_box",
            "args": [
                {
                    "name": "image_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "bounding_boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_object_covered",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aspect_ratio_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "area_range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_attempts",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_image_if_no_bounding_boxes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "sample_distorted_bounding_box"
            ],
            "torch": null,
            "tfjs": null
        },
        "ssim": {
            "code": "tf.image.ssim(img1,img2,max_val,filter_size=11,filter_sigma=1.5,k1=0.01,k2=0.03)",
            "function_name": "ssim",
            "args": [
                {
                    "name": "img1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "img2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_val",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "filter_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "filter_sigma",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k1",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k2",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "ssim"
            ],
            "torch": null,
            "tfjs": null
        },
        "resize_with_pad": {
            "code": "tf.image.resize_with_pad(image,target_height,target_width,method=ResizeMethod.BILINEAR,antialias=False)",
            "function_name": "resize_with_pad",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "target_height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "target_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "antialias",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resize_with_pad"
            ],
            "torch": null,
            "tfjs": null
        },
        "rgb_to_hsv": {
            "code": "tf.image.rgb_to_hsv(images,name=None)",
            "function_name": "rgb_to_hsv",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_hsv"
            ],
            "torch": null,
            "tfjs": null
        },
        "rgb_to_grayscale": {
            "code": "tf.image.rgb_to_grayscale(images,name=None)",
            "function_name": "rgb_to_grayscale",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "rgb_to_grayscale"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_hue": {
            "code": "tf.image.random_hue(image,max_delta,seed=None)",
            "function_name": "random_hue",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "max_delta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_hue"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_saturation": {
            "code": "tf.image.random_saturation(image,lower,upper,seed=None)",
            "function_name": "random_saturation",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_saturation"
            ],
            "torch": null,
            "tfjs": null
        },
        "resize": {
            "code": "tf.image.resize(images,size,method=ResizeMethod.BILINEAR,preserve_aspect_ratio=False,antialias=False,name=None)",
            "function_name": "resize",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "size"
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "preserve_aspect_ratio",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "antialias",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resize"
            ],
            "torch": "resize",
            "tfjs": null
        },
        "random_flip_up_down": {
            "code": "tf.image.random_flip_up_down(image,seed=None)",
            "function_name": "random_flip_up_down",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_flip_up_down"
            ],
            "torch": null,
            "tfjs": null
        },
        "resize_with_crop_or_pad": {
            "code": "tf.image.resize_with_crop_or_pad(image,target_height,target_width)",
            "function_name": "resize_with_crop_or_pad",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "target_height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "target_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resize_with_crop_or_pad"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_crop": {
            "code": "tf.image.random_crop(value,size,seed=None,name=None)",
            "function_name": "random_crop",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_crop"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_flip_left_right": {
            "code": "tf.image.random_flip_left_right(image,seed=None)",
            "function_name": "random_flip_left_right",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_flip_left_right"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_jpeg_quality": {
            "code": "tf.image.random_jpeg_quality(image,min_jpeg_quality,max_jpeg_quality,seed=None)",
            "function_name": "random_jpeg_quality",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "min_jpeg_quality",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_jpeg_quality",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_jpeg_quality"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_contrast": {
            "code": "tf.image.random_contrast(image,lower,upper,seed=None)",
            "function_name": "random_contrast",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "upper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "random_contrast"
            ],
            "torch": null,
            "tfjs": null
        },
        "psnr": {
            "code": "tf.image.psnr(a,b,max_val,name=None)",
            "function_name": "psnr",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_val",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "psnr"
            ],
            "torch": null,
            "tfjs": null
        },
        "per_image_standardization": {
            "code": "tf.image.per_image_standardization(image)",
            "function_name": "per_image_standardization",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "per_image_standardization"
            ],
            "torch": null,
            "tfjs": null
        },
        "non_max_suppression_with_scores": {
            "code": "tf.image.non_max_suppression_with_scores(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),soft_nms_sigma=0.0,name=None)",
            "function_name": "non_max_suppression_with_scores",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "iou_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "score_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "soft_nms_sigma",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression_with_scores"
            ],
            "torch": null,
            "tfjs": null
        },
        "non_max_suppression_padded": {
            "code": "tf.image.non_max_suppression_padded(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_to_max_output_size=False,name=None)",
            "function_name": "non_max_suppression_padded",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "iou_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "score_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_to_max_output_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression_padded"
            ],
            "torch": null,
            "tfjs": null
        },
        "pad_to_bounding_box": {
            "code": "tf.image.pad_to_bounding_box(image,offset_height,offset_width,target_height,target_width)",
            "function_name": "pad_to_bounding_box",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "offset_height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "offset_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "target_height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "target_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "image",
                "pad_to_bounding_box"
            ],
            "torch": null,
            "tfjs": null
        },
        "non_max_suppression": {
            "code": "tf.image.non_max_suppression(boxes,scores,max_output_size,iou_threshold=0.5,score_threshold=float('-inf'),name=None)",
            "function_name": "non_max_suppression",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "iou_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "score_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression"
            ],
            "torch": null,
            "tfjs": null
        },
        "image_gradients": {
            "code": "tf.image.image_gradients(image)",
            "function_name": "image_gradients",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "image_gradients"
            ],
            "torch": null,
            "tfjs": null
        },
        "hsv_to_rgb": {
            "code": "tf.image.hsv_to_rgb(images,name=None)",
            "function_name": "hsv_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "hsv_to_rgb"
            ],
            "torch": null,
            "tfjs": null
        },
        "generate_bounding_box_proposals": {
            "code": "tf.image.generate_bounding_box_proposals(scores,bbox_deltas,image_info,anchors,nms_threshold=0.7,pre_nms_topn=6000,min_size=16,post_nms_topn=300,name=None)",
            "function_name": "generate_bounding_box_proposals",
            "args": [
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "bbox_deltas",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "image_info",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "anchors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "nms_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pre_nms_topn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "post_nms_topn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "generate_bounding_box_proposals"
            ],
            "torch": null,
            "tfjs": null
        },
        "grayscale_to_rgb": {
            "code": "tf.image.grayscale_to_rgb(images,name=None)",
            "function_name": "grayscale_to_rgb",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "grayscale_to_rgb"
            ],
            "torch": null,
            "tfjs": null
        },
        "extract_glimpse": {
            "code": "tf.image.extract_glimpse(input,size,offsets,centered=True,normalized=True,noise='uniform',name=None)",
            "function_name": "extract_glimpse",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "offsets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "centered",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "noise",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "extract_glimpse"
            ],
            "torch": null,
            "tfjs": null
        },
        "non_max_suppression_overlaps": {
            "code": "tf.image.non_max_suppression_overlaps(overlaps,scores,max_output_size,overlap_threshold=0.5,score_threshold=float('-inf'),name=None)",
            "function_name": "non_max_suppression_overlaps",
            "args": [
                {
                    "name": "overlaps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "overlap_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "score_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "non_max_suppression_overlaps"
            ],
            "torch": null,
            "tfjs": null
        },
        "draw_bounding_boxes": {
            "code": "tf.image.draw_bounding_boxes(images,boxes,colors,name=None)",
            "function_name": "draw_bounding_boxes",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "colors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "draw_bounding_boxes"
            ],
            "torch": null,
            "tfjs": null
        },
        "crop_to_bounding_box": {
            "code": "tf.image.crop_to_bounding_box(image,offset_height,offset_width,target_height,target_width)",
            "function_name": "crop_to_bounding_box",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "offset_height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "offset_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "target_height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "target_width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "image",
                "crop_to_bounding_box"
            ],
            "torch": null,
            "tfjs": null
        },
        "flip_left_right": {
            "code": "tf.image.flip_left_right(image)",
            "function_name": "flip_left_right",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "flip_left_right"
            ],
            "torch": null,
            "tfjs": null
        },
        "extract_patches": {
            "code": "tf.image.extract_patches(images,sizes,strides,rates,padding,name=None)",
            "function_name": "extract_patches",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "rates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "extract_patches"
            ],
            "torch": null,
            "tfjs": null
        },
        "encode_png": {
            "code": "tf.image.encode_png(image,compression=-1,name=None)",
            "function_name": "encode_png",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "compression",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "encode_png"
            ],
            "torch": null,
            "tfjs": null
        },
        "flip_up_down": {
            "code": "tf.image.flip_up_down(image)",
            "function_name": "flip_up_down",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "image",
                "flip_up_down"
            ],
            "torch": null,
            "tfjs": null
        },
        "crop_and_resize": {
            "code": "tf.image.crop_and_resize(image,boxes,box_indices,crop_size,method='bilinear',extrapolation_value=0,name=None)",
            "function_name": "crop_and_resize",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "box_indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "crop_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "extrapolation_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "crop_and_resize"
            ],
            "torch": null,
            "tfjs": null
        },
        "combined_non_max_suppression": {
            "code": "tf.image.combined_non_max_suppression(boxes,scores,max_output_size_per_class,max_total_size,iou_threshold=0.5,score_threshold=float('-inf'),pad_per_class=False,clip_boxes=True,name=None)",
            "function_name": "combined_non_max_suppression",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_output_size_per_class",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "max_total_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "iou_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "score_threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_per_class",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "clip_boxes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "combined_non_max_suppression"
            ],
            "torch": null,
            "tfjs": null
        },
        "convert_image_dtype": {
            "code": "tf.image.convert_image_dtype(image,dtype,saturate=False,name=None)",
            "function_name": "convert_image_dtype",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "saturate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "convert_image_dtype"
            ],
            "torch": null,
            "tfjs": null
        },
        "adjust_hue": {
            "code": "tf.image.adjust_hue(image,delta,name=None)",
            "function_name": "adjust_hue",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "delta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_hue"
            ],
            "torch": "adjust_hue",
            "tfjs": null
        },
        "adjust_saturation": {
            "code": "tf.image.adjust_saturation(image,saturation_factor,name=None)",
            "function_name": "adjust_saturation",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "saturation_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "saturation_factor"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_saturation"
            ],
            "torch": "adjust_saturation",
            "tfjs": null
        },
        "adjust_jpeg_quality": {
            "code": "tf.image.adjust_jpeg_quality(image,jpeg_quality,name=None)",
            "function_name": "adjust_jpeg_quality",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "jpeg_quality",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_jpeg_quality"
            ],
            "torch": null,
            "tfjs": null
        },
        "adjust_gamma": {
            "code": "tf.image.adjust_gamma(image,gamma=1,gain=1)",
            "function_name": "adjust_gamma",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "gamma"
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": "gain"
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_gamma"
            ],
            "torch": "adjust_gamma",
            "tfjs": null
        },
        "adjust_contrast": {
            "code": "tf.image.adjust_contrast(images,contrast_factor)",
            "function_name": "adjust_contrast",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "contrast_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "contrast_factor"
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_contrast"
            ],
            "torch": "adjust_contrast",
            "tfjs": null
        },
        "adjust_brightness": {
            "code": "tf.image.adjust_brightness(image,delta)",
            "function_name": "adjust_brightness",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "delta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "image",
                "adjust_brightness"
            ],
            "torch": "adjust_brightness",
            "tfjs": null
        },
        "central_crop": {
            "code": "tf.image.central_crop(image,central_fraction)",
            "function_name": "central_crop",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "central_fraction",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "image",
                "central_crop"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequence_categorical_column_with_vocabulary_list": {
            "code": "tf.feature_column.sequence_categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)",
            "function_name": "sequence_categorical_column_with_vocabulary_list",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vocabulary_list",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_oov_buckets",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_vocabulary_list"
            ],
            "torch": null,
            "tfjs": null
        },
        "import_graph_def": {
            "code": "tf.graph_util.import_graph_def(graph_def,input_map=None,return_elements=None,name=None,op_dict=None,producer_op_list=None)",
            "function_name": "import_graph_def",
            "args": [
                {
                    "name": "graph_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_map",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "return_elements",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "op_dict",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "producer_op_list",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "graph_util",
                "import_graph_def"
            ],
            "torch": null,
            "tfjs": null
        },
        "weighted_categorical_column": {
            "code": "tf.feature_column.weighted_categorical_column(categorical_column,weight_feature_key,dtype=tf.dtypes.float32)",
            "function_name": "weighted_categorical_column",
            "args": [
                {
                    "name": "categorical_column",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weight_feature_key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "weighted_categorical_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequence_numeric_column": {
            "code": "tf.feature_column.sequence_numeric_column(key,shape=(1,),default_value=0.0,dtype=tf.dtypes.float32,normalizer_fn=None)",
            "function_name": "sequence_numeric_column",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "normalizer_fn",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_numeric_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequence_categorical_column_with_identity": {
            "code": "tf.feature_column.sequence_categorical_column_with_identity(key,num_buckets,default_value=None)",
            "function_name": "sequence_categorical_column_with_identity",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_buckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_identity"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequence_categorical_column_with_vocabulary_file": {
            "code": "tf.feature_column.sequence_categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,num_oov_buckets=0,default_value=None,dtype=tf.dtypes.string)",
            "function_name": "sequence_categorical_column_with_vocabulary_file",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vocabulary_file",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "vocabulary_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_oov_buckets",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_vocabulary_file"
            ],
            "torch": null,
            "tfjs": null
        },
        "shared_embeddings": {
            "code": "tf.feature_column.shared_embeddings(categorical_columns,dimension,combiner='mean',initializer=None,shared_embedding_collection_name=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)",
            "function_name": "shared_embeddings",
            "args": [
                {
                    "name": "categorical_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dimension",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shared_embedding_collection_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ckpt_to_load_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tensor_name_in_ckpt",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "shared_embeddings"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequence_categorical_column_with_hash_bucket": {
            "code": "tf.feature_column.sequence_categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)",
            "function_name": "sequence_categorical_column_with_hash_bucket",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "hash_bucket_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "sequence_categorical_column_with_hash_bucket"
            ],
            "torch": null,
            "tfjs": null
        },
        "numeric_column": {
            "code": "tf.feature_column.numeric_column(key,shape=(1,),default_value=None,dtype=tf.dtypes.float32,normalizer_fn=None)",
            "function_name": "numeric_column",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "normalizer_fn",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "numeric_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_parse_example_spec": {
            "code": "tf.feature_column.make_parse_example_spec(feature_columns)",
            "function_name": "make_parse_example_spec",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "make_parse_example_spec"
            ],
            "torch": null,
            "tfjs": null
        },
        "crossed_column": {
            "code": "tf.feature_column.crossed_column(keys,hash_bucket_size,hash_key=None)",
            "function_name": "crossed_column",
            "args": [
                {
                    "name": "keys",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "hash_bucket_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "hash_key",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "crossed_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "indicator_column": {
            "code": "tf.feature_column.indicator_column(categorical_column)",
            "function_name": "indicator_column",
            "args": [
                {
                    "name": "categorical_column",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "indicator_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "embedding_column": {
            "code": "tf.feature_column.embedding_column(categorical_column,dimension,combiner='mean',initializer=None,ckpt_to_load_from=None,tensor_name_in_ckpt=None,max_norm=None,trainable=True)",
            "function_name": "embedding_column",
            "args": [
                {
                    "name": "categorical_column",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dimension",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "combiner",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ckpt_to_load_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tensor_name_in_ckpt",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "trainable",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "embedding_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_column_with_identity": {
            "code": "tf.feature_column.categorical_column_with_identity(key,num_buckets,default_value=None)",
            "function_name": "categorical_column_with_identity",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_buckets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_identity"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_column_with_vocabulary_list": {
            "code": "tf.feature_column.categorical_column_with_vocabulary_list(key,vocabulary_list,dtype=None,default_value=-1,num_oov_buckets=0)",
            "function_name": "categorical_column_with_vocabulary_list",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vocabulary_list",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_oov_buckets",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_vocabulary_list"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_column_with_vocabulary_file": {
            "code": "tf.feature_column.categorical_column_with_vocabulary_file(key,vocabulary_file,vocabulary_size=None,dtype=tf.dtypes.string,default_value=None,num_oov_buckets=0)",
            "function_name": "categorical_column_with_vocabulary_file",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vocabulary_file",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "vocabulary_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "default_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_oov_buckets",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_vocabulary_file"
            ],
            "torch": null,
            "tfjs": null
        },
        "categorical_column_with_hash_bucket": {
            "code": "tf.feature_column.categorical_column_with_hash_bucket(key,hash_bucket_size,dtype=tf.dtypes.string)",
            "function_name": "categorical_column_with_hash_bucket",
            "args": [
                {
                    "name": "key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "hash_bucket_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "categorical_column_with_hash_bucket"
            ],
            "torch": null,
            "tfjs": null
        },
        "converter": {
            "code": "tf.experimental.tensorrt.Converter(input_saved_model_dir=None,input_saved_model_tags=None,input_saved_model_signature_key=None,conversion_params=DEFAULT_TRT_CONVERSION_PARAMS)",
            "function_name": "Converter",
            "args": [
                {
                    "name": "input_saved_model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "input_saved_model_tags",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "input_saved_model_signature_key",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "conversion_params",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "experimental",
                "tensorrt",
                "Converter"
            ],
            "torch": null,
            "tfjs": null
        },
        "bucketized_column": {
            "code": "tf.feature_column.bucketized_column(source_column,boundaries)",
            "function_name": "bucketized_column",
            "args": [
                {
                    "name": "source_column",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "boundaries",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "feature_column",
                "bucketized_column"
            ],
            "torch": null,
            "tfjs": null
        },
        "build_parsing_serving_input_receiver_fn": {
            "code": "tf.estimator.export.build_parsing_serving_input_receiver_fn(feature_spec,default_batch_size=None)",
            "function_name": "build_parsing_serving_input_receiver_fn",
            "args": [
                {
                    "name": "feature_spec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "default_batch_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "build_parsing_serving_input_receiver_fn"
            ],
            "torch": null,
            "tfjs": null
        },
        "regressionoutput": {
            "code": "tf.estimator.export.RegressionOutput(value)",
            "function_name": "RegressionOutput",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "RegressionOutput"
            ],
            "torch": null,
            "tfjs": null
        },
        "predictoutput": {
            "code": "tf.estimator.export.PredictOutput(outputs)",
            "function_name": "PredictOutput",
            "args": [
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "PredictOutput"
            ],
            "torch": null,
            "tfjs": null
        },
        "classificationoutput": {
            "code": "tf.estimator.export.ClassificationOutput(scores=None,classes=None)",
            "function_name": "ClassificationOutput",
            "args": [
                {
                    "name": "scores",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "classes",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "ClassificationOutput"
            ],
            "torch": null,
            "tfjs": null
        },
        "as_signature_def": {
            "code": "as_signature_def(receiver_tensors)",
            "function_name": "as_signature_def",
            "args": [
                {
                    "name": "receiver_tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "as_signature_def"
            ],
            "torch": null,
            "tfjs": null
        },
        "stop_if_no_increase_hook": {
            "code": "tf.estimator.experimental.stop_if_no_increase_hook(estimator,metric_name,max_steps_without_increase,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_no_increase_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "metric_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_steps_without_increase",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "eval_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_steps",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_no_increase_hook"
            ],
            "torch": null,
            "tfjs": null
        },
        "build_raw_serving_input_receiver_fn": {
            "code": "tf.estimator.export.build_raw_serving_input_receiver_fn(features,default_batch_size=None)",
            "function_name": "build_raw_serving_input_receiver_fn",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "default_batch_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "export",
                "build_raw_serving_input_receiver_fn"
            ],
            "torch": null,
            "tfjs": null
        },
        "stop_if_higher_hook": {
            "code": "tf.estimator.experimental.stop_if_higher_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_higher_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "metric_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "eval_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_steps",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_higher_hook"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_stop_at_checkpoint_step_hook": {
            "code": "tf.estimator.experimental.make_stop_at_checkpoint_step_hook(estimator,last_step,wait_after_file_check_secs=30)",
            "function_name": "make_stop_at_checkpoint_step_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "last_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "wait_after_file_check_secs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "make_stop_at_checkpoint_step_hook"
            ],
            "torch": null,
            "tfjs": null
        },
        "stop_if_no_decrease_hook": {
            "code": "tf.estimator.experimental.stop_if_no_decrease_hook(estimator,metric_name,max_steps_without_decrease,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_no_decrease_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "metric_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max_steps_without_decrease",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "eval_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_steps",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_no_decrease_hook"
            ],
            "torch": null,
            "tfjs": null
        },
        "rnnestimator": {
            "code": "tf.estimator.experimental.RNNEstimator(head,sequence_feature_columns,context_feature_columns=None,units=None,cell_type=USE_DEFAULT,rnn_cell_fn=None,return_sequences=False,model_dir=None,optimizer='Adagrad',config=None)",
            "function_name": "RNNEstimator",
            "args": [
                {
                    "name": "head",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sequence_feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "context_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "units",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cell_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rnn_cell_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "return_sequences",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "RNNEstimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "rnnclassifier": {
            "code": "tf.estimator.experimental.RNNClassifier(sequence_feature_columns,context_feature_columns=None,units=None,cell_type=USE_DEFAULT,rnn_cell_fn=None,return_sequences=False,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Adagrad',loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,sequence_mask='sequence_mask',config=None)",
            "function_name": "RNNClassifier",
            "args": [
                {
                    "name": "sequence_feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "context_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "units",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cell_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rnn_cell_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "return_sequences",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sequence_mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "RNNClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearsdca": {
            "code": "tf.estimator.experimental.LinearSDCA(example_id_column,num_loss_partitions=1,num_table_shards=None,symmetric_l1_regularization=0.0,symmetric_l2_regularization=1.0,adaptive=False)",
            "function_name": "LinearSDCA",
            "args": [
                {
                    "name": "example_id_column",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_loss_partitions",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_table_shards",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "symmetric_l1_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "symmetric_l2_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "adaptive",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "LinearSDCA"
            ],
            "torch": null,
            "tfjs": null
        },
        "stop_if_lower_hook": {
            "code": "tf.estimator.experimental.stop_if_lower_hook(estimator,metric_name,threshold,eval_dir=None,min_steps=0,run_every_secs=60,run_every_steps=None)",
            "function_name": "stop_if_lower_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "metric_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "eval_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_steps",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "stop_if_lower_hook"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_early_stopping_hook": {
            "code": "tf.estimator.experimental.make_early_stopping_hook(estimator,should_stop_fn,run_every_secs=60,run_every_steps=None)",
            "function_name": "make_early_stopping_hook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "should_stop_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "run_every_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "run_every_steps",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "make_early_stopping_hook"
            ],
            "torch": null,
            "tfjs": null
        },
        "inmemoryevaluatorhook": {
            "code": "tf.estimator.experimental.InMemoryEvaluatorHook(estimator,input_fn,steps=None,hooks=None,name=None,every_n_iter=100)",
            "function_name": "InMemoryEvaluatorHook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "hooks",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "every_n_iter",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "InMemoryEvaluatorHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "build_raw_supervised_input_receiver_fn": {
            "code": "tf.estimator.experimental.build_raw_supervised_input_receiver_fn(features,labels,default_batch_size=None)",
            "function_name": "build_raw_supervised_input_receiver_fn",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "default_batch_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "build_raw_supervised_input_receiver_fn"
            ],
            "torch": null,
            "tfjs": null
        },
        "call_logit_fn": {
            "code": "tf.estimator.experimental.call_logit_fn(logit_fn,features,mode,params,config)",
            "function_name": "call_logit_fn",
            "args": [
                {
                    "name": "logit_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "experimental",
                "call_logit_fn"
            ],
            "torch": null,
            "tfjs": null
        },
        "stepcounterhook": {
            "code": "tf.estimator.StepCounterHook(every_n_steps=100,every_n_secs=None,output_dir=None,summary_writer=None)",
            "function_name": "StepCounterHook",
            "args": [
                {
                    "name": "every_n_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "every_n_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summary_writer",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "StepCounterHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "train_and_evaluate": {
            "code": "tf.estimator.train_and_evaluate(estimator,train_spec,eval_spec)",
            "function_name": "train_and_evaluate",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "train_spec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "eval_spec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "train_and_evaluate"
            ],
            "torch": null,
            "tfjs": null
        },
        "summarysaverhook": {
            "code": "tf.estimator.SummarySaverHook(save_steps=None,save_secs=None,output_dir=None,summary_writer=None,scaffold=None,summary_op=None)",
            "function_name": "SummarySaverHook",
            "args": [
                {
                    "name": "save_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summary_writer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scaffold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summary_op",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "SummarySaverHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "stopatstephook": {
            "code": "tf.estimator.StopAtStepHook(num_steps=None,last_step=None)",
            "function_name": "StopAtStepHook",
            "args": [
                {
                    "name": "num_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "last_step",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "StopAtStepHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "after_create_session": {
            "code": "after_create_session(session,coord)",
            "function_name": "after_create_session",
            "args": [
                {
                    "name": "session",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "coord",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "after_create_session"
            ],
            "torch": null,
            "tfjs": null
        },
        "sessionruncontext": {
            "code": "tf.estimator.SessionRunContext(original_args,session)",
            "function_name": "SessionRunContext",
            "args": [
                {
                    "name": "original_args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "session",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "SessionRunContext"
            ],
            "torch": null,
            "tfjs": null
        },
        "runconfig": {
            "code": "tf.estimator.RunConfig(model_dir=None,tf_random_seed=None,save_summary_steps=100,save_checkpoints_steps=_USE_DEFAULT,save_checkpoints_secs=_USE_DEFAULT,session_config=None,keep_checkpoint_max=5,keep_checkpoint_every_n_hours=10000,log_step_count_steps=100,train_distribute=None,device_fn=None,protocol=None,eval_distribute=None,experimental_distribute=None,experimental_max_worker_delay_secs=None,session_creation_timeout_secs=7200)",
            "function_name": "RunConfig",
            "args": [
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tf_random_seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_summary_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_checkpoints_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_checkpoints_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "session_config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keep_checkpoint_max",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keep_checkpoint_every_n_hours",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "log_step_count_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "train_distribute",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "protocol",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "eval_distribute",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_distribute",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_max_worker_delay_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "session_creation_timeout_secs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "RunConfig"
            ],
            "torch": null,
            "tfjs": null
        },
        "regressionhead": {
            "code": "tf.estimator.RegressionHead(label_dimension=1,weight_column=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,loss_fn=None,inverse_link_fn=None,name=None)",
            "function_name": "RegressionHead",
            "args": [
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inverse_link_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "RegressionHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "poissonregressionhead": {
            "code": "tf.estimator.PoissonRegressionHead(label_dimension=1,weight_column=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,compute_full_loss=True,name=None)",
            "function_name": "PoissonRegressionHead",
            "args": [
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compute_full_loss",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "PoissonRegressionHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "secondorsteptimer": {
            "code": "tf.estimator.SecondOrStepTimer(every_secs=None,every_steps=None)",
            "function_name": "SecondOrStepTimer",
            "args": [
                {
                    "name": "every_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "every_steps",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "SecondOrStepTimer"
            ],
            "torch": null,
            "tfjs": null
        },
        "regressor_parse_example_spec": {
            "code": "tf.estimator.regressor_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.float32,label_default=None,label_dimension=1,weight_column=None)",
            "function_name": "regressor_parse_example_spec",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "label_key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "label_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_default",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "regressor_parse_example_spec"
            ],
            "torch": null,
            "tfjs": null
        },
        "nantensorhook": {
            "code": "tf.estimator.NanTensorHook(loss_tensor,fail_on_nan_loss=True)",
            "function_name": "NanTensorHook",
            "args": [
                {
                    "name": "loss_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fail_on_nan_loss",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "NanTensorHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "profilerhook": {
            "code": "tf.estimator.ProfilerHook(save_steps=None,save_secs=None,output_dir='',show_dataflow=True,show_memory=False)",
            "function_name": "ProfilerHook",
            "args": [
                {
                    "name": "save_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "show_dataflow",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "show_memory",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "ProfilerHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "nanlossduringtrainingerror": {
            "code": "tf.estimator.NanLossDuringTrainingError(*args,**kwargs)",
            "function_name": "NanLossDuringTrainingError",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "NanLossDuringTrainingError"
            ],
            "torch": null,
            "tfjs": null
        },
        "multihead": {
            "code": "tf.estimator.MultiHead(heads,head_weights=None)",
            "function_name": "MultiHead",
            "args": [
                {
                    "name": "heads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "head_weights",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "MultiHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "multiclasshead": {
            "code": "tf.estimator.MultiClassHead(n_classes,weight_column=None,label_vocabulary=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)",
            "function_name": "MultiClassHead",
            "args": [
                {
                    "name": "n_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "MultiClassHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "multilabelhead": {
            "code": "tf.estimator.MultiLabelHead(n_classes,weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,loss_fn=None,classes_for_class_based_metrics=None,name=None)",
            "function_name": "MultiLabelHead",
            "args": [
                {
                    "name": "n_classes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "classes_for_class_based_metrics",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "MultiLabelHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "loggingtensorhook": {
            "code": "tf.estimator.LoggingTensorHook(tensors,every_n_iter=None,every_n_secs=None,at_end=False,formatter=None)",
            "function_name": "LoggingTensorHook",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "every_n_iter",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "every_n_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "at_end",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "formatter",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "LoggingTensorHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "logisticregressionhead": {
            "code": "tf.estimator.LogisticRegressionHead(weight_column=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,name=None)",
            "function_name": "LogisticRegressionHead",
            "args": [
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "LogisticRegressionHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearregressor": {
            "code": "tf.estimator.LinearRegressor(feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Ftrl',config=None,warm_start_from=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,sparse_combiner='sum')",
            "function_name": "LinearRegressor",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sparse_combiner",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "LinearRegressor"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearestimator": {
            "code": "tf.estimator.LinearEstimator(head,feature_columns,model_dir=None,optimizer='Ftrl',config=None,sparse_combiner='sum')",
            "function_name": "LinearEstimator",
            "args": [
                {
                    "name": "head",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sparse_combiner",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "LinearEstimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "latestexporter": {
            "code": "tf.estimator.LatestExporter(name,serving_input_receiver_fn,assets_extra=None,as_text=False,exports_to_keep=5)",
            "function_name": "LatestExporter",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "serving_input_receiver_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "assets_extra",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "as_text",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "exports_to_keep",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "LatestExporter"
            ],
            "torch": null,
            "tfjs": null
        },
        "linearclassifier": {
            "code": "tf.estimator.LinearClassifier(feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Ftrl',config=None,warm_start_from=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,sparse_combiner='sum')",
            "function_name": "LinearClassifier",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sparse_combiner",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "LinearClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "create_estimator_spec": {
            "code": "create_estimator_spec(features,mode,logits,labels=None,optimizer=None,trainable_variables=None,train_op_fn=None,update_ops=None,regularization_losses=None)",
            "function_name": "create_estimator_spec",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "labels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "trainable_variables",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "train_op_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "update_ops",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "regularization_losses",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "create_estimator_spec"
            ],
            "torch": null,
            "tfjs": null
        },
        "globalstepwaiterhook": {
            "code": "tf.estimator.GlobalStepWaiterHook(wait_until_step)",
            "function_name": "GlobalStepWaiterHook",
            "args": [
                {
                    "name": "wait_until_step",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "GlobalStepWaiterHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "feedfnhook": {
            "code": "tf.estimator.FeedFnHook(feed_fn)",
            "function_name": "FeedFnHook",
            "args": [
                {
                    "name": "feed_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "FeedFnHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "finalexporter": {
            "code": "tf.estimator.FinalExporter(name,serving_input_receiver_fn,assets_extra=None,as_text=False)",
            "function_name": "FinalExporter",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "serving_input_receiver_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "assets_extra",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "as_text",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "FinalExporter"
            ],
            "torch": null,
            "tfjs": null
        },
        "export": {
            "code": "export(estimator,export_path,checkpoint_path,eval_result,is_the_final_export)",
            "function_name": "export",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "export_path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "checkpoint_path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "eval_result",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null
                },
                {
                    "name": "is_the_final_export",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "torch": null
                }
            ],
            "attrs": [
                "export"
            ],
            "torch": "export",
            "tfjs": null
        },
        "finalopshook": {
            "code": "tf.estimator.FinalOpsHook(final_ops,final_ops_feed_dict=None)",
            "function_name": "FinalOpsHook",
            "args": [
                {
                    "name": "final_ops",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "final_ops_feed_dict",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "FinalOpsHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "estimator": {
            "code": "tf.estimator.Estimator(model_fn,model_dir=None,config=None,params=None,warm_start_from=None)",
            "function_name": "Estimator",
            "args": [
                {
                    "name": "model_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "params",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "Estimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "dnnregressor": {
            "code": "tf.estimator.DNNRegressor(hidden_units,feature_columns,model_dir=None,label_dimension=1,weight_column=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,config=None,warm_start_from=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,batch_norm=False)",
            "function_name": "DNNRegressor",
            "args": [
                {
                    "name": "hidden_units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_norm",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "DNNRegressor"
            ],
            "torch": null,
            "tfjs": null
        },
        "dnnlinearcombinedregressor": {
            "code": "tf.estimator.DNNLinearCombinedRegressor(model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,label_dimension=1,weight_column=None,config=None,warm_start_from=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,batch_norm=False,linear_sparse_combiner='sum')",
            "function_name": "DNNLinearCombinedRegressor",
            "args": [
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_hidden_units",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_activation_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_sparse_combiner",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "DNNLinearCombinedRegressor"
            ],
            "torch": null,
            "tfjs": null
        },
        "dnnlinearcombinedestimator": {
            "code": "tf.estimator.DNNLinearCombinedEstimator(head,model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,config=None,linear_sparse_combiner='sum')",
            "function_name": "DNNLinearCombinedEstimator",
            "args": [
                {
                    "name": "head",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_hidden_units",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_activation_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_sparse_combiner",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "DNNLinearCombinedEstimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "dnnlinearcombinedclassifier": {
            "code": "tf.estimator.DNNLinearCombinedClassifier(model_dir=None,linear_feature_columns=None,linear_optimizer='Ftrl',dnn_feature_columns=None,dnn_optimizer='Adagrad',dnn_hidden_units=None,dnn_activation_fn=tf.nn.relu,dnn_dropout=None,n_classes=2,weight_column=None,label_vocabulary=None,config=None,warm_start_from=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,batch_norm=False,linear_sparse_combiner='sum')",
            "function_name": "DNNLinearCombinedClassifier",
            "args": [
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_feature_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_hidden_units",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_activation_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dnn_dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linear_sparse_combiner",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "DNNLinearCombinedClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "dnnestimator": {
            "code": "tf.estimator.DNNEstimator(head,hidden_units,feature_columns,model_dir=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,config=None,warm_start_from=None,batch_norm=False)",
            "function_name": "DNNEstimator",
            "args": [
                {
                    "name": "head",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "hidden_units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_norm",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "DNNEstimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "checkpointsaverhook": {
            "code": "tf.estimator.CheckpointSaverHook(checkpoint_dir,save_secs=None,save_steps=None,saver=None,checkpoint_basename='model.ckpt',scaffold=None,listeners=None,save_graph_def=True)",
            "function_name": "CheckpointSaverHook",
            "args": [
                {
                    "name": "checkpoint_dir",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "save_secs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "saver",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "checkpoint_basename",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scaffold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "listeners",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_graph_def",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "CheckpointSaverHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "classifier_parse_example_spec": {
            "code": "tf.estimator.classifier_parse_example_spec(feature_columns,label_key,label_dtype=tf.dtypes.int64,label_default=None,weight_column=None)",
            "function_name": "classifier_parse_example_spec",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "label_key",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "label_dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_default",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "classifier_parse_example_spec"
            ],
            "torch": null,
            "tfjs": null
        },
        "dnnclassifier": {
            "code": "tf.estimator.DNNClassifier(hidden_units,feature_columns,model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Adagrad',activation_fn=tf.nn.relu,dropout=None,config=None,warm_start_from=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,batch_norm=False)",
            "function_name": "DNNClassifier",
            "args": [
                {
                    "name": "hidden_units",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "activation_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dropout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "warm_start_from",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_norm",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "DNNClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "boostedtreesregressor": {
            "code": "tf.estimator.BoostedTreesRegressor(feature_columns,n_batches_per_layer,model_dir=None,label_dimension=_HOLD_FOR_MULTI_DIM_SUPPORT,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01,train_in_memory=False)",
            "function_name": "BoostedTreesRegressor",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "n_batches_per_layer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_trees",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_depth",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l1_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tree_complexity",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_node_weight",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "center_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pruning_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "quantile_sketch_epsilon",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "train_in_memory",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BoostedTreesRegressor"
            ],
            "torch": null,
            "tfjs": null
        },
        "boostedtreesestimator": {
            "code": "tf.estimator.BoostedTreesEstimator(feature_columns,n_batches_per_layer,head,model_dir=None,weight_column=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01)",
            "function_name": "BoostedTreesEstimator",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "n_batches_per_layer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "head",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_trees",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_depth",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l1_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tree_complexity",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_node_weight",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "center_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pruning_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "quantile_sketch_epsilon",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BoostedTreesEstimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "boostedtreesclassifier": {
            "code": "tf.estimator.BoostedTreesClassifier(feature_columns,n_batches_per_layer,model_dir=None,n_classes=_HOLD_FOR_MULTI_CLASS_SUPPORT,weight_column=None,label_vocabulary=None,n_trees=100,max_depth=6,learning_rate=0.1,l1_regularization=0.0,l2_regularization=0.0,tree_complexity=0.0,min_node_weight=0.0,config=None,center_bias=False,pruning_mode='none',quantile_sketch_epsilon=0.01,train_in_memory=False)",
            "function_name": "BoostedTreesClassifier",
            "args": [
                {
                    "name": "feature_columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "n_batches_per_layer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_trees",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_depth",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "learning_rate",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l1_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "l2_regularization",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tree_complexity",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min_node_weight",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "center_bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pruning_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "quantile_sketch_epsilon",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "train_in_memory",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BoostedTreesClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "baselineregressor": {
            "code": "tf.estimator.BaselineRegressor(model_dir=None,label_dimension=1,weight_column=None,optimizer='Ftrl',config=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE)",
            "function_name": "BaselineRegressor",
            "args": [
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_dimension",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BaselineRegressor"
            ],
            "torch": null,
            "tfjs": null
        },
        "bestexporter": {
            "code": "tf.estimator.BestExporter(name='best_exporter',serving_input_receiver_fn=None,event_file_pattern='eval/*.tfevents.*',compare_fn=_loss_smaller,assets_extra=None,as_text=False,exports_to_keep=5)",
            "function_name": "BestExporter",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "serving_input_receiver_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "event_file_pattern",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compare_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "assets_extra",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "as_text",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "exports_to_keep",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BestExporter"
            ],
            "torch": null,
            "tfjs": null
        },
        "add_metrics": {
            "code": "tf.estimator.add_metrics(estimator,metric_fn)",
            "function_name": "add_metrics",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "metric_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "add_metrics"
            ],
            "torch": null,
            "tfjs": null
        },
        "baselineestimator": {
            "code": "tf.estimator.BaselineEstimator(head,model_dir=None,optimizer='Ftrl',config=None)",
            "function_name": "BaselineEstimator",
            "args": [
                {
                    "name": "head",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BaselineEstimator"
            ],
            "torch": null,
            "tfjs": null
        },
        "binaryclasshead": {
            "code": "tf.estimator.BinaryClassHead(weight_column=None,thresholds=None,label_vocabulary=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE,loss_fn=None,name=None)",
            "function_name": "BinaryClassHead",
            "args": [
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "thresholds",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BinaryClassHead"
            ],
            "torch": null,
            "tfjs": null
        },
        "baselineclassifier": {
            "code": "tf.estimator.BaselineClassifier(model_dir=None,n_classes=2,weight_column=None,label_vocabulary=None,optimizer='Ftrl',config=None,loss_reduction=losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE)",
            "function_name": "BaselineClassifier",
            "args": [
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "n_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "weight_column",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_vocabulary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "optimizer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "loss_reduction",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "estimator",
                "BaselineClassifier"
            ],
            "torch": null,
            "tfjs": null
        },
        "unknownerror": {
            "code": "tf.errors.UnknownError(node_def,op,message,error_code=UNKNOWN)",
            "function_name": "UnknownError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "error_code",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "UnknownError"
            ],
            "torch": null,
            "tfjs": null
        },
        "unimplementederror": {
            "code": "tf.errors.UnimplementedError(node_def,op,message)",
            "function_name": "UnimplementedError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "UnimplementedError"
            ],
            "torch": null,
            "tfjs": null
        },
        "invalidargumenterror": {
            "code": "tf.errors.InvalidArgumentError(node_def,op,message)",
            "function_name": "InvalidArgumentError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "InvalidArgumentError"
            ],
            "torch": null,
            "tfjs": null
        },
        "resourceexhaustederror": {
            "code": "tf.errors.ResourceExhaustedError(node_def,op,message)",
            "function_name": "ResourceExhaustedError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "ResourceExhaustedError"
            ],
            "torch": null,
            "tfjs": null
        },
        "unavailableerror": {
            "code": "tf.errors.UnavailableError(node_def,op,message)",
            "function_name": "UnavailableError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "UnavailableError"
            ],
            "torch": null,
            "tfjs": null
        },
        "unauthenticatederror": {
            "code": "tf.errors.UnauthenticatedError(node_def,op,message)",
            "function_name": "UnauthenticatedError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "UnauthenticatedError"
            ],
            "torch": null,
            "tfjs": null
        },
        "outofrangeerror": {
            "code": "tf.errors.OutOfRangeError(node_def,op,message)",
            "function_name": "OutOfRangeError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "OutOfRangeError"
            ],
            "torch": null,
            "tfjs": null
        },
        "permissiondeniederror": {
            "code": "tf.errors.PermissionDeniedError(node_def,op,message)",
            "function_name": "PermissionDeniedError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "PermissionDeniedError"
            ],
            "torch": null,
            "tfjs": null
        },
        "notfounderror": {
            "code": "tf.errors.NotFoundError(node_def,op,message)",
            "function_name": "NotFoundError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "NotFoundError"
            ],
            "torch": null,
            "tfjs": null
        },
        "operror": {
            "code": "tf.errors.OpError(node_def,op,message,error_code)",
            "function_name": "OpError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "error_code",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "OpError"
            ],
            "torch": null,
            "tfjs": null
        },
        "internalerror": {
            "code": "tf.errors.InternalError(node_def,op,message)",
            "function_name": "InternalError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "InternalError"
            ],
            "torch": null,
            "tfjs": null
        },
        "datalosserror": {
            "code": "tf.errors.DataLossError(node_def,op,message)",
            "function_name": "DataLossError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "DataLossError"
            ],
            "torch": null,
            "tfjs": null
        },
        "failedpreconditionerror": {
            "code": "tf.errors.FailedPreconditionError(node_def,op,message)",
            "function_name": "FailedPreconditionError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "FailedPreconditionError"
            ],
            "torch": null,
            "tfjs": null
        },
        "alreadyexistserror": {
            "code": "tf.errors.AlreadyExistsError(node_def,op,message)",
            "function_name": "AlreadyExistsError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "AlreadyExistsError"
            ],
            "torch": null,
            "tfjs": null
        },
        "saturate_cast": {
            "code": "tf.dtypes.saturate_cast(value,dtype,name=None)",
            "function_name": "saturate_cast",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "saturate_cast"
            ],
            "torch": null,
            "tfjs": null
        },
        "cancellederror": {
            "code": "tf.errors.CancelledError(node_def,op,message)",
            "function_name": "CancelledError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "CancelledError"
            ],
            "torch": null,
            "tfjs": null
        },
        "deadlineexceedederror": {
            "code": "tf.errors.DeadlineExceededError(node_def,op,message)",
            "function_name": "DeadlineExceededError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "DeadlineExceededError"
            ],
            "torch": null,
            "tfjs": null
        },
        "abortederror": {
            "code": "tf.errors.AbortedError(node_def,op,message)",
            "function_name": "AbortedError",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "errors",
                "AbortedError"
            ],
            "torch": null,
            "tfjs": null
        },
        "parameterserverstrategy": {
            "code": "tf.distribute.experimental.ParameterServerStrategy(cluster_resolver=None)",
            "function_name": "ParameterServerStrategy",
            "args": [
                {
                    "name": "cluster_resolver",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "experimental",
                "ParameterServerStrategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "complex": {
            "code": "tf.dtypes.complex(real,imag,name=None)",
            "function_name": "complex",
            "args": [
                {
                    "name": "real",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "real"
                },
                {
                    "name": "imag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "imag"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "complex"
            ],
            "torch": null,
            "tfjs": "complex"
        },
        "multiworkermirroredstrategy": {
            "code": "tf.distribute.experimental.MultiWorkerMirroredStrategy(communication=tf.distribute.experimental.CollectiveCommunication.AUTO,cluster_resolver=None)",
            "function_name": "MultiWorkerMirroredStrategy",
            "args": [
                {
                    "name": "communication",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cluster_resolver",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "experimental",
                "MultiWorkerMirroredStrategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "tpustrategy": {
            "code": "tf.distribute.experimental.TPUStrategy(tpu_cluster_resolver=None,device_assignment=None)",
            "function_name": "TPUStrategy",
            "args": [
                {
                    "name": "tpu_cluster_resolver",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device_assignment",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "experimental",
                "TPUStrategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "as_dtype": {
            "code": "tf.dtypes.as_dtype(type_value)",
            "function_name": "as_dtype",
            "args": [
                {
                    "name": "type_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "dtypes",
                "as_dtype"
            ],
            "torch": null,
            "tfjs": null
        },
        "unionresolver": {
            "code": "tf.distribute.cluster_resolver.UnionResolver(*args,**kwargs)",
            "function_name": "UnionResolver",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "UnionResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "tfconfigclusterresolver": {
            "code": "tf.distribute.cluster_resolver.TFConfigClusterResolver(task_type=None,task_id=None,rpc_layer=None,environment=None)",
            "function_name": "TFConfigClusterResolver",
            "args": [
                {
                    "name": "task_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task_id",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rpc_layer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "environment",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "TFConfigClusterResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "slurmclusterresolver": {
            "code": "tf.distribute.cluster_resolver.SlurmClusterResolver(jobs,port_base=8888,gpus_per_node=1,gpus_per_task=1,tasks_per_node=None,auto_set_gpu=True,rpc_layer='grpc')",
            "function_name": "SlurmClusterResolver",
            "args": [
                {
                    "name": "jobs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "port_base",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "gpus_per_node",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "gpus_per_task",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tasks_per_node",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "auto_set_gpu",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rpc_layer",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "SlurmClusterResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "tpuclusterresolver": {
            "code": "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=None,zone=None,project=None,job_name='worker',coordinator_name=None,coordinator_address=None,credentials='default',service=None,discovery_url=None)",
            "function_name": "TPUClusterResolver",
            "args": [
                {
                    "name": "tpu",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "zone",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "project",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "job_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "coordinator_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "coordinator_address",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "credentials",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "service",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "discovery_url",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "TPUClusterResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "simpleclusterresolver": {
            "code": "tf.distribute.cluster_resolver.SimpleClusterResolver(cluster_spec,master='',task_type=None,task_id=None,environment='',num_accelerators=None,rpc_layer=None)",
            "function_name": "SimpleClusterResolver",
            "args": [
                {
                    "name": "cluster_spec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "master",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task_id",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "environment",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_accelerators",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rpc_layer",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "SimpleClusterResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "centralstoragestrategy": {
            "code": "tf.distribute.experimental.CentralStorageStrategy(compute_devices=None,parameter_device=None)",
            "function_name": "CentralStorageStrategy",
            "args": [
                {
                    "name": "compute_devices",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "parameter_device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "experimental",
                "CentralStorageStrategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "gceclusterresolver": {
            "code": "tf.distribute.cluster_resolver.GCEClusterResolver(project,zone,instance_group,port,task_type='worker',task_id=0,rpc_layer='grpc',credentials='default',service=None)",
            "function_name": "GCEClusterResolver",
            "args": [
                {
                    "name": "project",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "zone",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "instance_group",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "port",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "task_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task_id",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rpc_layer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "credentials",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "service",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "GCEClusterResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "kubernetesclusterresolver": {
            "code": "tf.distribute.cluster_resolver.KubernetesClusterResolver(job_to_label_mapping=None,tf_server_port=8470,rpc_layer='grpc',override_client=None)",
            "function_name": "KubernetesClusterResolver",
            "args": [
                {
                    "name": "job_to_label_mapping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tf_server_port",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "rpc_layer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "override_client",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "cluster_resolver",
                "KubernetesClusterResolver"
            ],
            "torch": null,
            "tfjs": null
        },
        "strategyextended": {
            "code": "tf.distribute.StrategyExtended(container_strategy)",
            "function_name": "StrategyExtended",
            "args": [
                {
                    "name": "container_strategy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "StrategyExtended"
            ],
            "torch": null,
            "tfjs": null
        },
        "cluster_spec": {
            "code": "cluster_spec()",
            "function_name": "cluster_spec",
            "args": [],
            "attrs": [
                "cluster_spec"
            ],
            "torch": null,
            "tfjs": null
        },
        "strategy": {
            "code": "tf.distribute.Strategy(extended)",
            "function_name": "Strategy",
            "args": [
                {
                    "name": "extended",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "Strategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "server": {
            "code": "tf.distribute.Server(server_or_cluster_def,job_name=None,task_index=None,protocol=None,config=None,start=True)",
            "function_name": "Server",
            "args": [
                {
                    "name": "server_or_cluster_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "job_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task_index",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "protocol",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "config",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "Server"
            ],
            "torch": null,
            "tfjs": null
        },
        "replicacontext": {
            "code": "tf.distribute.ReplicaContext(strategy,replica_id_in_sync_group)",
            "function_name": "ReplicaContext",
            "args": [
                {
                    "name": "strategy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "replica_id_in_sync_group",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "ReplicaContext"
            ],
            "torch": null,
            "tfjs": null
        },
        "mirroredstrategy": {
            "code": "tf.distribute.MirroredStrategy(devices=None,cross_device_ops=None)",
            "function_name": "MirroredStrategy",
            "args": [
                {
                    "name": "devices",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cross_device_ops",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "MirroredStrategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "onedevicestrategy": {
            "code": "tf.distribute.OneDeviceStrategy(device)",
            "function_name": "OneDeviceStrategy",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "OneDeviceStrategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "ncclallreduce": {
            "code": "tf.distribute.NcclAllReduce(num_packs=1)",
            "function_name": "NcclAllReduce",
            "args": [
                {
                    "name": "num_packs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "NcclAllReduce"
            ],
            "torch": null,
            "tfjs": null
        },
        "reductiontoonedevice": {
            "code": "tf.distribute.ReductionToOneDevice(reduce_to_device=None,accumulation_fn=None)",
            "function_name": "ReductionToOneDevice",
            "args": [
                {
                    "name": "reduce_to_device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "accumulation_fn",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "ReductionToOneDevice"
            ],
            "torch": null,
            "tfjs": null
        },
        "inputcontext": {
            "code": "tf.distribute.InputContext(num_input_pipelines=1,input_pipeline_id=0,num_replicas_in_sync=1)",
            "function_name": "InputContext",
            "args": [
                {
                    "name": "num_input_pipelines",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "input_pipeline_id",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_replicas_in_sync",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "InputContext"
            ],
            "torch": null,
            "tfjs": null
        },
        "in_cross_replica_context": {
            "code": "tf.distribute.in_cross_replica_context()",
            "function_name": "in_cross_replica_context",
            "args": [],
            "attrs": [
                "tf",
                "distribute",
                "in_cross_replica_context"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_strategy": {
            "code": "tf.distribute.get_strategy()",
            "function_name": "get_strategy",
            "args": [],
            "attrs": [
                "tf",
                "distribute",
                "get_strategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "hierarchicalcopyallreduce": {
            "code": "tf.distribute.HierarchicalCopyAllReduce(num_packs=1)",
            "function_name": "HierarchicalCopyAllReduce",
            "args": [
                {
                    "name": "num_packs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "HierarchicalCopyAllReduce"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_replica_context": {
            "code": "tf.distribute.get_replica_context()",
            "function_name": "get_replica_context",
            "args": [],
            "attrs": [
                "tf",
                "distribute",
                "get_replica_context"
            ],
            "torch": null,
            "tfjs": null
        },
        "experimental_set_strategy": {
            "code": "tf.distribute.experimental_set_strategy(strategy)",
            "function_name": "experimental_set_strategy",
            "args": [
                {
                    "name": "strategy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "distribute",
                "experimental_set_strategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "has_strategy": {
            "code": "tf.distribute.has_strategy()",
            "function_name": "has_strategy",
            "args": [],
            "attrs": [
                "tf",
                "distribute",
                "has_strategy"
            ],
            "torch": null,
            "tfjs": null
        },
        "crossdeviceops": {
            "code": "tf.distribute.CrossDeviceOps()",
            "function_name": "CrossDeviceOps",
            "args": [],
            "attrs": [
                "tf",
                "distribute",
                "CrossDeviceOps"
            ],
            "torch": null,
            "tfjs": null
        },
        "disable_dump_debug_info": {
            "code": "tf.debugging.experimental.disable_dump_debug_info()",
            "function_name": "disable_dump_debug_info",
            "args": [],
            "attrs": [
                "tf",
                "debugging",
                "experimental",
                "disable_dump_debug_info"
            ],
            "torch": null,
            "tfjs": null
        },
        "enable_dump_debug_info": {
            "code": "tf.debugging.experimental.enable_dump_debug_info(dump_root,tensor_debug_mode=DEFAULT_TENSOR_DEBUG_MODE,circular_buffer_size=1000,op_regex=None,tensor_dtypes=None)",
            "function_name": "enable_dump_debug_info",
            "args": [
                {
                    "name": "dump_root",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tensor_debug_mode",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "circular_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "op_regex",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tensor_dtypes",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "experimental",
                "enable_dump_debug_info"
            ],
            "torch": null,
            "tfjs": null
        },
        "is_numeric_tensor": {
            "code": "tf.debugging.is_numeric_tensor(tensor)",
            "function_name": "is_numeric_tensor",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "is_numeric_tensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "enable_check_numerics": {
            "code": "tf.debugging.enable_check_numerics(stack_height_limit=30,path_length_limit=50)",
            "function_name": "enable_check_numerics",
            "args": [
                {
                    "name": "stack_height_limit",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "path_length_limit",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "enable_check_numerics"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_log_device_placement": {
            "code": "tf.debugging.set_log_device_placement(enabled)",
            "function_name": "set_log_device_placement",
            "args": [
                {
                    "name": "enabled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "set_log_device_placement"
            ],
            "torch": null,
            "tfjs": null
        },
        "disable_check_numerics": {
            "code": "tf.debugging.disable_check_numerics()",
            "function_name": "disable_check_numerics",
            "args": [],
            "attrs": [
                "tf",
                "debugging",
                "disable_check_numerics"
            ],
            "torch": null,
            "tfjs": null
        },
        "check_numerics": {
            "code": "tf.debugging.check_numerics(tensor,message,name=None)",
            "function_name": "check_numerics",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "check_numerics"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_log_device_placement": {
            "code": "tf.debugging.get_log_device_placement()",
            "function_name": "get_log_device_placement",
            "args": [],
            "attrs": [
                "tf",
                "debugging",
                "get_log_device_placement"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_shapes": {
            "code": "tf.debugging.assert_shapes(shapes,data=None,summarize=None,message=None,name=None)",
            "function_name": "assert_shapes",
            "args": [
                {
                    "name": "shapes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_shapes"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_type": {
            "code": "tf.debugging.assert_type(tensor,tf_type,message=None,name=None)",
            "function_name": "assert_type",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tf_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_type"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_scalar": {
            "code": "tf.debugging.assert_scalar(tensor,message=None,name=None)",
            "function_name": "assert_scalar",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_scalar"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_rank_in": {
            "code": "tf.debugging.assert_rank_in(x,ranks,message=None,name=None)",
            "function_name": "assert_rank_in",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ranks",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_rank_in"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_rank": {
            "code": "tf.debugging.assert_rank(x,rank,message=None,name=None)",
            "function_name": "assert_rank",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rank",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_rank"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_same_float_dtype": {
            "code": "tf.debugging.assert_same_float_dtype(tensors=None,dtype=None)",
            "function_name": "assert_same_float_dtype",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_same_float_dtype"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_proper_iterable": {
            "code": "tf.debugging.assert_proper_iterable(values)",
            "function_name": "assert_proper_iterable",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_proper_iterable"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_rank_at_least": {
            "code": "tf.debugging.assert_rank_at_least(x,rank,message=None,name=None)",
            "function_name": "assert_rank_at_least",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "rank",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_rank_at_least"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_positive": {
            "code": "tf.debugging.assert_positive(x,message=None,summarize=None,name=None)",
            "function_name": "assert_positive",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_positive"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_non_positive": {
            "code": "tf.debugging.assert_non_positive(x,message=None,summarize=None,name=None)",
            "function_name": "assert_non_positive",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_non_positive"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_negative": {
            "code": "tf.debugging.assert_negative(x,message=None,summarize=None,name=None)",
            "function_name": "assert_negative",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_negative"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_non_negative": {
            "code": "tf.debugging.assert_non_negative(x,message=None,summarize=None,name=None)",
            "function_name": "assert_non_negative",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_non_negative"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_none_equal": {
            "code": "tf.debugging.assert_none_equal(x,y,summarize=None,message=None,name=None)",
            "function_name": "assert_none_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_none_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_less_equal": {
            "code": "tf.debugging.assert_less_equal(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_less_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_less_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_integer": {
            "code": "tf.debugging.assert_integer(x,message=None,name=None)",
            "function_name": "assert_integer",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_integer"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_near": {
            "code": "tf.debugging.assert_near(x,y,rtol=None,atol=None,message=None,summarize=None,name=None)",
            "function_name": "assert_near",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "rtol",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "atol",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_near"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_greater": {
            "code": "tf.debugging.assert_greater(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_greater",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_greater"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_less": {
            "code": "tf.debugging.assert_less(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_less",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_less"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_greater_equal": {
            "code": "tf.debugging.assert_greater_equal(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_greater_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_greater_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert_equal": {
            "code": "tf.debugging.assert_equal(x,y,message=None,summarize=None,name=None)",
            "function_name": "assert_equal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "message",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_equal"
            ],
            "torch": null,
            "tfjs": null
        },
        "assert": {
            "code": "tf.debugging.Assert(condition,data,summarize=None,name=None)",
            "function_name": "Assert",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "summarize",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "Assert"
            ],
            "torch": null,
            "tfjs": "assert"
        },
        "assert_all_finite": {
            "code": "tf.debugging.assert_all_finite(x,message,name=None)",
            "function_name": "assert_all_finite",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "message",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "debugging",
                "assert_all_finite"
            ],
            "torch": null,
            "tfjs": null
        },
        "unbatch": {
            "code": "tf.data.experimental.unbatch()",
            "function_name": "unbatch",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "unbatch"
            ],
            "torch": null,
            "tfjs": null
        },
        "unique": {
            "code": "tf.unique(x,out_idx=tf.dtypes.int32,name=None)",
            "function_name": "unique",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "out_idx",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "unique"
            ],
            "torch": "unique",
            "tfjs": null
        },
        "to_variant": {
            "code": "tf.data.experimental.to_variant(dataset)",
            "function_name": "to_variant",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "to_variant"
            ],
            "torch": null,
            "tfjs": null
        },
        "threadingoptions": {
            "code": "tf.data.experimental.ThreadingOptions()",
            "function_name": "ThreadingOptions",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "ThreadingOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "take_while": {
            "code": "tf.data.experimental.take_while(predicate)",
            "function_name": "take_while",
            "args": [
                {
                    "name": "predicate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "take_while"
            ],
            "torch": null,
            "tfjs": null
        },
        "statsoptions": {
            "code": "tf.data.experimental.StatsOptions()",
            "function_name": "StatsOptions",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "StatsOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "sqldataset": {
            "code": "tf.data.experimental.SqlDataset(driver_name,data_source_name,query,output_types)",
            "function_name": "SqlDataset",
            "args": [
                {
                    "name": "driver_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data_source_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "query",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "output_types",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "SqlDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "statsaggregator": {
            "code": "tf.data.experimental.StatsAggregator()",
            "function_name": "StatsAggregator",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "StatsAggregator"
            ],
            "torch": null,
            "tfjs": null
        },
        "scan": {
            "code": "tf.scan(fn,elems,initializer=None,parallel_iterations=10,back_prop=True,swap_memory=False,infer_shape=True,reverse=False,name=None)",
            "function_name": "scan",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "initializer",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "parallel_iterations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "back_prop",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "swap_memory",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "infer_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reverse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "scan"
            ],
            "torch": null,
            "tfjs": null
        },
        "reducer": {
            "code": "tf.data.experimental.Reducer(init_func,reduce_func,finalize_func)",
            "function_name": "Reducer",
            "args": [
                {
                    "name": "init_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "reduce_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "finalize_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "Reducer"
            ],
            "torch": null,
            "tfjs": null
        },
        "prefetch_to_device": {
            "code": "tf.data.experimental.prefetch_to_device(device,buffer_size=None)",
            "function_name": "prefetch_to_device",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "buffer_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "prefetch_to_device"
            ],
            "torch": null,
            "tfjs": null
        },
        "shuffle_and_repeat": {
            "code": "tf.data.experimental.shuffle_and_repeat(buffer_size,count=None,seed=None)",
            "function_name": "shuffle_and_repeat",
            "args": [
                {
                    "name": "buffer_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "count",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "shuffle_and_repeat"
            ],
            "torch": null,
            "tfjs": null
        },
        "rejection_resample": {
            "code": "tf.data.experimental.rejection_resample(class_func,target_dist,initial_dist=None,seed=None)",
            "function_name": "rejection_resample",
            "args": [
                {
                    "name": "class_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "target_dist",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "initial_dist",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "rejection_resample"
            ],
            "torch": null,
            "tfjs": null
        },
        "randomdataset": {
            "code": "tf.data.experimental.RandomDataset(seed=None)",
            "function_name": "RandomDataset",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "RandomDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "parse_example_dataset": {
            "code": "tf.data.experimental.parse_example_dataset(features,num_parallel_calls=1)",
            "function_name": "parse_example_dataset",
            "args": [
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_parallel_calls",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "parse_example_dataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "sample_from_datasets": {
            "code": "tf.data.experimental.sample_from_datasets(datasets,weights=None,seed=None)",
            "function_name": "sample_from_datasets",
            "args": [
                {
                    "name": "datasets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "sample_from_datasets"
            ],
            "torch": null,
            "tfjs": null
        },
        "parallel_interleave": {
            "code": "tf.data.experimental.parallel_interleave(map_func,cycle_length,block_length=1,sloppy=False,buffer_output_elements=None,prefetch_input_elements=None)",
            "function_name": "parallel_interleave",
            "args": [
                {
                    "name": "map_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "cycle_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "block_length",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sloppy",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "buffer_output_elements",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "prefetch_input_elements",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "parallel_interleave"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_saveable_from_iterator": {
            "code": "tf.data.experimental.make_saveable_from_iterator(iterator)",
            "function_name": "make_saveable_from_iterator",
            "args": [
                {
                    "name": "iterator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "make_saveable_from_iterator"
            ],
            "torch": null,
            "tfjs": null
        },
        "optimizationoptions": {
            "code": "tf.data.experimental.OptimizationOptions()",
            "function_name": "OptimizationOptions",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "OptimizationOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "map_and_batch": {
            "code": "tf.data.experimental.map_and_batch(map_func,batch_size,num_parallel_batches=None,drop_remainder=False,num_parallel_calls=None)",
            "function_name": "map_and_batch",
            "args": [
                {
                    "name": "map_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_parallel_batches",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "drop_remainder",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_parallel_calls",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "map_and_batch"
            ],
            "torch": null,
            "tfjs": null
        },
        "mapvectorizationoptions": {
            "code": "tf.data.experimental.MapVectorizationOptions()",
            "function_name": "MapVectorizationOptions",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "MapVectorizationOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_csv_dataset": {
            "code": "tf.data.experimental.make_csv_dataset(file_pattern,batch_size,column_names=None,column_defaults=None,label_name=None,select_columns=None,field_delim=',',use_quote_delim=True,na_value='',header=True,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,num_parallel_reads=None,sloppy=False,num_rows_for_inference=100,compression_type=None,ignore_errors=False)",
            "function_name": "make_csv_dataset",
            "args": [
                {
                    "name": "file_pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "column_names",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "column_defaults",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "select_columns",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "field_delim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_quote_delim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "na_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "header",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_epochs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle_seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "prefetch_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_parallel_reads",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sloppy",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_rows_for_inference",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ignore_errors",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "make_csv_dataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "latency_stats": {
            "code": "tf.data.experimental.latency_stats(tag)",
            "function_name": "latency_stats",
            "args": [
                {
                    "name": "tag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "latency_stats"
            ],
            "torch": null,
            "tfjs": null
        },
        "make_batched_features_dataset": {
            "code": "tf.data.experimental.make_batched_features_dataset(file_pattern,batch_size,features,reader=None,label_key=None,reader_args=None,num_epochs=None,shuffle=True,shuffle_buffer_size=10000,shuffle_seed=None,prefetch_buffer_size=None,reader_num_threads=None,parser_num_threads=None,sloppy_ordering=False,drop_final_batch=False)",
            "function_name": "make_batched_features_dataset",
            "args": [
                {
                    "name": "file_pattern",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "features",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "reader",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "label_key",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reader_args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_epochs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shuffle_seed",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "prefetch_buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "reader_num_threads",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "parser_num_threads",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sloppy_ordering",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "drop_final_batch",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "make_batched_features_dataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "group_by_reducer": {
            "code": "tf.data.experimental.group_by_reducer(key_func,reducer)",
            "function_name": "group_by_reducer",
            "args": [
                {
                    "name": "key_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "reducer",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "group_by_reducer"
            ],
            "torch": null,
            "tfjs": null
        },
        "group_by_window": {
            "code": "tf.data.experimental.group_by_window(key_func,reduce_func,window_size=None,window_size_func=None)",
            "function_name": "group_by_window",
            "args": [
                {
                    "name": "key_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "reduce_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "window_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "window_size_func",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "group_by_window"
            ],
            "torch": null,
            "tfjs": null
        },
        "ignore_errors": {
            "code": "tf.data.experimental.ignore_errors()",
            "function_name": "ignore_errors",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "ignore_errors"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_next_as_optional": {
            "code": "tf.data.experimental.get_next_as_optional(iterator)",
            "function_name": "get_next_as_optional",
            "args": [
                {
                    "name": "iterator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "get_next_as_optional"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_structure": {
            "code": "tf.data.experimental.get_structure(dataset_or_iterator)",
            "function_name": "get_structure",
            "args": [
                {
                    "name": "dataset_or_iterator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "get_structure"
            ],
            "torch": null,
            "tfjs": null
        },
        "from_variant": {
            "code": "tf.data.experimental.from_variant(variant,structure)",
            "function_name": "from_variant",
            "args": [
                {
                    "name": "variant",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "structure",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "from_variant"
            ],
            "torch": null,
            "tfjs": null
        },
        "enumerate_dataset": {
            "code": "tf.data.experimental.enumerate_dataset(start=0)",
            "function_name": "enumerate_dataset",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "enumerate_dataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_single_element": {
            "code": "tf.data.experimental.get_single_element(dataset)",
            "function_name": "get_single_element",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "get_single_element"
            ],
            "torch": null,
            "tfjs": null
        },
        "distributeoptions": {
            "code": "tf.data.experimental.DistributeOptions()",
            "function_name": "DistributeOptions",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "DistributeOptions"
            ],
            "torch": null,
            "tfjs": null
        },
        "dense_to_sparse_batch": {
            "code": "tf.data.experimental.dense_to_sparse_batch(batch_size,row_shape)",
            "function_name": "dense_to_sparse_batch",
            "args": [
                {
                    "name": "batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "row_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "dense_to_sparse_batch"
            ],
            "torch": null,
            "tfjs": null
        },
        "choose_from_datasets": {
            "code": "tf.data.experimental.choose_from_datasets(datasets,choice_dataset)",
            "function_name": "choose_from_datasets",
            "args": [
                {
                    "name": "datasets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "choice_dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "choose_from_datasets"
            ],
            "torch": null,
            "tfjs": null
        },
        "copy_to_device": {
            "code": "tf.data.experimental.copy_to_device(target_device,source_device='/cpu:0')",
            "function_name": "copy_to_device",
            "args": [
                {
                    "name": "target_device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "source_device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "copy_to_device"
            ],
            "torch": null,
            "tfjs": null
        },
        "dense_to_ragged_batch": {
            "code": "tf.data.experimental.dense_to_ragged_batch(batch_size,drop_remainder=False,row_splits_dtype=tf.dtypes.int64)",
            "function_name": "dense_to_ragged_batch",
            "args": [
                {
                    "name": "batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "drop_remainder",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "row_splits_dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "dense_to_ragged_batch"
            ],
            "torch": null,
            "tfjs": null
        },
        "csvdataset": {
            "code": "tf.data.experimental.CsvDataset(filenames,record_defaults,compression_type=None,buffer_size=None,header=False,field_delim=',',use_quote_delim=True,na_value='',select_cols=None)",
            "function_name": "CsvDataset",
            "args": [
                {
                    "name": "filenames",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "record_defaults",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "header",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "field_delim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "use_quote_delim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "na_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "select_cols",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "CsvDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "counter": {
            "code": "tf.data.experimental.Counter(start=0,step=1,dtype=tf.dtypes.int64)",
            "function_name": "Counter",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "Counter"
            ],
            "torch": null,
            "tfjs": null
        },
        "checkpointinputpipelinehook": {
            "code": "tf.data.experimental.CheckpointInputPipelineHook(estimator)",
            "function_name": "CheckpointInputPipelineHook",
            "args": [
                {
                    "name": "estimator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "CheckpointInputPipelineHook"
            ],
            "torch": null,
            "tfjs": null
        },
        "cardinality": {
            "code": "tf.data.experimental.cardinality(dataset)",
            "function_name": "cardinality",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "cardinality"
            ],
            "torch": null,
            "tfjs": null
        },
        "bytes_produced_stats": {
            "code": "tf.data.experimental.bytes_produced_stats(tag)",
            "function_name": "bytes_produced_stats",
            "args": [
                {
                    "name": "tag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "bytes_produced_stats"
            ],
            "torch": null,
            "tfjs": null
        },
        "bucket_by_sequence_length": {
            "code": "tf.data.experimental.bucket_by_sequence_length(element_length_func,bucket_boundaries,bucket_batch_sizes,padded_shapes=None,padding_values=None,pad_to_bucket_boundary=False,no_padding=False,drop_remainder=False)",
            "function_name": "bucket_by_sequence_length",
            "args": [
                {
                    "name": "element_length_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "bucket_boundaries",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "bucket_batch_sizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padded_shapes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding_values",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_to_bucket_boundary",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "no_padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "drop_remainder",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "experimental",
                "bucket_by_sequence_length"
            ],
            "torch": null,
            "tfjs": null
        },
        "options": {
            "code": "tf.data.Options()",
            "function_name": "Options",
            "args": [],
            "attrs": [
                "tf",
                "data",
                "Options"
            ],
            "torch": null,
            "tfjs": null
        },
        "tfrecorddataset": {
            "code": "tf.data.TFRecordDataset(filenames,compression_type=None,buffer_size=None,num_parallel_reads=None)",
            "function_name": "TFRecordDataset",
            "args": [
                {
                    "name": "filenames",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_parallel_reads",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "TFRecordDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "dataset": {
            "code": "tf.data.Dataset(variant_tensor)",
            "function_name": "Dataset",
            "args": [
                {
                    "name": "variant_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "Dataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "datasetspec": {
            "code": "tf.data.DatasetSpec(element_spec,dataset_shape=())",
            "function_name": "DatasetSpec",
            "args": [
                {
                    "name": "element_spec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dataset_shape",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "DatasetSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "fixedlengthrecorddataset": {
            "code": "tf.data.FixedLengthRecordDataset(filenames,record_bytes,header_bytes=None,footer_bytes=None,buffer_size=None,compression_type=None,num_parallel_reads=None)",
            "function_name": "FixedLengthRecordDataset",
            "args": [
                {
                    "name": "filenames",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "record_bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "header_bytes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "footer_bytes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_parallel_reads",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "FixedLengthRecordDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "textlinedataset": {
            "code": "tf.data.TextLineDataset(filenames,compression_type=None,buffer_size=None,num_parallel_reads=None)",
            "function_name": "TextLineDataset",
            "args": [
                {
                    "name": "filenames",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "compression_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "buffer_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_parallel_reads",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "data",
                "TextLineDataset"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_jit": {
            "code": "tf.config.optimizer.set_jit(enabled)",
            "function_name": "set_jit",
            "args": [
                {
                    "name": "enabled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "set_jit"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_inter_op_parallelism_threads": {
            "code": "tf.config.threading.get_inter_op_parallelism_threads()",
            "function_name": "get_inter_op_parallelism_threads",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "threading",
                "get_inter_op_parallelism_threads"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_inter_op_parallelism_threads": {
            "code": "tf.config.threading.set_inter_op_parallelism_threads(num_threads)",
            "function_name": "set_inter_op_parallelism_threads",
            "args": [
                {
                    "name": "num_threads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "threading",
                "set_inter_op_parallelism_threads"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_intra_op_parallelism_threads": {
            "code": "tf.config.threading.set_intra_op_parallelism_threads(num_threads)",
            "function_name": "set_intra_op_parallelism_threads",
            "args": [
                {
                    "name": "num_threads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "threading",
                "set_intra_op_parallelism_threads"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_intra_op_parallelism_threads": {
            "code": "tf.config.threading.get_intra_op_parallelism_threads()",
            "function_name": "get_intra_op_parallelism_threads",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "threading",
                "get_intra_op_parallelism_threads"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_experimental_options": {
            "code": "tf.config.optimizer.set_experimental_options(options)",
            "function_name": "set_experimental_options",
            "args": [
                {
                    "name": "options",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "set_experimental_options"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_jit": {
            "code": "tf.config.optimizer.get_jit()",
            "function_name": "get_jit",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "get_jit"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_experimental_options": {
            "code": "tf.config.optimizer.get_experimental_options()",
            "function_name": "get_experimental_options",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "optimizer",
                "get_experimental_options"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_device_policy": {
            "code": "tf.config.experimental.get_device_policy()",
            "function_name": "get_device_policy",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "get_device_policy"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_device_policy": {
            "code": "tf.config.experimental.set_device_policy(device_policy)",
            "function_name": "set_device_policy",
            "args": [
                {
                    "name": "device_policy",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "set_device_policy"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_memory_growth": {
            "code": "tf.config.experimental.get_memory_growth(device)",
            "function_name": "get_memory_growth",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "get_memory_growth"
            ],
            "torch": null,
            "tfjs": null
        },
        "enable_mlir_bridge": {
            "code": "tf.config.experimental.enable_mlir_bridge()",
            "function_name": "enable_mlir_bridge",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "enable_mlir_bridge"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_memory_growth": {
            "code": "tf.config.experimental.set_memory_growth(device,enable)",
            "function_name": "set_memory_growth",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "enable",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "set_memory_growth"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_synchronous_execution": {
            "code": "tf.config.experimental.get_synchronous_execution()",
            "function_name": "get_synchronous_execution",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "get_synchronous_execution"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_synchronous_execution": {
            "code": "tf.config.experimental.set_synchronous_execution(enable)",
            "function_name": "set_synchronous_execution",
            "args": [
                {
                    "name": "enable",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "set_synchronous_execution"
            ],
            "torch": null,
            "tfjs": null
        },
        "disable_mlir_bridge": {
            "code": "tf.config.experimental.disable_mlir_bridge()",
            "function_name": "disable_mlir_bridge",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "experimental",
                "disable_mlir_bridge"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_logical_device_configuration": {
            "code": "tf.config.set_logical_device_configuration(device,logical_devices)",
            "function_name": "set_logical_device_configuration",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logical_devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "config",
                "set_logical_device_configuration"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_visible_devices": {
            "code": "tf.config.set_visible_devices(devices,device_type=None)",
            "function_name": "set_visible_devices",
            "args": [
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "device_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "config",
                "set_visible_devices"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_soft_device_placement": {
            "code": "tf.config.set_soft_device_placement(enabled)",
            "function_name": "set_soft_device_placement",
            "args": [
                {
                    "name": "enabled",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "set_soft_device_placement"
            ],
            "torch": null,
            "tfjs": null
        },
        "list_physical_devices": {
            "code": "tf.config.list_physical_devices(device_type=None)",
            "function_name": "list_physical_devices",
            "args": [
                {
                    "name": "device_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "config",
                "list_physical_devices"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_visible_devices": {
            "code": "tf.config.get_visible_devices(device_type=None)",
            "function_name": "get_visible_devices",
            "args": [
                {
                    "name": "device_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "config",
                "get_visible_devices"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_soft_device_placement": {
            "code": "tf.config.get_soft_device_placement()",
            "function_name": "get_soft_device_placement",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "get_soft_device_placement"
            ],
            "torch": null,
            "tfjs": null
        },
        "list_logical_devices": {
            "code": "tf.config.list_logical_devices(device_type=None)",
            "function_name": "list_logical_devices",
            "args": [
                {
                    "name": "device_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "config",
                "list_logical_devices"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_logical_device_configuration": {
            "code": "tf.config.get_logical_device_configuration(device)",
            "function_name": "get_logical_device_configuration",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "get_logical_device_configuration"
            ],
            "torch": null,
            "tfjs": null
        },
        "experimental_connect_to_host": {
            "code": "tf.config.experimental_connect_to_host(remote_host=None,job_name='worker')",
            "function_name": "experimental_connect_to_host",
            "args": [
                {
                    "name": "remote_host",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "job_name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_connect_to_host"
            ],
            "torch": null,
            "tfjs": null
        },
        "experimental_run_functions_eagerly": {
            "code": "tf.config.experimental_run_functions_eagerly(run_eagerly)",
            "function_name": "experimental_run_functions_eagerly",
            "args": [
                {
                    "name": "run_eagerly",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_run_functions_eagerly"
            ],
            "torch": null,
            "tfjs": null
        },
        "experimental_functions_run_eagerly": {
            "code": "tf.config.experimental_functions_run_eagerly()",
            "function_name": "experimental_functions_run_eagerly",
            "args": [],
            "attrs": [
                "tf",
                "config",
                "experimental_functions_run_eagerly"
            ],
            "torch": null,
            "tfjs": null
        },
        "experimental_connect_to_cluster": {
            "code": "tf.config.experimental_connect_to_cluster(cluster_spec_or_resolver,job_name='localhost',task_index=0,protocol=None,make_master_device_default=True)",
            "function_name": "experimental_connect_to_cluster",
            "args": [
                {
                    "name": "cluster_spec_or_resolver",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "job_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task_index",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "protocol",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "make_master_device_default",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "config",
                "experimental_connect_to_cluster"
            ],
            "torch": null,
            "tfjs": null
        },
        "create_session": {
            "code": "create_session()",
            "function_name": "create_session",
            "args": [],
            "attrs": [
                "create_session"
            ],
            "torch": null,
            "tfjs": null
        },
        "flag_type": {
            "code": "flag_type()",
            "function_name": "flag_type",
            "args": [],
            "attrs": [
                "flag_type"
            ],
            "torch": null,
            "tfjs": null
        },
        "left_shift": {
            "code": "tf.bitwise.left_shift(x,y,name=None)",
            "function_name": "left_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "left_shift"
            ],
            "torch": null,
            "tfjs": null
        },
        "bitwise_xor": {
            "code": "tf.bitwise.bitwise_xor(x,y,name=None)",
            "function_name": "bitwise_xor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "bitwise_xor"
            ],
            "torch": "bitwise_xor",
            "tfjs": null
        },
        "invert": {
            "code": "tf.bitwise.invert(x,name=None)",
            "function_name": "invert",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "invert"
            ],
            "torch": null,
            "tfjs": null
        },
        "bitwise_and": {
            "code": "tf.bitwise.bitwise_and(x,y,name=None)",
            "function_name": "bitwise_and",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "bitwise_and"
            ],
            "torch": null,
            "tfjs": null
        },
        "bitwise_or": {
            "code": "tf.bitwise.bitwise_or(x,y,name=None)",
            "function_name": "bitwise_or",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "bitwise_or"
            ],
            "torch": null,
            "tfjs": null
        },
        "right_shift": {
            "code": "tf.bitwise.right_shift(x,y,name=None)",
            "function_name": "right_shift",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "bitwise",
                "right_shift"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_code": {
            "code": "tf.autograph.to_code(entity,recursive=True,experimental_optional_features=None)",
            "function_name": "to_code",
            "args": [
                {
                    "name": "entity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "recursive",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_optional_features",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "to_code"
            ],
            "torch": null,
            "tfjs": null
        },
        "to_graph": {
            "code": "tf.autograph.to_graph(entity,recursive=True,experimental_optional_features=None)",
            "function_name": "to_graph",
            "args": [
                {
                    "name": "entity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "recursive",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "experimental_optional_features",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "to_graph"
            ],
            "torch": null,
            "tfjs": null
        },
        "do_not_convert": {
            "code": "tf.autograph.experimental.do_not_convert(func=None)",
            "function_name": "do_not_convert",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "experimental",
                "do_not_convert"
            ],
            "torch": null,
            "tfjs": null
        },
        "set_verbosity": {
            "code": "tf.autograph.set_verbosity(level,alsologtostdout=False)",
            "function_name": "set_verbosity",
            "args": [
                {
                    "name": "level",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alsologtostdout",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "autograph",
                "set_verbosity"
            ],
            "torch": null,
            "tfjs": null
        },
        "encode_wav": {
            "code": "tf.audio.encode_wav(audio,sample_rate,name=None)",
            "function_name": "encode_wav",
            "args": [
                {
                    "name": "audio",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sample_rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "audio",
                "encode_wav"
            ],
            "torch": null,
            "tfjs": null
        },
        "forwardaccumulator": {
            "code": "tf.autodiff.ForwardAccumulator(primals,tangents)",
            "function_name": "ForwardAccumulator",
            "args": [
                {
                    "name": "primals",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tangents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "autodiff",
                "ForwardAccumulator"
            ],
            "torch": null,
            "tfjs": null
        },
        "decode_wav": {
            "code": "tf.audio.decode_wav(contents,desired_channels=-1,desired_samples=-1,name=None)",
            "function_name": "decode_wav",
            "args": [
                {
                    "name": "contents",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "desired_channels",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "desired_samples",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "audio",
                "decode_wav"
            ],
            "torch": null,
            "tfjs": null
        },
        "where": {
            "code": "tf.where(condition,x=None,y=None,name=None)",
            "function_name": "where",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "condition",
                    "tfjs": "condition"
                },
                {
                    "name": "x",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "y",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "where"
            ],
            "torch": "where",
            "tfjs": "where"
        },
        "while_loop": {
            "code": "tf.while_loop(cond,body,loop_vars,shape_invariants=None,parallel_iterations=10,back_prop=True,swap_memory=False,maximum_iterations=None,name=None)",
            "function_name": "while_loop",
            "args": [
                {
                    "name": "cond",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "body",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "loop_vars",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "shape_invariants",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "parallel_iterations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "back_prop",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "swap_memory",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "maximum_iterations",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "while_loop"
            ],
            "torch": null,
            "tfjs": null
        },
        "vectorized_map": {
            "code": "tf.vectorized_map(fn,elems)",
            "function_name": "vectorized_map",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "elems",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "vectorized_map"
            ],
            "torch": null,
            "tfjs": null
        },
        "savesliceinfo": {
            "code": "tf.Variable.SaveSliceInfo(full_name=None,full_shape=None,var_offset=None,var_shape=None,save_slice_info_def=None,import_scope=None)",
            "function_name": "SaveSliceInfo",
            "args": [
                {
                    "name": "full_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "full_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "var_offset",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "var_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "save_slice_info_def",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "import_scope",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "Variable",
                "SaveSliceInfo"
            ],
            "torch": null,
            "tfjs": null
        },
        "unique_with_counts": {
            "code": "tf.unique_with_counts(x,out_idx=tf.dtypes.int32,name=None)",
            "function_name": "unique_with_counts",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_idx",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "unique_with_counts"
            ],
            "torch": null,
            "tfjs": null
        },
        "unstack": {
            "code": "tf.unstack(value,num=None,axis=0,name='unstack')",
            "function_name": "unstack",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "num",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "unstack"
            ],
            "torch": null,
            "tfjs": "unstack"
        },
        "unravel_index": {
            "code": "tf.unravel_index(indices,dims,name=None)",
            "function_name": "unravel_index",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "unravel_index"
            ],
            "torch": null,
            "tfjs": null
        },
        "tuple": {
            "code": "tf.tuple(tensors,control_inputs=None,name=None)",
            "function_name": "tuple",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "control_inputs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "tuple"
            ],
            "torch": null,
            "tfjs": null
        },
        "timestamp": {
            "code": "tf.timestamp(name=None)",
            "function_name": "timestamp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "timestamp"
            ],
            "torch": null,
            "tfjs": null
        },
        "truncatediv": {
            "code": "tf.truncatediv(x,y,name=None)",
            "function_name": "truncatediv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "truncatediv"
            ],
            "torch": null,
            "tfjs": null
        },
        "truncatemod": {
            "code": "tf.truncatemod(x,y,name=None)",
            "function_name": "truncatemod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "truncatemod"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensor_scatter_nd_sub": {
            "code": "tf.tensor_scatter_nd_sub(tensor,indices,updates,name=None)",
            "function_name": "tensor_scatter_nd_sub",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "tensor_scatter_nd_sub"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensorshape": {
            "code": "tf.TensorShape(dims)",
            "function_name": "TensorShape",
            "args": [
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "TensorShape"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensorarrayspec": {
            "code": "tf.TensorArraySpec(element_shape=None,dtype=tf.dtypes.float32,dynamic_size=False,infer_shape=True)",
            "function_name": "TensorArraySpec",
            "args": [
                {
                    "name": "element_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dynamic_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "infer_shape",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "TensorArraySpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensor_scatter_nd_add": {
            "code": "tf.tensor_scatter_nd_add(tensor,indices,updates,name=None)",
            "function_name": "tensor_scatter_nd_add",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "tensor_scatter_nd_add"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensor_scatter_nd_update": {
            "code": "tf.tensor_scatter_nd_update(tensor,indices,updates,name=None)",
            "function_name": "tensor_scatter_nd_update",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "tensor_scatter_nd_update"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensorarray": {
            "code": "tf.TensorArray(dtype,size=None,dynamic_size=None,clear_after_read=None,tensor_array_name=None,handle=None,flow=None,infer_shape=True,element_shape=None,colocate_with_first_write_call=True,name=None)",
            "function_name": "TensorArray",
            "args": [
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dynamic_size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "clear_after_read",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "tensor_array_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "handle",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "flow",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "infer_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "element_shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "colocate_with_first_write_call",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "TensorArray"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensorspec": {
            "code": "tf.TensorSpec(shape,dtype=tf.dtypes.float32,name=None)",
            "function_name": "TensorSpec",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "TensorSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "strided_slice": {
            "code": "tf.strided_slice(input_,begin,end,strides=None,begin_mask=0,end_mask=0,ellipsis_mask=0,new_axis_mask=0,shrink_axis_mask=0,var=None,name=None)",
            "function_name": "strided_slice",
            "args": [
                {
                    "name": "input_",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "begin_mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "end_mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ellipsis_mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "new_axis_mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shrink_axis_mask",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "var",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "strided_slice"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensor": {
            "code": "tf.Tensor(op,value_index,dtype)",
            "function_name": "Tensor",
            "args": [
                {
                    "name": "op",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "value_index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tfjs": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": "dtype",
                    "tfjs": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "Tensor"
            ],
            "torch": "tensor",
            "tfjs": "tensor"
        },
        "switch_case": {
            "code": "tf.switch_case(branch_index,branch_fns,default=None,name='switch_case')",
            "function_name": "switch_case",
            "args": [
                {
                    "name": "branch_index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "branch_fns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "default",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "switch_case"
            ],
            "torch": null,
            "tfjs": null
        },
        "tensordot": {
            "code": "tf.tensordot(a,b,axes,name=None)",
            "function_name": "tensordot",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": "b"
                },
                {
                    "name": "axes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "tensordot"
            ],
            "torch": "tensordot",
            "tfjs": null
        },
        "sparsetensorspec": {
            "code": "tf.SparseTensorSpec(shape=None,dtype=tf.dtypes.float32)",
            "function_name": "SparseTensorSpec",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "SparseTensorSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "space_to_batch_nd": {
            "code": "tf.space_to_batch_nd(input,block_shape,paddings,name=None)",
            "function_name": "space_to_batch_nd",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "block_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "space_to_batch_nd"
            ],
            "torch": null,
            "tfjs": null
        },
        "space_to_batch": {
            "code": "tf.space_to_batch(input,block_shape,paddings,name=None)",
            "function_name": "space_to_batch",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "block_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "space_to_batch"
            ],
            "torch": null,
            "tfjs": null
        },
        "sort": {
            "code": "tf.sort(values,axis=-1,direction='ASCENDING',name=None)",
            "function_name": "sort",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "direction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sort"
            ],
            "torch": null,
            "tfjs": null
        },
        "shape_n": {
            "code": "tf.shape_n(input,out_type=tf.dtypes.int32,name=None)",
            "function_name": "shape_n",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "shape_n"
            ],
            "torch": null,
            "tfjs": null
        },
        "searchsorted": {
            "code": "tf.searchsorted(sorted_sequence,values,side='left',out_type=tf.dtypes.int32,name=None)",
            "function_name": "searchsorted",
            "args": [
                {
                    "name": "sorted_sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "side",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "searchsorted"
            ],
            "torch": null,
            "tfjs": null
        },
        "scatter_nd": {
            "code": "tf.scatter_nd(indices,updates,shape,name=None)",
            "function_name": "scatter_nd",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "scatter_nd"
            ],
            "torch": null,
            "tfjs": null
        },
        "sequence_mask": {
            "code": "tf.sequence_mask(lengths,maxlen=None,dtype=tf.dtypes.bool,name=None)",
            "function_name": "sequence_mask",
            "args": [
                {
                    "name": "lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "maxlen",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "sequence_mask"
            ],
            "torch": null,
            "tfjs": null
        },
        "roll": {
            "code": "tf.roll(input,shift,axis,name=None)",
            "function_name": "roll",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input"
                },
                {
                    "name": "shift",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "roll"
            ],
            "torch": "roll",
            "tfjs": null
        },
        "reverse_sequence": {
            "code": "tf.reverse_sequence(input,seq_lengths,seq_axis=None,batch_axis=None,name=None)",
            "function_name": "reverse_sequence",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "seq_lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "seq_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "batch_axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "reverse_sequence"
            ],
            "torch": null,
            "tfjs": null
        },
        "required_space_to_batch_paddings": {
            "code": "tf.required_space_to_batch_paddings(input_shape,block_shape,base_paddings=None,name=None)",
            "function_name": "required_space_to_batch_paddings",
            "args": [
                {
                    "name": "input_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "block_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "base_paddings",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "required_space_to_batch_paddings"
            ],
            "torch": null,
            "tfjs": null
        },
        "reduce_all": {
            "code": "tf.reduce_all(input_tensor,axis=None,keepdims=False,name=None)",
            "function_name": "reduce_all",
            "args": [
                {
                    "name": "input_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "reduce_all"
            ],
            "torch": null,
            "tfjs": null
        },
        "realdiv": {
            "code": "tf.realdiv(x,y,name=None)",
            "function_name": "realdiv",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "realdiv"
            ],
            "torch": null,
            "tfjs": null
        },
        "register_tensor_conversion_function": {
            "code": "tf.register_tensor_conversion_function(base_type,conversion_func,priority=100)",
            "function_name": "register_tensor_conversion_function",
            "args": [
                {
                    "name": "base_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "conversion_func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "priority",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "register_tensor_conversion_function"
            ],
            "torch": null,
            "tfjs": null
        },
        "registergradient": {
            "code": "tf.RegisterGradient(op_type)",
            "function_name": "RegisterGradient",
            "args": [
                {
                    "name": "op_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "RegisterGradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "rank": {
            "code": "tf.rank(input,name=None)",
            "function_name": "rank",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "rank"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_uniform_initializer": {
            "code": "tf.random_uniform_initializer(minval=-0.05,maxval=0.05,seed=None)",
            "function_name": "random_uniform_initializer",
            "args": [
                {
                    "name": "minval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "maxval",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random_uniform_initializer"
            ],
            "torch": null,
            "tfjs": null
        },
        "random_normal_initializer": {
            "code": "tf.random_normal_initializer(mean=0.0,stddev=0.05,seed=None)",
            "function_name": "random_normal_initializer",
            "args": [
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stddev",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "seed",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "random_normal_initializer"
            ],
            "torch": null,
            "tfjs": null
        },
        "print": {
            "code": "tf.print(*inputs,**kwargs)",
            "function_name": "print",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "print"
            ],
            "torch": null,
            "tfjs": "print"
        },
        "raggedtensorspec": {
            "code": "tf.RaggedTensorSpec(shape=None,dtype=tf.dtypes.float32,ragged_rank=None,row_splits_dtype=tf.dtypes.int64)",
            "function_name": "RaggedTensorSpec",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ragged_rank",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "row_splits_dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "RaggedTensorSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "parallel_stack": {
            "code": "tf.parallel_stack(values,name='parallel_stack')",
            "function_name": "parallel_stack",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "parallel_stack"
            ],
            "torch": null,
            "tfjs": null
        },
        "py_function": {
            "code": "tf.py_function(func,inp,Tout,name=None)",
            "function_name": "py_function",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "tout",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "py_function"
            ],
            "torch": null,
            "tfjs": null
        },
        "raggedtensor": {
            "code": "tf.RaggedTensor(values,row_splits,cached_row_lengths=None,cached_value_rowids=None,cached_nrows=None,internal=False,uniform_row_length=None)",
            "function_name": "RaggedTensor",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "row_splits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "cached_row_lengths",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cached_value_rowids",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "cached_nrows",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "internal",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "uniform_row_length",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "RaggedTensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "recompute_grad": {
            "code": "tf.recompute_grad(f)",
            "function_name": "recompute_grad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "recompute_grad"
            ],
            "torch": null,
            "tfjs": null
        },
        "pad": {
            "code": "tf.pad(tensor,paddings,mode='CONSTANT',constant_values=0,name=None)",
            "function_name": "pad",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "paddings"
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "constant_values",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "pad"
            ],
            "torch": null,
            "tfjs": "pad"
        },
        "optionalspec": {
            "code": "tf.OptionalSpec(value_structure)",
            "function_name": "OptionalSpec",
            "args": [
                {
                    "name": "value_structure",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "OptionalSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "operation": {
            "code": "tf.Operation(node_def,g,inputs=None,output_types=None,control_inputs=None,input_types=None,original_op=None,op_def=None)",
            "function_name": "Operation",
            "args": [
                {
                    "name": "node_def",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "g",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "inputs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_types",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "control_inputs",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "input_types",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "original_op",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "op_def",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "Operation"
            ],
            "torch": null,
            "tfjs": null
        },
        "no_op": {
            "code": "tf.no_op(name=None)",
            "function_name": "no_op",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "no_op"
            ],
            "torch": null,
            "tfjs": null
        },
        "no_gradient": {
            "code": "tf.no_gradient(op_type)",
            "function_name": "no_gradient",
            "args": [
                {
                    "name": "op_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "no_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "numpy_function": {
            "code": "tf.numpy_function(func,inp,Tout,name=None)",
            "function_name": "numpy_function",
            "args": [
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "tout",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "numpy_function"
            ],
            "torch": null,
            "tfjs": null
        },
        "norm": {
            "code": "tf.norm(tensor,ord='euclidean',axis=None,keepdims=None,name=None)",
            "function_name": "norm",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "ord",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "ord"
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "keepdims"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "norm"
            ],
            "torch": null,
            "tfjs": "norm"
        },
        "nondifferentiable_batch_function": {
            "code": "tf.nondifferentiable_batch_function(num_batch_threads,max_batch_size,batch_timeout_micros,allowed_batch_sizes=None,max_enqueued_batches=10,autograph=True)",
            "function_name": "nondifferentiable_batch_function",
            "args": [
                {
                    "name": "num_batch_threads",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "max_batch_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "batch_timeout_micros",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "allowed_batch_sizes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max_enqueued_batches",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "autograph",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "nondifferentiable_batch_function"
            ],
            "torch": null,
            "tfjs": null
        },
        "group": {
            "code": "tf.group(*inputs,**kwargs)",
            "function_name": "group",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "group"
            ],
            "torch": null,
            "tfjs": null
        },
        "module": {
            "code": "tf.Module(name=None)",
            "function_name": "Module",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "Module"
            ],
            "torch": null,
            "tfjs": null
        },
        "guarantee_const": {
            "code": "tf.guarantee_const(input,name=None)",
            "function_name": "guarantee_const",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "guarantee_const"
            ],
            "torch": null,
            "tfjs": null
        },
        "gradienttape": {
            "code": "tf.GradientTape(persistent=False,watch_accessed_variables=True)",
            "function_name": "GradientTape",
            "args": [
                {
                    "name": "persistent",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "watch_accessed_variables",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "GradientTape"
            ],
            "torch": null,
            "tfjs": null
        },
        "meshgrid": {
            "code": "tf.meshgrid(*args,**kwargs)",
            "function_name": "meshgrid",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "meshgrid"
            ],
            "torch": "meshgrid",
            "tfjs": null
        },
        "graph": {
            "code": "tf.Graph()",
            "function_name": "Graph",
            "args": [],
            "attrs": [
                "tf",
                "Graph"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_static_value": {
            "code": "tf.get_static_value(tensor,partial=False)",
            "function_name": "get_static_value",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "partial",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "get_static_value"
            ],
            "torch": null,
            "tfjs": null
        },
        "get_logger": {
            "code": "tf.get_logger()",
            "function_name": "get_logger",
            "args": [],
            "attrs": [
                "tf",
                "get_logger"
            ],
            "torch": null,
            "tfjs": null
        },
        "grad_pass_through": {
            "code": "tf.grad_pass_through(f)",
            "function_name": "grad_pass_through",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "grad_pass_through"
            ],
            "torch": null,
            "tfjs": null
        },
        "gather_nd": {
            "code": "tf.gather_nd(params,indices,batch_dims=0,name=None)",
            "function_name": "gather_nd",
            "args": [
                {
                    "name": "params",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "batch_dims",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "gather_nd"
            ],
            "torch": null,
            "tfjs": null
        },
        "fingerprint": {
            "code": "tf.fingerprint(data,method='farmhash64',name=None)",
            "function_name": "fingerprint",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "method",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "fingerprint"
            ],
            "torch": null,
            "tfjs": null
        },
        "extract_volume_patches": {
            "code": "tf.extract_volume_patches(input,ksizes,strides,padding,name=None)",
            "function_name": "extract_volume_patches",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ksizes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "padding",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "extract_volume_patches"
            ],
            "torch": null,
            "tfjs": null
        },
        "fill": {
            "code": "tf.fill(dims,value,name=None)",
            "function_name": "fill",
            "args": [
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "value"
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "tf",
                "fill"
            ],
            "torch": null,
            "tfjs": "fill"
        },
        "einsum": {
            "code": "tf.einsum(equation,*inputs,**kwargs)",
            "function_name": "einsum",
            "args": [
                {
                    "name": "equation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "equation"
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": ""
                }
            ],
            "attrs": [
                "tf",
                "einsum"
            ],
            "torch": "einsum",
            "tfjs": null
        },
        "edit_distance": {
            "code": "tf.edit_distance(hypothesis,truth,normalize=True,name='edit_distance')",
            "function_name": "edit_distance",
            "args": [
                {
                    "name": "hypothesis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "truth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "normalize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "edit_distance"
            ],
            "torch": null,
            "tfjs": null
        },
        "devicespec": {
            "code": "tf.DeviceSpec(job=None,replica=None,task=None,device_type=None,device_index=None)",
            "function_name": "DeviceSpec",
            "args": [
                {
                    "name": "job",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "replica",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "task",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device_type",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device_index",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "DeviceSpec"
            ],
            "torch": null,
            "tfjs": null
        },
        "executing_eagerly": {
            "code": "tf.executing_eagerly()",
            "function_name": "executing_eagerly",
            "args": [],
            "attrs": [
                "tf",
                "executing_eagerly"
            ],
            "torch": null,
            "tfjs": null
        },
        "dynamic_partition": {
            "code": "tf.dynamic_partition(data,partitions,num_partitions,name=None)",
            "function_name": "dynamic_partition",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "partitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "num_partitions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "dynamic_partition"
            ],
            "torch": null,
            "tfjs": null
        },
        "dynamic_stitch": {
            "code": "tf.dynamic_stitch(indices,data,name=None)",
            "function_name": "dynamic_stitch",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "dynamic_stitch"
            ],
            "torch": null,
            "tfjs": null
        },
        "ensure_shape": {
            "code": "tf.ensure_shape(x,shape,name=None)",
            "function_name": "ensure_shape",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "ensure_shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "eigvals": {
            "code": "tf.eigvals(tensor,name=None)",
            "function_name": "eigvals",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "eigvals"
            ],
            "torch": null,
            "tfjs": null
        },
        "custom_gradient": {
            "code": "tf.custom_gradient(f=None)",
            "function_name": "custom_gradient",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "custom_gradient"
            ],
            "torch": null,
            "tfjs": null
        },
        "eig": {
            "code": "tf.eig(tensor,name=None)",
            "function_name": "eig",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "eig"
            ],
            "torch": "eig",
            "tfjs": null
        },
        "constant_initializer": {
            "code": "tf.constant_initializer(value=0)",
            "function_name": "constant_initializer",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "constant_initializer"
            ],
            "torch": null,
            "tfjs": null
        },
        "criticalsection": {
            "code": "tf.CriticalSection(name=None,shared_name=None,critical_section_def=None,import_scope=None)",
            "function_name": "CriticalSection",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "shared_name",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "critical_section_def",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "import_scope",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "CriticalSection"
            ],
            "torch": null,
            "tfjs": null
        },
        "convert_to_tensor": {
            "code": "tf.convert_to_tensor(value,dtype=None,dtype_hint=None,name=None)",
            "function_name": "convert_to_tensor",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype_hint",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "convert_to_tensor"
            ],
            "torch": null,
            "tfjs": null
        },
        "device": {
            "code": "tf.device(device_name)",
            "function_name": "device",
            "args": [
                {
                    "name": "device_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "device"
            ],
            "torch": null,
            "tfjs": null
        },
        "control_dependencies": {
            "code": "tf.control_dependencies(control_inputs)",
            "function_name": "control_dependencies",
            "args": [
                {
                    "name": "control_inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "control_dependencies"
            ],
            "torch": null,
            "tfjs": null
        },
        "cond": {
            "code": "tf.cond(pred,true_fn=None,false_fn=None,name=None)",
            "function_name": "cond",
            "args": [
                {
                    "name": "pred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "true_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "false_fn",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "cond"
            ],
            "torch": null,
            "tfjs": null
        },
        "clip_by_value": {
            "code": "tf.clip_by_value(t,clip_value_min,clip_value_max,name=None)",
            "function_name": "clip_by_value",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "clip_value_min",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "clip_value_max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "clip_by_value"
            ],
            "torch": null,
            "tfjs": null
        },
        "clip_by_norm": {
            "code": "tf.clip_by_norm(t,clip_norm,axes=None,name=None)",
            "function_name": "clip_by_norm",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "clip_norm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "clip_by_norm"
            ],
            "torch": null,
            "tfjs": null
        },
        "clip_by_global_norm": {
            "code": "tf.clip_by_global_norm(t_list,clip_norm,use_norm=None,name=None)",
            "function_name": "clip_by_global_norm",
            "args": [
                {
                    "name": "t_list",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "clip_norm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "use_norm",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "clip_by_global_norm"
            ],
            "torch": null,
            "tfjs": null
        },
        "case": {
            "code": "tf.case(pred_fn_pairs,default=None,exclusive=False,strict=False,name='case')",
            "function_name": "case",
            "args": [
                {
                    "name": "pred_fn_pairs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "default",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "exclusive",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "strict",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "case"
            ],
            "torch": null,
            "tfjs": null
        },
        "broadcast_static_shape": {
            "code": "tf.broadcast_static_shape(shape_x,shape_y)",
            "function_name": "broadcast_static_shape",
            "args": [
                {
                    "name": "shape_x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape_y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "broadcast_static_shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "broadcast_to": {
            "code": "tf.broadcast_to(input,shape,name=None)",
            "function_name": "broadcast_to",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "broadcast_to"
            ],
            "torch": null,
            "tfjs": null
        },
        "broadcast_dynamic_shape": {
            "code": "tf.broadcast_dynamic_shape(shape_x,shape_y)",
            "function_name": "broadcast_dynamic_shape",
            "args": [
                {
                    "name": "shape_x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape_y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "broadcast_dynamic_shape"
            ],
            "torch": null,
            "tfjs": null
        },
        "bitcast": {
            "code": "tf.bitcast(input,type,name=None)",
            "function_name": "bitcast",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "bitcast"
            ],
            "torch": null,
            "tfjs": null
        },
        "batch_to_space": {
            "code": "tf.batch_to_space(input,block_shape,crops,name=None)",
            "function_name": "batch_to_space",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "block_shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "crops",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "batch_to_space"
            ],
            "torch": null,
            "tfjs": null
        },
        "argsort": {
            "code": "tf.argsort(values,axis=-1,direction='ASCENDING',stable=False,name=None)",
            "function_name": "argsort",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "direction",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stable",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "tf",
                "argsort"
            ],
            "torch": null,
            "tfjs": null
        }
    },
    "tfjs": {
        "tensor": {
            "code": "tf.tensor(values,shape?,dtype?)",
            "function_name": "tensor",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": "dtype",
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "tensor"
            ],
            "torch": "tensor",
            "tf": "tensor"
        },
        "scalar": {
            "code": "tf.scalar(value,dtype?)",
            "function_name": "scalar",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "scalar"
            ],
            "torch": null,
            "tf": "scalar"
        },
        "tensor1d": {
            "code": "tf.tensor1d(values,dtype?)",
            "function_name": "tensor1d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "tensor1d"
            ],
            "torch": null,
            "tf": null
        },
        "tensor2d": {
            "code": "tf.tensor2d(values,shape?,dtype?)",
            "function_name": "tensor2d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "tensor2d"
            ],
            "torch": null,
            "tf": null
        },
        "tensor3d": {
            "code": "tf.tensor3d(values,shape?,dtype?)",
            "function_name": "tensor3d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "tensor3d"
            ],
            "torch": null,
            "tf": null
        },
        "tensor4d": {
            "code": "tf.tensor4d(values,shape?,dtype?)",
            "function_name": "tensor4d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "tensor4d"
            ],
            "torch": null,
            "tf": null
        },
        "tensor5d": {
            "code": "tf.tensor5d(values,shape?,dtype?)",
            "function_name": "tensor5d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "tensor5d"
            ],
            "torch": null,
            "tf": null
        },
        "tensor6d": {
            "code": "tf.tensor6d(values,shape?,dtype?)",
            "function_name": "tensor6d",
            "args": [
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "tensor6d"
            ],
            "torch": null,
            "tf": null
        },
        "buffer": {
            "code": "buffer()",
            "function_name": "buffer",
            "args": [],
            "attrs": [
                "buffer"
            ],
            "torch": null,
            "tf": null
        },
        "clone": {
            "code": "clone()",
            "function_name": "clone",
            "args": [],
            "attrs": [
                "clone"
            ],
            "torch": null,
            "tf": null
        },
        "complex": {
            "code": "tf.complex(real,imag)",
            "function_name": "complex",
            "args": [
                {
                    "name": "real",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "real"
                },
                {
                    "name": "imag",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "imag"
                }
            ],
            "attrs": [
                "tf",
                "complex"
            ],
            "torch": null,
            "tf": "complex"
        },
        "eye": {
            "code": "tf.eye(numRows,numColumns?,batchShape?,dtype?)",
            "function_name": "eye",
            "args": [
                {
                    "name": "numrows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "numcolumns",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "batchshape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": "dtype",
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "eye"
            ],
            "torch": "eye",
            "tf": "eye"
        },
        "fill": {
            "code": "tf.fill(shape,value,dtype?)",
            "function_name": "fill",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "value"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "fill"
            ],
            "torch": null,
            "tf": "fill"
        },
        "imag": {
            "code": "tf.imag(input)",
            "function_name": "imag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "imag"
            ],
            "torch": "imag",
            "tf": "imag"
        },
        "linspace": {
            "code": "tf.linspace(start,stop,num)",
            "function_name": "linspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tf": "start"
                },
                {
                    "name": "stop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "stop"
                },
                {
                    "name": "num",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "num"
                }
            ],
            "attrs": [
                "tf",
                "linspace"
            ],
            "torch": "linspace",
            "tf": "linspace"
        },
        "onehot": {
            "code": "tf.oneHot(indices,depth,onValue?,offValue?)",
            "function_name": "oneHot",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "onvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "offvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "oneHot"
            ],
            "torch": null,
            "tf": null
        },
        "ones": {
            "code": "tf.initializers.ones()",
            "function_name": "ones",
            "args": [],
            "attrs": [
                "tf",
                "initializers",
                "ones"
            ],
            "torch": "ones",
            "tf": "ones"
        },
        "oneslike": {
            "code": "tf.onesLike(x)",
            "function_name": "onesLike",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "onesLike"
            ],
            "torch": null,
            "tf": null
        },
        "print": {
            "code": "print(verbose?)",
            "function_name": "print",
            "args": [
                {
                    "name": "verbose",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "print"
            ],
            "torch": null,
            "tf": "print"
        },
        "range": {
            "code": "tf.range(start,stop,step?,dtype?)",
            "function_name": "range",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "start",
                    "tf": null
                },
                {
                    "name": "stop",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "step",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": "step",
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": "dtype",
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "range"
            ],
            "torch": "range",
            "tf": "range"
        },
        "real": {
            "code": "tf.real(input)",
            "function_name": "real",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "real"
            ],
            "torch": "real",
            "tf": "real"
        },
        "truncatednormal": {
            "code": "tf.initializers.truncatedNormal(args)",
            "function_name": "truncatedNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "truncatedNormal"
            ],
            "torch": null,
            "tf": "truncatednormal"
        },
        "variable": {
            "code": "tf.variable(initialValue,trainable?,name?,dtype?)",
            "function_name": "variable",
            "args": [
                {
                    "name": "initialvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "trainable",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": "name"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "variable"
            ],
            "torch": null,
            "tf": "variable"
        },
        "zeros": {
            "code": "tf.initializers.zeros()",
            "function_name": "zeros",
            "args": [],
            "attrs": [
                "tf",
                "initializers",
                "zeros"
            ],
            "torch": "zeros",
            "tf": "zeros"
        },
        "zeroslike": {
            "code": "tf.zerosLike(x)",
            "function_name": "zerosLike",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "zerosLike"
            ],
            "torch": null,
            "tf": null
        },
        "flatten": {
            "code": "tf.util.flatten(arr,result?,skipTypedArray?)",
            "function_name": "flatten",
            "args": [
                {
                    "name": "arr",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "result",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "skiptypedarray",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "flatten"
            ],
            "torch": null,
            "tf": "flatten"
        },
        "asscalar": {
            "code": "asScalar()",
            "function_name": "asScalar",
            "args": [],
            "attrs": [
                "asScalar"
            ],
            "torch": null,
            "tf": null
        },
        "as1d": {
            "code": "as1D()",
            "function_name": "as1D",
            "args": [],
            "attrs": [
                "as1D"
            ],
            "torch": null,
            "tf": null
        },
        "as2d": {
            "code": "as2D(rows,columns)",
            "function_name": "as2D",
            "args": [
                {
                    "name": "rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "as2D"
            ],
            "torch": null,
            "tf": null
        },
        "as3d": {
            "code": "as3D(rows,columns,depth)",
            "function_name": "as3D",
            "args": [
                {
                    "name": "rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "as3D"
            ],
            "torch": null,
            "tf": null
        },
        "as4d": {
            "code": "as4D(rows,columns,depth,depth2)",
            "function_name": "as4D",
            "args": [
                {
                    "name": "rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "depth2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "as4D"
            ],
            "torch": null,
            "tf": null
        },
        "as5d": {
            "code": "as5D(rows,columns,depth,depth2,depth3)",
            "function_name": "as5D",
            "args": [
                {
                    "name": "rows",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "columns",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "depth",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "depth2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "depth3",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "as5D"
            ],
            "torch": null,
            "tf": null
        },
        "astype": {
            "code": "asType(dtype)",
            "function_name": "asType",
            "args": [
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "asType"
            ],
            "torch": null,
            "tf": null
        },
        "buffersync": {
            "code": "bufferSync()",
            "function_name": "bufferSync",
            "args": [],
            "attrs": [
                "bufferSync"
            ],
            "torch": null,
            "tf": null
        },
        "array": {
            "code": "tf.data.array(items)",
            "function_name": "array",
            "args": [
                {
                    "name": "items",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "array"
            ],
            "torch": null,
            "tf": null
        },
        "arraysync": {
            "code": "arraySync()",
            "function_name": "arraySync",
            "args": [],
            "attrs": [
                "arraySync"
            ],
            "torch": null,
            "tf": null
        },
        "data": {
            "code": "data()",
            "function_name": "data",
            "args": [],
            "attrs": [
                "data"
            ],
            "torch": null,
            "tf": null
        },
        "datasync": {
            "code": "dataSync()",
            "function_name": "dataSync",
            "args": [],
            "attrs": [
                "dataSync"
            ],
            "torch": null,
            "tf": null
        },
        "dispose": {
            "code": "tf.dispose(container)",
            "function_name": "dispose",
            "args": [
                {
                    "name": "container",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "dispose"
            ],
            "torch": null,
            "tf": null
        },
        "tofloat": {
            "code": "toFloat()",
            "function_name": "toFloat",
            "args": [],
            "attrs": [
                "toFloat"
            ],
            "torch": null,
            "tf": null
        },
        "toint": {
            "code": "toInt()",
            "function_name": "toInt",
            "args": [],
            "attrs": [
                "toInt"
            ],
            "torch": null,
            "tf": null
        },
        "tobool": {
            "code": "toBool()",
            "function_name": "toBool",
            "args": [],
            "attrs": [
                "toBool"
            ],
            "torch": null,
            "tf": null
        },
        "reshape": {
            "code": "tf.layers.reshape(args)",
            "function_name": "reshape",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "reshape"
            ],
            "torch": "reshape",
            "tf": "reshape"
        },
        "reshapeas": {
            "code": "reshapeAs(x)",
            "function_name": "reshapeAs",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "reshapeAs"
            ],
            "torch": null,
            "tf": null
        },
        "expanddims": {
            "code": "tf.expandDims(x,axis?)",
            "function_name": "expandDims",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "expandDims"
            ],
            "torch": null,
            "tf": null
        },
        "cumsum": {
            "code": "tf.cumsum(x,axis?,exclusive?,reverse?)",
            "function_name": "cumsum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "exclusive",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "reverse",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "cumsum"
            ],
            "torch": "cumsum",
            "tf": "cumsum"
        },
        "squeeze": {
            "code": "tf.squeeze(x,axis?)",
            "function_name": "squeeze",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "squeeze"
            ],
            "torch": "squeeze",
            "tf": "squeeze"
        },
        "tostring": {
            "code": "toString(verbose?)",
            "function_name": "toString",
            "args": [
                {
                    "name": "verbose",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                }
            ],
            "attrs": [
                "toString"
            ],
            "torch": null,
            "tf": null
        },
        "assign": {
            "code": "assign(newValue)",
            "function_name": "assign",
            "args": [
                {
                    "name": "newvalue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "assign"
            ],
            "torch": null,
            "tf": null
        },
        "set": {
            "code": "set(value,...locs)",
            "function_name": "set",
            "args": [
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "set"
            ],
            "torch": null,
            "tf": null
        },
        "get": {
            "code": "get(...locs)",
            "function_name": "get",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "get"
            ],
            "torch": null,
            "tf": "get"
        },
        "totensor": {
            "code": "toTensor()",
            "function_name": "toTensor",
            "args": [],
            "attrs": [
                "toTensor"
            ],
            "torch": null,
            "tf": null
        },
        "batchtospacend": {
            "code": "tf.batchToSpaceND(x,blockShape,crops)",
            "function_name": "batchToSpaceND",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "crops",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "batchToSpaceND"
            ],
            "torch": null,
            "tf": null
        },
        "broadcastto": {
            "code": "tf.broadcastTo(x,shape)",
            "function_name": "broadcastTo",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "broadcastTo"
            ],
            "torch": null,
            "tf": null
        },
        "cast": {
            "code": "tf.cast(x,dtype)",
            "function_name": "cast",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "x"
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "dtype"
                }
            ],
            "attrs": [
                "tf",
                "cast"
            ],
            "torch": null,
            "tf": "cast"
        },
        "depthtospace": {
            "code": "tf.depthToSpace(x,blockSize,dataFormat?)",
            "function_name": "depthToSpace",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "blocksize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "depthToSpace"
            ],
            "torch": null,
            "tf": null
        },
        "pad": {
            "code": "tf.pad(x,paddings,constantValue?)",
            "function_name": "pad",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "paddings"
                },
                {
                    "name": "constantvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "pad"
            ],
            "torch": null,
            "tf": "pad"
        },
        "setdiff1dasync": {
            "code": "tf.setdiff1dAsync(x,y)",
            "function_name": "setdiff1dAsync",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "setdiff1dAsync"
            ],
            "torch": null,
            "tf": null
        },
        "spacetobatchnd": {
            "code": "tf.spaceToBatchND(x,blockShape,paddings)",
            "function_name": "spaceToBatchND",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "blockshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "paddings",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "spaceToBatchND"
            ],
            "torch": null,
            "tf": null
        },
        "booleanmaskasync": {
            "code": "tf.booleanMaskAsync(tensor,mask,axis?)",
            "function_name": "booleanMaskAsync",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "booleanMaskAsync"
            ],
            "torch": null,
            "tf": null
        },
        "concat": {
            "code": "tf.concat(tensors,axis?)",
            "function_name": "concat",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "concat"
            ],
            "torch": null,
            "tf": "concat"
        },
        "gather": {
            "code": "tf.gather(x,indices,axis?)",
            "function_name": "gather",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "indices"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "gather"
            ],
            "torch": "gather",
            "tf": "gather"
        },
        "reverse": {
            "code": "tf.reverse(x,axis?)",
            "function_name": "reverse",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "reverse"
            ],
            "torch": null,
            "tf": "reverse"
        },
        "slice": {
            "code": "tf.slice(x,begin,size?)",
            "function_name": "slice",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "begin"
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": "size"
                }
            ],
            "attrs": [
                "tf",
                "slice"
            ],
            "torch": null,
            "tf": "slice"
        },
        "split": {
            "code": "tf.split(x,numOrSizeSplits,axis?)",
            "function_name": "split",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "numorsizesplits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "split"
            ],
            "torch": "split",
            "tf": "split"
        },
        "stack": {
            "code": "tf.stack(tensors,axis?)",
            "function_name": "stack",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "tensors",
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "stack"
            ],
            "torch": "stack",
            "tf": "stack"
        },
        "tile": {
            "code": "tf.tile(x,reps)",
            "function_name": "tile",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "reps",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "tile"
            ],
            "torch": null,
            "tf": "tile"
        },
        "unstack": {
            "code": "tf.unstack(x,axis?)",
            "function_name": "unstack",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "unstack"
            ],
            "torch": null,
            "tf": "unstack"
        },
        "multinomial": {
            "code": "tf.multinomial(logits,numSamples,seed?,normalized?)",
            "function_name": "multinomial",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "numsamples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "multinomial"
            ],
            "torch": "multinomial",
            "tf": null
        },
        "randomgamma": {
            "code": "tf.randomGamma(shape,alpha,beta?,dtype?,seed?)",
            "function_name": "randomGamma",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "randomGamma"
            ],
            "torch": null,
            "tf": null
        },
        "randomnormal": {
            "code": "tf.initializers.randomNormal(args)",
            "function_name": "randomNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "randomNormal"
            ],
            "torch": null,
            "tf": null
        },
        "randomuniform": {
            "code": "tf.initializers.randomUniform(args)",
            "function_name": "randomUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "randomUniform"
            ],
            "torch": null,
            "tf": null
        },
        "sequential": {
            "code": "tf.sequential(config?)",
            "function_name": "sequential",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "sequential"
            ],
            "torch": null,
            "tf": "sequential"
        },
        "model": {
            "code": "tf.model(args)",
            "function_name": "model",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "model"
            ],
            "torch": null,
            "tf": "model"
        },
        "input": {
            "code": "tf.input(config)",
            "function_name": "input",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "input"
            ]
        },
        "loadgraphmodel": {
            "code": "tf.loadGraphModel(modelUrl,options?)",
            "function_name": "loadGraphModel",
            "args": [
                {
                    "name": "modelurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "options",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "loadGraphModel"
            ],
            "torch": null,
            "tf": null
        },
        "loadlayersmodel": {
            "code": "tf.loadLayersModel(pathOrIOHandler,options?)",
            "function_name": "loadLayersModel",
            "args": [
                {
                    "name": "pathoriohandler",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "options",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "loadLayersModel"
            ],
            "torch": null,
            "tf": null
        },
        "browserdownloads": {
            "code": "tf.io.browserDownloads(fileNamePrefix?)",
            "function_name": "browserDownloads",
            "args": [
                {
                    "name": "filenameprefix",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "browserDownloads"
            ],
            "torch": null,
            "tf": null
        },
        "browserfiles": {
            "code": "tf.io.browserFiles(files)",
            "function_name": "browserFiles",
            "args": [
                {
                    "name": "files",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "browserFiles"
            ],
            "torch": null,
            "tf": null
        },
        "http": {
            "code": "tf.io.http(path,loadOptions?)",
            "function_name": "http",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "loadoptions",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "io",
                "http"
            ],
            "torch": null,
            "tf": null
        },
        "copymodel": {
            "code": "tf.io.copyModel(sourceURL,destURL)",
            "function_name": "copyModel",
            "args": [
                {
                    "name": "sourceurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "desturl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "io",
                "copyModel"
            ],
            "torch": null,
            "tf": null
        },
        "listmodels": {
            "code": "tf.io.listModels()",
            "function_name": "listModels",
            "args": [],
            "attrs": [
                "tf",
                "io",
                "listModels"
            ],
            "torch": null,
            "tf": null
        },
        "movemodel": {
            "code": "tf.io.moveModel(sourceURL,destURL)",
            "function_name": "moveModel",
            "args": [
                {
                    "name": "sourceurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "desturl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "io",
                "moveModel"
            ],
            "torch": null,
            "tf": null
        },
        "removemodel": {
            "code": "tf.io.removeModel(url)",
            "function_name": "removeModel",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "io",
                "removeModel"
            ],
            "torch": null,
            "tf": null
        },
        "registerclass": {
            "code": "tf.registerClass(cls)",
            "function_name": "registerClass",
            "args": [
                {
                    "name": "cls",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "registerClass"
            ],
            "torch": null,
            "tf": null
        },
        "predict": {
            "code": "predict(x,args?)",
            "function_name": "predict",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "predict"
            ],
            "torch": null,
            "tf": null
        },
        "execute": {
            "code": "execute(inputs,outputs?)",
            "function_name": "execute",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "execute"
            ],
            "torch": null,
            "tf": null
        },
        "executeasync": {
            "code": "executeAsync(inputs,outputs?)",
            "function_name": "executeAsync",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "executeAsync"
            ],
            "torch": null,
            "tf": null
        },
        "summary": {
            "code": "summary(lineLength?,positions?,printFn?)",
            "function_name": "summary",
            "args": [
                {
                    "name": "linelength",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                },
                {
                    "name": "positions",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "printfn",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "summary"
            ],
            "torch": null,
            "tf": null
        },
        "compile": {
            "code": "compile(args)",
            "function_name": "compile",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "compile"
            ],
            "torch": null,
            "tf": "compile"
        },
        "evaluate": {
            "code": "evaluate(x,y,args?)",
            "function_name": "evaluate",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "evaluate"
            ],
            "torch": null,
            "tf": null
        },
        "evaluatedataset": {
            "code": "evaluateDataset(dataset,args)",
            "function_name": "evaluateDataset",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "evaluateDataset"
            ],
            "torch": null,
            "tf": null
        },
        "predictonbatch": {
            "code": "predictOnBatch(x)",
            "function_name": "predictOnBatch",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "predictOnBatch"
            ],
            "torch": null,
            "tf": null
        },
        "fit": {
            "code": "fit(x,y,args?)",
            "function_name": "fit",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "fit"
            ],
            "torch": null,
            "tf": null
        },
        "fitdataset": {
            "code": "fitDataset(dataset,args)",
            "function_name": "fitDataset",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "fitDataset"
            ],
            "torch": null,
            "tf": null
        },
        "trainonbatch": {
            "code": "trainOnBatch(x,y)",
            "function_name": "trainOnBatch",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "y",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "trainOnBatch"
            ],
            "torch": null,
            "tf": null
        },
        "save": {
            "code": "save(handlerOrURL,config?)",
            "function_name": "save",
            "args": [
                {
                    "name": "handlerorurl",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "save"
            ],
            "torch": null,
            "tf": "save"
        },
        "getlayer": {
            "code": "getLayer(name?,index?)",
            "function_name": "getLayer",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "getLayer"
            ],
            "torch": null,
            "tf": null
        },
        "add": {
            "code": "tf.add(a,b)",
            "function_name": "add",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "add"
            ],
            "torch": "add",
            "tf": "add"
        },
        "deregisterop": {
            "code": "tf.deregisterOp(name)",
            "function_name": "deregisterOp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "deregisterOp"
            ],
            "torch": null,
            "tf": null
        },
        "getregisteredop": {
            "code": "tf.getRegisteredOp(name)",
            "function_name": "getRegisteredOp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "getRegisteredOp"
            ],
            "torch": null,
            "tf": null
        },
        "registerop": {
            "code": "tf.registerOp(name,opFunc)",
            "function_name": "registerOp",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "opfunc",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "registerOp"
            ],
            "torch": null,
            "tf": null
        },
        "elu": {
            "code": "tf.elu(x)",
            "function_name": "elu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "elu"
            ],
            "torch": "elu",
            "tf": "elu"
        },
        "leakyrelu": {
            "code": "tf.leakyRelu(x,alpha?)",
            "function_name": "leakyRelu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": "alpha"
                }
            ],
            "attrs": [
                "tf",
                "leakyRelu"
            ],
            "torch": null,
            "tf": "leakyrelu"
        },
        "prelu": {
            "code": "tf.prelu(x,alpha)",
            "function_name": "prelu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "prelu"
            ],
            "torch": "prelu",
            "tf": "prelu"
        },
        "relu": {
            "code": "tf.relu(x)",
            "function_name": "relu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "relu"
            ],
            "torch": "relu",
            "tf": "relu"
        },
        "softmax": {
            "code": "tf.softmax(logits,dim?)",
            "function_name": "softmax",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": "dim",
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "softmax"
            ],
            "torch": "softmax",
            "tf": "softmax"
        },
        "thresholdedrelu": {
            "code": "tf.layers.thresholdedReLU(args?)",
            "function_name": "thresholdedReLU",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "thresholdedReLU"
            ],
            "torch": null,
            "tf": "thresholdedrelu"
        },
        "activation": {
            "code": "tf.layers.activation(args)",
            "function_name": "activation",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "activation"
            ],
            "torch": null,
            "tf": "activation"
        },
        "dense": {
            "code": "tf.layers.dense(args)",
            "function_name": "dense",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "dense"
            ],
            "torch": null,
            "tf": "dense"
        },
        "dropout": {
            "code": "tf.dropout(x,rate,noiseShape?,seed?)",
            "function_name": "dropout",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "rate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "noiseshape",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": "seed"
                }
            ],
            "attrs": [
                "tf",
                "dropout"
            ],
            "torch": "dropout",
            "tf": "dropout"
        },
        "embedding": {
            "code": "tf.layers.embedding(args)",
            "function_name": "embedding",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "embedding"
            ],
            "torch": "embedding",
            "tf": "embedding"
        },
        "permute": {
            "code": "tf.layers.permute(args)",
            "function_name": "permute",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "permute"
            ],
            "torch": null,
            "tf": "permute"
        },
        "repeatvector": {
            "code": "tf.layers.repeatVector(args)",
            "function_name": "repeatVector",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "repeatVector"
            ],
            "torch": null,
            "tf": "repeatvector"
        },
        "spatialdropout1d": {
            "code": "tf.layers.spatialDropout1d(args)",
            "function_name": "spatialDropout1d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "spatialDropout1d"
            ],
            "torch": null,
            "tf": "spatialdropout1d"
        },
        "conv1d": {
            "code": "tf.conv1d(x,filter,stride,pad,dataFormat?,dilation?,dimRoundingMode?)",
            "function_name": "conv1d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": "stride",
                    "tf": null
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dilation",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": "dilation",
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv1d"
            ],
            "torch": "conv1d",
            "tf": "conv1d"
        },
        "conv2d": {
            "code": "tf.conv2d(x,filter,strides,pad,dataFormat?,dilations?,dimRoundingMode?)",
            "function_name": "conv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv2d"
            ],
            "torch": "conv2d",
            "tf": "conv2d"
        },
        "conv2dtranspose": {
            "code": "tf.conv2dTranspose(x,filter,outputShape,strides,pad,dimRoundingMode?)",
            "function_name": "conv2dTranspose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv2dTranspose"
            ],
            "torch": null,
            "tf": "conv2dtranspose"
        },
        "conv3d": {
            "code": "tf.conv3d(x,filter,strides,pad,dataFormat?,dilations?)",
            "function_name": "conv3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv3d"
            ],
            "torch": "conv3d",
            "tf": "conv3d"
        },
        "cropping2d": {
            "code": "tf.layers.cropping2D(args)",
            "function_name": "cropping2D",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "cropping2D"
            ],
            "torch": null,
            "tf": "cropping2d"
        },
        "depthwiseconv2d": {
            "code": "tf.depthwiseConv2d(x,filter,strides,pad,dataFormat?,dilations?,dimRoundingMode?)",
            "function_name": "depthwiseConv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "depthwiseConv2d"
            ],
            "torch": null,
            "tf": "depthwiseconv2d"
        },
        "separableconv2d": {
            "code": "tf.separableConv2d(x,depthwiseFilter,pointwiseFilter,strides,pad,dilation?,dataFormat?)",
            "function_name": "separableConv2d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "depthwisefilter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "pointwisefilter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tf": null
                },
                {
                    "name": "dilation",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "separableConv2d"
            ],
            "torch": null,
            "tf": "separableconv2d"
        },
        "upsampling2d": {
            "code": "tf.layers.upSampling2d(args)",
            "function_name": "upSampling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "upSampling2d"
            ],
            "torch": null,
            "tf": "upsampling2d"
        },
        "average": {
            "code": "tf.layers.average(args?)",
            "function_name": "average",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "average"
            ],
            "torch": null,
            "tf": "average"
        },
        "concatenate": {
            "code": "concatenate(dataset)",
            "function_name": "concatenate",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "concatenate"
            ],
            "torch": null,
            "tf": "concatenate"
        },
        "dot": {
            "code": "tf.dot(t1,t2)",
            "function_name": "dot",
            "args": [
                {
                    "name": "t1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "t2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "dot"
            ],
            "torch": "dot",
            "tf": "dot"
        },
        "maximum": {
            "code": "tf.maximum(a,b)",
            "function_name": "maximum",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "maximum"
            ],
            "torch": null,
            "tf": "maximum"
        },
        "minimum": {
            "code": "tf.minimum(a,b)",
            "function_name": "minimum",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "minimum"
            ],
            "torch": null,
            "tf": "minimum"
        },
        "multiply": {
            "code": "tf.layers.multiply(args?)",
            "function_name": "multiply",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "multiply"
            ],
            "torch": null,
            "tf": "multiply"
        },
        "batchnormalization": {
            "code": "tf.layers.batchNormalization(args?)",
            "function_name": "batchNormalization",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "batchNormalization"
            ],
            "torch": null,
            "tf": "batchnormalization"
        },
        "layernormalization": {
            "code": "tf.layers.layerNormalization(args?)",
            "function_name": "layerNormalization",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "layerNormalization"
            ],
            "torch": null,
            "tf": "layernormalization"
        },
        "averagepooling1d": {
            "code": "tf.layers.averagePooling1d(args)",
            "function_name": "averagePooling1d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "averagePooling1d"
            ],
            "torch": null,
            "tf": "averagepooling1d"
        },
        "averagepooling2d": {
            "code": "tf.layers.averagePooling2d(args)",
            "function_name": "averagePooling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "averagePooling2d"
            ],
            "torch": null,
            "tf": "averagepooling2d"
        },
        "averagepooling3d": {
            "code": "tf.layers.averagePooling3d(args)",
            "function_name": "averagePooling3d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "averagePooling3d"
            ],
            "torch": null,
            "tf": "averagepooling3d"
        },
        "globalaveragepooling1d": {
            "code": "tf.layers.globalAveragePooling1d(args?)",
            "function_name": "globalAveragePooling1d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "globalAveragePooling1d"
            ],
            "torch": null,
            "tf": "globalaveragepooling1d"
        },
        "globalaveragepooling2d": {
            "code": "tf.layers.globalAveragePooling2d(args)",
            "function_name": "globalAveragePooling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "globalAveragePooling2d"
            ],
            "torch": null,
            "tf": "globalaveragepooling2d"
        },
        "globalmaxpooling1d": {
            "code": "tf.layers.globalMaxPooling1d(args?)",
            "function_name": "globalMaxPooling1d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "globalMaxPooling1d"
            ],
            "torch": null,
            "tf": null
        },
        "globalmaxpooling2d": {
            "code": "tf.layers.globalMaxPooling2d(args)",
            "function_name": "globalMaxPooling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "globalMaxPooling2d"
            ],
            "torch": null,
            "tf": null
        },
        "maxpooling1d": {
            "code": "tf.layers.maxPooling1d(args)",
            "function_name": "maxPooling1d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "maxPooling1d"
            ],
            "torch": null,
            "tf": null
        },
        "maxpooling2d": {
            "code": "tf.layers.maxPooling2d(args)",
            "function_name": "maxPooling2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "maxPooling2d"
            ],
            "torch": null,
            "tf": null
        },
        "maxpooling3d": {
            "code": "tf.layers.maxPooling3d(args)",
            "function_name": "maxPooling3d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "maxPooling3d"
            ],
            "torch": null,
            "tf": null
        },
        "gru": {
            "code": "tf.layers.gru(args)",
            "function_name": "gru",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gru"
            ],
            "torch": null,
            "tf": "gru"
        },
        "grucell": {
            "code": "tf.layers.gruCell(args)",
            "function_name": "gruCell",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gruCell"
            ],
            "torch": null,
            "tf": "grucell"
        },
        "lstm": {
            "code": "tf.layers.lstm(args)",
            "function_name": "lstm",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "lstm"
            ],
            "torch": null,
            "tf": "lstm"
        },
        "lstmcell": {
            "code": "tf.layers.lstmCell(args)",
            "function_name": "lstmCell",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "lstmCell"
            ],
            "torch": null,
            "tf": "lstmcell"
        },
        "rnn": {
            "code": "tf.layers.rnn(args)",
            "function_name": "rnn",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "rnn"
            ],
            "torch": null,
            "tf": "rnn"
        },
        "simplernn": {
            "code": "tf.layers.simpleRNN(args)",
            "function_name": "simpleRNN",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "simpleRNN"
            ],
            "torch": null,
            "tf": "simplernn"
        },
        "simplernncell": {
            "code": "tf.layers.simpleRNNCell(args)",
            "function_name": "simpleRNNCell",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "simpleRNNCell"
            ],
            "torch": null,
            "tf": "simplernncell"
        },
        "stackedrnncells": {
            "code": "tf.layers.stackedRNNCells(args)",
            "function_name": "stackedRNNCells",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "stackedRNNCells"
            ],
            "torch": null,
            "tf": "stackedrnncells"
        },
        "bidirectional": {
            "code": "tf.layers.bidirectional(args)",
            "function_name": "bidirectional",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "bidirectional"
            ],
            "torch": null,
            "tf": "bidirectional"
        },
        "timedistributed": {
            "code": "tf.layers.timeDistributed(args)",
            "function_name": "timeDistributed",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "timeDistributed"
            ],
            "torch": null,
            "tf": "timedistributed"
        },
        "apply": {
            "code": "apply(inputs,kwargs?)",
            "function_name": "apply",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kwargs",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "apply"
            ],
            "torch": null,
            "tf": null
        },
        "countparams": {
            "code": "countParams()",
            "function_name": "countParams",
            "args": [],
            "attrs": [
                "countParams"
            ],
            "torch": null,
            "tf": null
        },
        "build": {
            "code": "build(inputShape)",
            "function_name": "build",
            "args": [
                {
                    "name": "inputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "build"
            ],
            "torch": null,
            "tf": null
        },
        "getweights": {
            "code": "getWeights(trainableOnly?)",
            "function_name": "getWeights",
            "args": [
                {
                    "name": "trainableonly",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                }
            ],
            "attrs": [
                "getWeights"
            ],
            "torch": null,
            "tf": null
        },
        "setweights": {
            "code": "setWeights(weights)",
            "function_name": "setWeights",
            "args": [
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "setWeights"
            ],
            "torch": null,
            "tf": null
        },
        "addweight": {
            "code": "addWeight(name,shape,dtype?,initializer?,regularizer?,trainable?,constraint?)",
            "function_name": "addWeight",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "initializer",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "regularizer",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                },
                {
                    "name": "trainable",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5
                },
                {
                    "name": "constraint",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6
                }
            ],
            "attrs": [
                "addWeight"
            ],
            "torch": null,
            "tf": null
        },
        "addloss": {
            "code": "addLoss(losses)",
            "function_name": "addLoss",
            "args": [
                {
                    "name": "losses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "addLoss"
            ],
            "torch": null,
            "tf": null
        },
        "computeoutputshape": {
            "code": "computeOutputShape(inputShape)",
            "function_name": "computeOutputShape",
            "args": [
                {
                    "name": "inputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "computeOutputShape"
            ],
            "torch": null,
            "tf": null
        },
        "getconfig": {
            "code": "getConfig()",
            "function_name": "getConfig",
            "args": [],
            "attrs": [
                "getConfig"
            ],
            "torch": null,
            "tf": null
        },
        "inputlayer": {
            "code": "tf.layers.inputLayer(args)",
            "function_name": "inputLayer",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "inputLayer"
            ],
            "torch": null,
            "tf": "inputlayer"
        },
        "zeropadding2d": {
            "code": "tf.layers.zeroPadding2d(args?)",
            "function_name": "zeroPadding2d",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "zeroPadding2d"
            ],
            "torch": null,
            "tf": "zeropadding2d"
        },
        "alphadropout": {
            "code": "tf.layers.alphaDropout(args)",
            "function_name": "alphaDropout",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "alphaDropout"
            ],
            "torch": null,
            "tf": "alphadropout"
        },
        "gaussiandropout": {
            "code": "tf.layers.gaussianDropout(args)",
            "function_name": "gaussianDropout",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gaussianDropout"
            ],
            "torch": null,
            "tf": "gaussiandropout"
        },
        "gaussiannoise": {
            "code": "tf.layers.gaussianNoise(args)",
            "function_name": "gaussianNoise",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "gaussianNoise"
            ],
            "torch": null,
            "tf": "gaussiannoise"
        },
        "masking": {
            "code": "tf.layers.masking(args?)",
            "function_name": "masking",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "layers",
                "masking"
            ],
            "torch": null,
            "tf": "masking"
        },
        "sub": {
            "code": "tf.sub(a,b)",
            "function_name": "sub",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "sub"
            ],
            "torch": null,
            "tf": null
        },
        "mul": {
            "code": "tf.mul(a,b)",
            "function_name": "mul",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "mul"
            ],
            "torch": "mul",
            "tf": null
        },
        "div": {
            "code": "tf.div(a,b)",
            "function_name": "div",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "div"
            ],
            "torch": "div",
            "tf": null
        },
        "addn": {
            "code": "tf.addN(tensors)",
            "function_name": "addN",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "addN"
            ],
            "torch": null,
            "tf": null
        },
        "divnonan": {
            "code": "tf.divNoNan(a,b)",
            "function_name": "divNoNan",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "divNoNan"
            ],
            "torch": null,
            "tf": null
        },
        "floordiv": {
            "code": "tf.floorDiv(a,b)",
            "function_name": "floorDiv",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "floorDiv"
            ],
            "torch": null,
            "tf": "floordiv"
        },
        "mod": {
            "code": "tf.mod(a,b)",
            "function_name": "mod",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "mod"
            ],
            "torch": null,
            "tf": null
        },
        "pow": {
            "code": "tf.pow(base,exp)",
            "function_name": "pow",
            "args": [
                {
                    "name": "base",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "exp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "pow"
            ],
            "torch": "pow",
            "tf": "pow"
        },
        "squareddifference": {
            "code": "tf.squaredDifference(a,b)",
            "function_name": "squaredDifference",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "squaredDifference"
            ],
            "torch": null,
            "tf": null
        },
        "abs": {
            "code": "tf.abs(x)",
            "function_name": "abs",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "abs"
            ],
            "torch": "abs",
            "tf": "abs"
        },
        "acos": {
            "code": "tf.acos(x)",
            "function_name": "acos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "acos"
            ],
            "torch": "acos",
            "tf": "acos"
        },
        "acosh": {
            "code": "tf.acosh(x)",
            "function_name": "acosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "acosh"
            ],
            "torch": null,
            "tf": "acosh"
        },
        "asin": {
            "code": "tf.asin(x)",
            "function_name": "asin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "asin"
            ],
            "torch": "asin",
            "tf": "asin"
        },
        "asinh": {
            "code": "tf.asinh(x)",
            "function_name": "asinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "asinh"
            ],
            "torch": null,
            "tf": "asinh"
        },
        "atan": {
            "code": "tf.atan(x)",
            "function_name": "atan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "atan"
            ],
            "torch": "atan",
            "tf": "atan"
        },
        "atan2": {
            "code": "tf.atan2(a,b)",
            "function_name": "atan2",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "atan2"
            ],
            "torch": "atan2",
            "tf": "atan2"
        },
        "atanh": {
            "code": "tf.atanh(x)",
            "function_name": "atanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "atanh"
            ],
            "torch": null,
            "tf": "atanh"
        },
        "ceil": {
            "code": "tf.ceil(x)",
            "function_name": "ceil",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "ceil"
            ],
            "torch": "ceil",
            "tf": "ceil"
        },
        "clipbyvalue": {
            "code": "tf.clipByValue(x,clipValueMin,clipValueMax)",
            "function_name": "clipByValue",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "clipvaluemin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "clipvaluemax",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "clipByValue"
            ],
            "torch": null,
            "tf": null
        },
        "cos": {
            "code": "tf.cos(x)",
            "function_name": "cos",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "cos"
            ],
            "torch": "cos",
            "tf": "cos"
        },
        "cosh": {
            "code": "tf.cosh(x)",
            "function_name": "cosh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "cosh"
            ],
            "torch": "cosh",
            "tf": "cosh"
        },
        "erf": {
            "code": "tf.erf(x)",
            "function_name": "erf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "erf"
            ],
            "torch": "erf",
            "tf": "erf"
        },
        "exp": {
            "code": "tf.exp(x)",
            "function_name": "exp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "exp"
            ],
            "torch": "exp",
            "tf": "exp"
        },
        "expm1": {
            "code": "tf.expm1(x)",
            "function_name": "expm1",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "expm1"
            ],
            "torch": "expm1",
            "tf": "expm1"
        },
        "floor": {
            "code": "tf.floor(x)",
            "function_name": "floor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "floor"
            ],
            "torch": "floor",
            "tf": "floor"
        },
        "isfinite": {
            "code": "tf.isFinite(x)",
            "function_name": "isFinite",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "isFinite"
            ],
            "torch": "isfinite",
            "tf": null
        },
        "isinf": {
            "code": "tf.isInf(x)",
            "function_name": "isInf",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "isInf"
            ],
            "torch": "isinf",
            "tf": null
        },
        "isnan": {
            "code": "tf.isNaN(x)",
            "function_name": "isNaN",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "isNaN"
            ],
            "torch": "isnan",
            "tf": null
        },
        "log": {
            "code": "tf.log(x)",
            "function_name": "log",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "log"
            ],
            "torch": "log",
            "tf": "log"
        },
        "log1p": {
            "code": "tf.log1p(x)",
            "function_name": "log1p",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "log1p"
            ],
            "torch": "log1p",
            "tf": "log1p"
        },
        "logsigmoid": {
            "code": "tf.logSigmoid(x)",
            "function_name": "logSigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "logSigmoid"
            ],
            "torch": "logsigmoid",
            "tf": null
        },
        "neg": {
            "code": "tf.neg(x)",
            "function_name": "neg",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "neg"
            ],
            "torch": "neg",
            "tf": null
        },
        "reciprocal": {
            "code": "tf.reciprocal(x)",
            "function_name": "reciprocal",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "reciprocal"
            ],
            "torch": "reciprocal",
            "tf": "reciprocal"
        },
        "relu6": {
            "code": "tf.relu6(x)",
            "function_name": "relu6",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "relu6"
            ],
            "torch": "relu6",
            "tf": "relu6"
        },
        "round": {
            "code": "tf.round(x)",
            "function_name": "round",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "round"
            ],
            "torch": "round",
            "tf": "round"
        },
        "rsqrt": {
            "code": "tf.rsqrt(x)",
            "function_name": "rsqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "rsqrt"
            ],
            "torch": "rsqrt",
            "tf": "rsqrt"
        },
        "selu": {
            "code": "tf.selu(x)",
            "function_name": "selu",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "selu"
            ],
            "torch": "selu",
            "tf": "selu"
        },
        "sigmoid": {
            "code": "tf.sigmoid(x)",
            "function_name": "sigmoid",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sigmoid"
            ],
            "torch": "sigmoid",
            "tf": "sigmoid"
        },
        "sign": {
            "code": "tf.sign(x)",
            "function_name": "sign",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sign"
            ],
            "torch": "sign",
            "tf": "sign"
        },
        "sin": {
            "code": "tf.sin(x)",
            "function_name": "sin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sin"
            ],
            "torch": "sin",
            "tf": "sin"
        },
        "sinh": {
            "code": "tf.sinh(x)",
            "function_name": "sinh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sinh"
            ],
            "torch": "sinh",
            "tf": "sinh"
        },
        "softplus": {
            "code": "tf.softplus(x)",
            "function_name": "softplus",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "softplus"
            ],
            "torch": "softplus",
            "tf": "softplus"
        },
        "sqrt": {
            "code": "tf.sqrt(x)",
            "function_name": "sqrt",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "sqrt"
            ],
            "torch": "sqrt",
            "tf": "sqrt"
        },
        "square": {
            "code": "tf.square(x)",
            "function_name": "square",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "square"
            ],
            "torch": null,
            "tf": "square"
        },
        "step": {
            "code": "tf.step(x,alpha?)",
            "function_name": "step",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "step"
            ],
            "torch": null,
            "tf": null
        },
        "tan": {
            "code": "tf.tan(x)",
            "function_name": "tan",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "tan"
            ],
            "torch": "tan",
            "tf": "tan"
        },
        "tanh": {
            "code": "tf.tanh(x)",
            "function_name": "tanh",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                }
            ],
            "attrs": [
                "tf",
                "tanh"
            ],
            "torch": "tanh",
            "tf": "tanh"
        },
        "matmul": {
            "code": "tf.matMul(a,b,transposeA?,transposeB?)",
            "function_name": "matMul",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": "b"
                },
                {
                    "name": "transposea",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "transposeb",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "matMul"
            ],
            "torch": "matmul",
            "tf": "matmul"
        },
        "norm": {
            "code": "tf.norm(x,ord?,axis?,keepDims?)",
            "function_name": "norm",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ord",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": "ord"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "norm"
            ],
            "torch": null,
            "tf": "norm"
        },
        "outerproduct": {
            "code": "tf.outerProduct(v1,v2)",
            "function_name": "outerProduct",
            "args": [
                {
                    "name": "v1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "v2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "outerProduct"
            ],
            "torch": null,
            "tf": null
        },
        "transpose": {
            "code": "tf.transpose(x,perm?)",
            "function_name": "transpose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "perm",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "perm"
                }
            ],
            "attrs": [
                "tf",
                "transpose"
            ],
            "torch": "t",
            "tf": null
        },
        "avgpool": {
            "code": "tf.avgPool(x,filterSize,strides,pad,dimRoundingMode?)",
            "function_name": "avgPool",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "avgPool"
            ],
            "torch": null,
            "tf": null
        },
        "avgpool3d": {
            "code": "tf.avgPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)",
            "function_name": "avgPool3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6
                }
            ],
            "attrs": [
                "tf",
                "avgPool3d"
            ],
            "torch": null,
            "tf": null
        },
        "conv3dtranspose": {
            "code": "tf.conv3dTranspose(x,filter,outputShape,strides,pad)",
            "function_name": "conv3dTranspose",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "filter",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "conv3dTranspose"
            ],
            "torch": null,
            "tf": "conv3dtranspose"
        },
        "maxpool": {
            "code": "tf.maxPool(x,filterSize,strides,pad,dimRoundingMode?)",
            "function_name": "maxPool",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "maxPool"
            ],
            "torch": null,
            "tf": null
        },
        "maxpool3d": {
            "code": "tf.maxPool3d(x,filterSize,strides,pad,dimRoundingMode?,dataFormat?,dilations?)",
            "function_name": "maxPool3d",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "filtersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": "strides"
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": null
                },
                {
                    "name": "dimroundingmode",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": null
                },
                {
                    "name": "dataformat",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "tf": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "maxPool3d"
            ],
            "torch": null,
            "tf": "maxpool3d"
        },
        "pool": {
            "code": "tf.pool(input,windowShape,poolingType,pad,dilations?,strides?)",
            "function_name": "pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "windowshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "poolingtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "pad",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": null
                },
                {
                    "name": "dilations",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": "dilations"
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5,
                    "tf": "strides"
                }
            ],
            "attrs": [
                "tf",
                "pool"
            ],
            "torch": null,
            "tf": "pool"
        },
        "all": {
            "code": "tf.all(x,axis?,keepDims?)",
            "function_name": "all",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "all"
            ],
            "torch": "all",
            "tf": "all"
        },
        "any": {
            "code": "tf.any(x,axis?,keepDims?)",
            "function_name": "any",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "any"
            ],
            "torch": "any",
            "tf": "any"
        },
        "argmax": {
            "code": "tf.argMax(x,axis?)",
            "function_name": "argMax",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "argMax"
            ],
            "torch": "argmax",
            "tf": "argmax"
        },
        "argmin": {
            "code": "tf.argMin(x,axis?)",
            "function_name": "argMin",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                }
            ],
            "attrs": [
                "tf",
                "argMin"
            ],
            "torch": "argmin",
            "tf": "argmin"
        },
        "logsumexp": {
            "code": "tf.logSumExp(x,axis?,keepDims?)",
            "function_name": "logSumExp",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "logSumExp"
            ],
            "torch": "logsumexp",
            "tf": null
        },
        "max": {
            "code": "tf.max(x,axis?,keepDims?)",
            "function_name": "max",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "max"
            ],
            "torch": "max",
            "tf": "max"
        },
        "mean": {
            "code": "tf.mean(x,axis?,keepDims?)",
            "function_name": "mean",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "mean"
            ],
            "torch": "mean",
            "tf": "mean"
        },
        "min": {
            "code": "tf.min(x,axis?,keepDims?)",
            "function_name": "min",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "min"
            ],
            "torch": "min",
            "tf": "min"
        },
        "prod": {
            "code": "tf.prod(x,axis?,keepDims?)",
            "function_name": "prod",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "prod"
            ],
            "torch": "prod",
            "tf": "prod"
        },
        "sum": {
            "code": "tf.sum(x,axis?,keepDims?)",
            "function_name": "sum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": "axis"
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": null,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "sum"
            ],
            "torch": "sum",
            "tf": "sum"
        },
        "batchnorm": {
            "code": "tf.batchNorm(x,mean,variance,offset?,scale?,varianceEpsilon?)",
            "function_name": "batchNorm",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "variance",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "offset",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                },
                {
                    "name": "varianceepsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5
                }
            ],
            "attrs": [
                "tf",
                "batchNorm"
            ],
            "torch": null,
            "tf": null
        },
        "localresponsenormalization": {
            "code": "tf.localResponseNormalization(x,depthRadius?,bias?,alpha?,beta?)",
            "function_name": "localResponseNormalization",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "depthradius",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "bias",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "alpha",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "beta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "localResponseNormalization"
            ],
            "torch": null,
            "tf": null
        },
        "logsoftmax": {
            "code": "tf.logSoftmax(logits,axis?)",
            "function_name": "logSoftmax",
            "args": [
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "logSoftmax"
            ],
            "torch": null,
            "tf": null
        },
        "moments": {
            "code": "tf.moments(x,axis?,keepDims?)",
            "function_name": "moments",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "x"
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "keepdims",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": "keepdims"
                }
            ],
            "attrs": [
                "tf",
                "moments"
            ],
            "torch": null,
            "tf": "moments"
        },
        "sparsetodense": {
            "code": "tf.sparseToDense(sparseIndices,sparseValues,outputShape,defaultValue?)",
            "function_name": "sparseToDense",
            "args": [
                {
                    "name": "sparseindices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sparsevalues",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "outputshape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "defaultvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "sparseToDense"
            ],
            "torch": null,
            "tf": null
        },
        "cropandresize": {
            "code": "tf.image.cropAndResize(image,boxes,boxInd,cropSize,?,extrapolationValue?)",
            "function_name": "cropAndResize",
            "args": [
                {
                    "name": "image",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "boxind",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "cropsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "extrapolationvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "image",
                "cropAndResize"
            ],
            "torch": null,
            "tf": null
        },
        "nonmaxsuppression": {
            "code": "tf.image.nonMaxSuppression(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?)",
            "function_name": "nonMaxSuppression",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "image",
                "nonMaxSuppression"
            ],
            "torch": null,
            "tf": null
        },
        "nonmaxsuppressionwithscore": {
            "code": "tf.image.nonMaxSuppressionWithScore(boxes,scores,maxOutputSize,iouThreshold?,scoreThreshold?,softNmsSigma?)",
            "function_name": "nonMaxSuppressionWithScore",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "maxoutputsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "iouthreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "scorethreshold",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                },
                {
                    "name": "softnmssigma",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5
                }
            ],
            "attrs": [
                "tf",
                "image",
                "nonMaxSuppressionWithScore"
            ],
            "torch": null,
            "tf": null
        },
        "resizebilinear": {
            "code": "tf.image.resizeBilinear(images,size,alignCorners?)",
            "function_name": "resizeBilinear",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "aligncorners",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resizeBilinear"
            ],
            "torch": null,
            "tf": null
        },
        "resizenearestneighbor": {
            "code": "tf.image.resizeNearestNeighbor(images,size,alignCorners?)",
            "function_name": "resizeNearestNeighbor",
            "args": [
                {
                    "name": "images",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "aligncorners",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "image",
                "resizeNearestNeighbor"
            ],
            "torch": null,
            "tf": null
        },
        "basiclstmcell": {
            "code": "tf.basicLSTMCell(forgetBias,lstmKernel,lstmBias,data,c,h)",
            "function_name": "basicLSTMCell",
            "args": [
                {
                    "name": "forgetbias",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lstmkernel",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "lstmbias",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "c",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "h",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                }
            ],
            "attrs": [
                "tf",
                "basicLSTMCell"
            ],
            "torch": null,
            "tf": null
        },
        "multirnncell": {
            "code": "tf.multiRNNCell(lstmCells,data,c,h)",
            "function_name": "multiRNNCell",
            "args": [
                {
                    "name": "lstmcells",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "c",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "h",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "multiRNNCell"
            ],
            "torch": null,
            "tf": null
        },
        "equal": {
            "code": "tf.equal(a,b)",
            "function_name": "equal",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "equal"
            ],
            "torch": "eq",
            "tf": null
        },
        "greater": {
            "code": "tf.greater(a,b)",
            "function_name": "greater",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "greater"
            ],
            "torch": null,
            "tf": "greater"
        },
        "greaterequal": {
            "code": "tf.greaterEqual(a,b)",
            "function_name": "greaterEqual",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "greaterEqual"
            ],
            "torch": null,
            "tf": null
        },
        "less": {
            "code": "tf.less(a,b)",
            "function_name": "less",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "less"
            ],
            "torch": null,
            "tf": "less"
        },
        "lessequal": {
            "code": "tf.lessEqual(a,b)",
            "function_name": "lessEqual",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "lessEqual"
            ],
            "torch": null,
            "tf": null
        },
        "logicaland": {
            "code": "tf.logicalAnd(a,b)",
            "function_name": "logicalAnd",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "logicalAnd"
            ],
            "torch": null,
            "tf": null
        },
        "logicalnot": {
            "code": "tf.logicalNot(x)",
            "function_name": "logicalNot",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "logicalNot"
            ],
            "torch": null,
            "tf": null
        },
        "logicalor": {
            "code": "tf.logicalOr(a,b)",
            "function_name": "logicalOr",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "logicalOr"
            ],
            "torch": null,
            "tf": null
        },
        "logicalxor": {
            "code": "tf.logicalXor(a,b)",
            "function_name": "logicalXor",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "logicalXor"
            ],
            "torch": null,
            "tf": null
        },
        "notequal": {
            "code": "tf.notEqual(a,b)",
            "function_name": "notEqual",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "notEqual"
            ],
            "torch": null,
            "tf": null
        },
        "where": {
            "code": "tf.where(condition,a,b)",
            "function_name": "where",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "condition",
                    "tf": "condition"
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "where"
            ],
            "torch": "where",
            "tf": "where"
        },
        "whereasync": {
            "code": "tf.whereAsync(condition)",
            "function_name": "whereAsync",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "whereAsync"
            ],
            "torch": null,
            "tf": null
        },
        "unsortedsegmentsum": {
            "code": "tf.unsortedSegmentSum(x,segmentIds,numSegments)",
            "function_name": "unsortedSegmentSum",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segmentids",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "numsegments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "unsortedSegmentSum"
            ],
            "torch": null,
            "tf": null
        },
        "movingaverage": {
            "code": "tf.movingAverage(v,x,decay,step?,zeroDebias?)",
            "function_name": "movingAverage",
            "args": [
                {
                    "name": "v",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "step",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "zerodebias",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "movingAverage"
            ],
            "torch": null,
            "tf": null
        },
        "gathernd": {
            "code": "tf.gatherND(x,indices)",
            "function_name": "gatherND",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "gatherND"
            ],
            "torch": null,
            "tf": null
        },
        "scatternd": {
            "code": "tf.scatterND(indices,updates,shape)",
            "function_name": "scatterND",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "updates",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "scatterND"
            ],
            "torch": null,
            "tf": null
        },
        "stridedslice": {
            "code": "tf.stridedSlice(x,begin,end,strides?,beginMask?,endMask?,ellipsisMask?,newAxisMask?,shrinkAxisMask?)",
            "function_name": "stridedSlice",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "begin",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "strides",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "beginmask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                },
                {
                    "name": "endmask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 5
                },
                {
                    "name": "ellipsismask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 6
                },
                {
                    "name": "newaxismask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 7
                },
                {
                    "name": "shrinkaxismask",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 8
                }
            ],
            "attrs": [
                "tf",
                "stridedSlice"
            ],
            "torch": null,
            "tf": null
        },
        "confusionmatrix": {
            "code": "tf.confusionMatrix(labels,predictions,numClasses)",
            "function_name": "confusionMatrix",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "numclasses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "confusionMatrix"
            ],
            "torch": null,
            "tf": null
        },
        "intopkasync": {
            "code": "tf.inTopKAsync(predictions,targets,k?)",
            "function_name": "inTopKAsync",
            "args": [
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "targets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "inTopKAsync"
            ],
            "torch": null,
            "tf": null
        },
        "topk": {
            "code": "tf.topk(x,k?,sorted?)",
            "function_name": "topk",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": "k"
                },
                {
                    "name": "sorted",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "torch": "sorted"
                }
            ],
            "attrs": [
                "tf",
                "topk"
            ],
            "torch": "topk",
            "tf": null
        },
        "fft": {
            "code": "tf.spectral.fft(input)",
            "function_name": "fft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "fft"
            ],
            "torch": "fft",
            "tf": "fft"
        },
        "ifft": {
            "code": "tf.spectral.ifft(input)",
            "function_name": "ifft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": "input"
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "ifft"
            ],
            "torch": "ifft",
            "tf": "ifft"
        },
        "irfft": {
            "code": "tf.spectral.irfft(input)",
            "function_name": "irfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "irfft"
            ],
            "torch": "irfft",
            "tf": "irfft"
        },
        "rfft": {
            "code": "tf.spectral.rfft(input,fftLength?)",
            "function_name": "rfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": "input",
                    "tf": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "spectral",
                "rfft"
            ],
            "torch": "rfft",
            "tf": "rfft"
        },
        "frame": {
            "code": "tf.signal.frame(signal,frameLength,frameStep,padEnd?,padValue?)",
            "function_name": "frame",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "signal"
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "padend",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": null
                },
                {
                    "name": "padvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "frame"
            ],
            "torch": null,
            "tf": "frame"
        },
        "hammingwindow": {
            "code": "tf.signal.hammingWindow(windowLength)",
            "function_name": "hammingWindow",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hammingWindow"
            ],
            "torch": null,
            "tf": null
        },
        "hannwindow": {
            "code": "tf.signal.hannWindow(windowLength)",
            "function_name": "hannWindow",
            "args": [
                {
                    "name": "windowlength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "hannWindow"
            ],
            "torch": null,
            "tf": null
        },
        "stft": {
            "code": "tf.signal.stft(signal,frameLength,frameStep,fftLength?,windowFn?)",
            "function_name": "stft",
            "args": [
                {
                    "name": "signal",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "framelength",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "framestep",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "fftlength",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": null
                },
                {
                    "name": "windowfn",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "signal",
                "stft"
            ],
            "torch": null,
            "tf": "stft"
        },
        "bandpart": {
            "code": "tf.linalg.bandPart(a,numLower,numUpper)",
            "function_name": "bandPart",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "numlower",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "numupper",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "bandPart"
            ],
            "torch": null,
            "tf": null
        },
        "gramschmidt": {
            "code": "tf.linalg.gramSchmidt(xs)",
            "function_name": "gramSchmidt",
            "args": [
                {
                    "name": "xs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "gramSchmidt"
            ],
            "torch": null,
            "tf": null
        },
        "qr": {
            "code": "tf.linalg.qr(x,fullMatrices?)",
            "function_name": "qr",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                },
                {
                    "name": "fullmatrices",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "linalg",
                "qr"
            ],
            "torch": "qr",
            "tf": "qr"
        },
        "grad": {
            "code": "tf.grad(f)",
            "function_name": "grad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "tf",
                "grad"
            ],
            "torch": "grad",
            "tf": null
        },
        "grads": {
            "code": "tf.grads(f)",
            "function_name": "grads",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "grads"
            ],
            "torch": null,
            "tf": null
        },
        "customgrad": {
            "code": "tf.customGrad(f)",
            "function_name": "customGrad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "customGrad"
            ],
            "torch": null,
            "tf": null
        },
        "valueandgrad": {
            "code": "tf.valueAndGrad(f)",
            "function_name": "valueAndGrad",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "valueAndGrad"
            ],
            "torch": null,
            "tf": null
        },
        "valueandgrads": {
            "code": "tf.valueAndGrads(f)",
            "function_name": "valueAndGrads",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "valueAndGrads"
            ],
            "torch": null,
            "tf": null
        },
        "variablegrads": {
            "code": "tf.variableGrads(f,varList?)",
            "function_name": "variableGrads",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "varlist",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "variableGrads"
            ],
            "torch": null,
            "tf": null
        },
        "sgd": {
            "code": "tf.train.sgd(learningRate)",
            "function_name": "sgd",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "sgd"
            ],
            "torch": null,
            "tf": "sgd"
        },
        "momentum": {
            "code": "tf.train.momentum(learningRate,momentum,useNesterov?)",
            "function_name": "momentum",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "momentum",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "usenesterov",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "train",
                "momentum"
            ],
            "torch": null,
            "tf": null
        },
        "adagrad": {
            "code": "tf.train.adagrad(learningRate,initialAccumulatorValue?)",
            "function_name": "adagrad",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "initialaccumulatorvalue",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adagrad"
            ],
            "torch": null,
            "tf": "adagrad"
        },
        "adadelta": {
            "code": "tf.train.adadelta(learningRate?,rho?,epsilon?)",
            "function_name": "adadelta",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "rho",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": "rho"
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": "epsilon"
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adadelta"
            ],
            "torch": null,
            "tf": "adadelta"
        },
        "adam": {
            "code": "tf.train.adam(learningRate?,beta1?,beta2?,epsilon?)",
            "function_name": "adam",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "beta1",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "beta2",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": "epsilon"
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adam"
            ],
            "torch": null,
            "tf": "adam"
        },
        "adamax": {
            "code": "tf.train.adamax(learningRate?,beta1?,beta2?,epsilon?,decay?)",
            "function_name": "adamax",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "beta1",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "beta2",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": "epsilon"
                },
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "train",
                "adamax"
            ],
            "torch": null,
            "tf": "adamax"
        },
        "rmsprop": {
            "code": "tf.train.rmsprop(learningRate,decay?,momentum?,epsilon?,centered?)",
            "function_name": "rmsprop",
            "args": [
                {
                    "name": "learningrate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "decay",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "momentum",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2,
                    "tf": "momentum"
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3,
                    "tf": "epsilon"
                },
                {
                    "name": "centered",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4,
                    "tf": "centered"
                }
            ],
            "attrs": [
                "tf",
                "train",
                "rmsprop"
            ],
            "torch": null,
            "tf": "rmsprop"
        },
        "absolutedifference": {
            "code": "tf.losses.absoluteDifference(labels,predictions,weights?,reduction?)",
            "function_name": "absoluteDifference",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "absoluteDifference"
            ],
            "torch": null,
            "tf": null
        },
        "computeweightedloss": {
            "code": "tf.losses.computeWeightedLoss(losses,weights?,reduction?)",
            "function_name": "computeWeightedLoss",
            "args": [
                {
                    "name": "losses",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "computeWeightedLoss"
            ],
            "torch": null,
            "tf": null
        },
        "cosinedistance": {
            "code": "tf.losses.cosineDistance(labels,predictions,axis,weights?,reduction?)",
            "function_name": "cosineDistance",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "cosineDistance"
            ],
            "torch": null,
            "tf": null
        },
        "hingeloss": {
            "code": "tf.losses.hingeLoss(labels,predictions,weights?,reduction?)",
            "function_name": "hingeLoss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "hingeLoss"
            ],
            "torch": null,
            "tf": null
        },
        "huberloss": {
            "code": "tf.losses.huberLoss(labels,predictions,weights?,delta?,reduction?)",
            "function_name": "huberLoss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "delta",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "huberLoss"
            ],
            "torch": null,
            "tf": null
        },
        "logloss": {
            "code": "tf.losses.logLoss(labels,predictions,weights?,epsilon?,reduction?)",
            "function_name": "logLoss",
            "args": [
                {
                    "name": "labels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "predictions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "epsilon",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "logLoss"
            ],
            "torch": null,
            "tf": null
        },
        "meansquarederror": {
            "code": "tf.metrics.meanSquaredError(yTrue,yPred)",
            "function_name": "meanSquaredError",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "meanSquaredError"
            ],
            "torch": null,
            "tf": "meansquarederror"
        },
        "sigmoidcrossentropy": {
            "code": "tf.losses.sigmoidCrossEntropy(multiClassLabels,logits,weights?,labelSmoothing?,reduction?)",
            "function_name": "sigmoidCrossEntropy",
            "args": [
                {
                    "name": "multiclasslabels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "labelsmoothing",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "sigmoidCrossEntropy"
            ],
            "torch": null,
            "tf": null
        },
        "softmaxcrossentropy": {
            "code": "tf.losses.softmaxCrossEntropy(onehotLabels,logits,weights?,labelSmoothing?,reduction?)",
            "function_name": "softmaxCrossEntropy",
            "args": [
                {
                    "name": "onehotlabels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "logits",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weights",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                },
                {
                    "name": "labelsmoothing",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 3
                },
                {
                    "name": "reduction",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 4
                }
            ],
            "attrs": [
                "tf",
                "losses",
                "softmaxCrossEntropy"
            ],
            "torch": null,
            "tf": null
        },
        "minimize": {
            "code": "minimize(f,returnCost?,varList?)",
            "function_name": "minimize",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "returncost",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                },
                {
                    "name": "varlist",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "minimize"
            ],
            "torch": null,
            "tf": null
        },
        "tidy": {
            "code": "tf.tidy(nameOrFn,fn?)",
            "function_name": "tidy",
            "args": [
                {
                    "name": "nameorfn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "tidy"
            ],
            "torch": null,
            "tf": null
        },
        "keep": {
            "code": "tf.keep(result)",
            "function_name": "keep",
            "args": [
                {
                    "name": "result",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "keep"
            ],
            "torch": null,
            "tf": null
        },
        "memory": {
            "code": "tf.memory()",
            "function_name": "memory",
            "args": [],
            "attrs": [
                "tf",
                "memory"
            ],
            "torch": null,
            "tf": null
        },
        "time": {
            "code": "tf.time(f)",
            "function_name": "time",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "time"
            ],
            "torch": null,
            "tf": null
        },
        "nextframe": {
            "code": "tf.nextFrame()",
            "function_name": "nextFrame",
            "args": [],
            "attrs": [
                "tf",
                "nextFrame"
            ],
            "torch": null,
            "tf": null
        },
        "profile": {
            "code": "tf.profile(f)",
            "function_name": "profile",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "profile"
            ],
            "torch": null,
            "tf": null
        },
        "disposevariables": {
            "code": "tf.disposeVariables()",
            "function_name": "disposeVariables",
            "args": [],
            "attrs": [
                "tf",
                "disposeVariables"
            ],
            "torch": null,
            "tf": null
        },
        "enabledebugmode": {
            "code": "tf.enableDebugMode()",
            "function_name": "enableDebugMode",
            "args": [],
            "attrs": [
                "tf",
                "enableDebugMode"
            ],
            "torch": null,
            "tf": null
        },
        "enableprodmode": {
            "code": "tf.enableProdMode()",
            "function_name": "enableProdMode",
            "args": [],
            "attrs": [
                "tf",
                "enableProdMode"
            ],
            "torch": null,
            "tf": null
        },
        "engine": {
            "code": "tf.engine()",
            "function_name": "engine",
            "args": [],
            "attrs": [
                "tf",
                "engine"
            ],
            "torch": null,
            "tf": null
        },
        "env": {
            "code": "tf.env()",
            "function_name": "env",
            "args": [],
            "attrs": [
                "tf",
                "env"
            ],
            "torch": null,
            "tf": null
        },
        "forcehalffloat": {
            "code": "tf.webgl.forceHalfFloat()",
            "function_name": "forceHalfFloat",
            "args": [],
            "attrs": [
                "tf",
                "webgl",
                "forceHalfFloat"
            ],
            "torch": null,
            "tf": null
        },
        "maxnorm": {
            "code": "tf.constraints.maxNorm(args)",
            "function_name": "maxNorm",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "maxNorm"
            ],
            "torch": null,
            "tf": "maxnorm"
        },
        "minmaxnorm": {
            "code": "tf.constraints.minMaxNorm(config)",
            "function_name": "minMaxNorm",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "minMaxNorm"
            ],
            "torch": null,
            "tf": "minmaxnorm"
        },
        "nonneg": {
            "code": "tf.constraints.nonNeg()",
            "function_name": "nonNeg",
            "args": [],
            "attrs": [
                "tf",
                "constraints",
                "nonNeg"
            ],
            "torch": null,
            "tf": null
        },
        "unitnorm": {
            "code": "tf.constraints.unitNorm(args)",
            "function_name": "unitNorm",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "constraints",
                "unitNorm"
            ],
            "torch": null,
            "tf": "unitnorm"
        },
        "constant": {
            "code": "tf.initializers.constant(args)",
            "function_name": "constant",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "constant"
            ],
            "torch": null,
            "tf": "constant"
        },
        "glorotnormal": {
            "code": "tf.initializers.glorotNormal(args)",
            "function_name": "glorotNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "glorotNormal"
            ],
            "torch": null,
            "tf": "glorotnormal"
        },
        "glorotuniform": {
            "code": "tf.initializers.glorotUniform(args)",
            "function_name": "glorotUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "glorotUniform"
            ],
            "torch": null,
            "tf": "glorotuniform"
        },
        "henormal": {
            "code": "tf.initializers.heNormal(args)",
            "function_name": "heNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "heNormal"
            ],
            "torch": null,
            "tf": null
        },
        "heuniform": {
            "code": "tf.initializers.heUniform(args)",
            "function_name": "heUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "heUniform"
            ],
            "torch": null,
            "tf": null
        },
        "identity": {
            "code": "tf.initializers.identity(args)",
            "function_name": "identity",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "identity"
            ],
            "torch": "identity",
            "tf": "identity"
        },
        "lecunnormal": {
            "code": "tf.initializers.leCunNormal(args)",
            "function_name": "leCunNormal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "leCunNormal"
            ],
            "torch": null,
            "tf": null
        },
        "lecununiform": {
            "code": "tf.initializers.leCunUniform(args)",
            "function_name": "leCunUniform",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "leCunUniform"
            ],
            "torch": null,
            "tf": null
        },
        "orthogonal": {
            "code": "tf.initializers.orthogonal(args)",
            "function_name": "orthogonal",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "orthogonal"
            ],
            "torch": null,
            "tf": "orthogonal"
        },
        "variancescaling": {
            "code": "tf.initializers.varianceScaling(config)",
            "function_name": "varianceScaling",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "initializers",
                "varianceScaling"
            ],
            "torch": null,
            "tf": "variancescaling"
        },
        "l1": {
            "code": "tf.regularizers.l1(config?)",
            "function_name": "l1",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "regularizers",
                "l1"
            ],
            "torch": null,
            "tf": "l1"
        },
        "l1l2": {
            "code": "tf.regularizers.l1l2(config?)",
            "function_name": "l1l2",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "regularizers",
                "l1l2"
            ],
            "torch": null,
            "tf": "l1l2"
        },
        "l2": {
            "code": "tf.regularizers.l2(config?)",
            "function_name": "l2",
            "args": [
                {
                    "name": "config",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "regularizers",
                "l2"
            ],
            "torch": null,
            "tf": "l2"
        },
        "csv": {
            "code": "tf.data.csv(source,csvConfig?)",
            "function_name": "csv",
            "args": [
                {
                    "name": "source",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "csvconfig",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "data",
                "csv"
            ],
            "torch": null,
            "tf": null
        },
        "generator": {
            "code": "tf.data.generator(generator)",
            "function_name": "generator",
            "args": [
                {
                    "name": "generator",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "data",
                "generator"
            ],
            "torch": null,
            "tf": "generator"
        },
        "microphone": {
            "code": "tf.data.microphone(microphoneConfig?)",
            "function_name": "microphone",
            "args": [
                {
                    "name": "microphoneconfig",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "microphone"
            ],
            "torch": null,
            "tf": null
        },
        "webcam": {
            "code": "tf.data.webcam(webcamVideoElement?,webcamConfig?)",
            "function_name": "webcam",
            "args": [
                {
                    "name": "webcamvideoelement",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0
                },
                {
                    "name": "webcamconfig",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "data",
                "webcam"
            ],
            "torch": null,
            "tf": null
        },
        "zip": {
            "code": "tf.data.zip(datasets)",
            "function_name": "zip",
            "args": [
                {
                    "name": "datasets",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "data",
                "zip"
            ],
            "torch": null,
            "tf": null
        },
        "columnnames": {
            "code": "columnNames()",
            "function_name": "columnNames",
            "args": [],
            "attrs": [
                "columnNames"
            ],
            "torch": null,
            "tf": null
        },
        "batch": {
            "code": "batch(batchSize,smallLastBatch?)",
            "function_name": "batch",
            "args": [
                {
                    "name": "batchsize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "smalllastbatch",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "batch"
            ],
            "torch": null,
            "tf": null
        },
        "filter": {
            "code": "filter(predicate)",
            "function_name": "filter",
            "args": [
                {
                    "name": "predicate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "filter"
            ],
            "torch": null,
            "tf": null
        },
        "foreachasync": {
            "code": "forEachAsync(f)",
            "function_name": "forEachAsync",
            "args": [
                {
                    "name": "f",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "forEachAsync"
            ],
            "torch": null,
            "tf": null
        },
        "map": {
            "code": "map(transform)",
            "function_name": "map",
            "args": [
                {
                    "name": "transform",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "map"
            ],
            "torch": null,
            "tf": null
        },
        "mapasync": {
            "code": "mapAsync(transform)",
            "function_name": "mapAsync",
            "args": [
                {
                    "name": "transform",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "mapAsync"
            ],
            "torch": null,
            "tf": null
        },
        "prefetch": {
            "code": "prefetch(bufferSize)",
            "function_name": "prefetch",
            "args": [
                {
                    "name": "buffersize",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "prefetch"
            ],
            "torch": null,
            "tf": null
        },
        "repeat": {
            "code": "repeat(count?)",
            "function_name": "repeat",
            "args": [
                {
                    "name": "count",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "repeat"
            ],
            "torch": null,
            "tf": "repeat"
        },
        "skip": {
            "code": "skip(count)",
            "function_name": "skip",
            "args": [
                {
                    "name": "count",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "skip"
            ],
            "torch": null,
            "tf": null
        },
        "shuffle": {
            "code": "tf.util.shuffle(array)",
            "function_name": "shuffle",
            "args": [
                {
                    "name": "array",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "shuffle"
            ],
            "torch": null,
            "tf": "shuffle"
        },
        "take": {
            "code": "take(count)",
            "function_name": "take",
            "args": [
                {
                    "name": "count",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "torch": null
                }
            ],
            "attrs": [
                "take"
            ],
            "torch": "take",
            "tf": null
        },
        "toarray": {
            "code": "toArray()",
            "function_name": "toArray",
            "args": [],
            "attrs": [
                "toArray"
            ],
            "torch": null,
            "tf": null
        },
        "assert": {
            "code": "tf.util.assert(expr,msg)",
            "function_name": "assert",
            "args": [
                {
                    "name": "expr",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "msg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "util",
                "assert"
            ],
            "torch": null,
            "tf": "assert"
        },
        "createshuffledindices": {
            "code": "tf.util.createShuffledIndices(n)",
            "function_name": "createShuffledIndices",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "util",
                "createShuffledIndices"
            ],
            "torch": null,
            "tf": null
        },
        "decodestring": {
            "code": "tf.decodeString(bytes,encoding?)",
            "function_name": "decodeString",
            "args": [
                {
                    "name": "bytes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "encoding",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "decodeString"
            ],
            "torch": null,
            "tf": null
        },
        "encodestring": {
            "code": "tf.encodeString(s,encoding?)",
            "function_name": "encodeString",
            "args": [
                {
                    "name": "s",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "encoding",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "encodeString"
            ],
            "torch": null,
            "tf": null
        },
        "fetch": {
            "code": "tf.fetch(path,requestInits?)",
            "function_name": "fetch",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "requestinits",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "fetch"
            ],
            "torch": null,
            "tf": null
        },
        "now": {
            "code": "tf.util.now()",
            "function_name": "now",
            "args": [],
            "attrs": [
                "tf",
                "util",
                "now"
            ],
            "torch": null,
            "tf": null
        },
        "sizefromshape": {
            "code": "tf.util.sizeFromShape(shape)",
            "function_name": "sizeFromShape",
            "args": [
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "util",
                "sizeFromShape"
            ],
            "torch": null,
            "tf": null
        },
        "backend": {
            "code": "tf.backend()",
            "function_name": "backend",
            "args": [],
            "attrs": [
                "tf",
                "backend"
            ],
            "torch": null,
            "tf": "backend"
        },
        "getbackend": {
            "code": "tf.getBackend()",
            "function_name": "getBackend",
            "args": [],
            "attrs": [
                "tf",
                "getBackend"
            ],
            "torch": null,
            "tf": null
        },
        "ready": {
            "code": "tf.ready()",
            "function_name": "ready",
            "args": [],
            "attrs": [
                "tf",
                "ready"
            ],
            "torch": null,
            "tf": null
        },
        "registerbackend": {
            "code": "tf.registerBackend(name,factory,priority?)",
            "function_name": "registerBackend",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "factory",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "priority",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 2
                }
            ],
            "attrs": [
                "tf",
                "registerBackend"
            ],
            "torch": null,
            "tf": null
        },
        "removebackend": {
            "code": "tf.removeBackend(name)",
            "function_name": "removeBackend",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "removeBackend"
            ],
            "torch": null,
            "tf": null
        },
        "setbackend": {
            "code": "tf.setBackend(backendName)",
            "function_name": "setBackend",
            "args": [
                {
                    "name": "backendname",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "tf",
                "setBackend"
            ],
            "torch": null,
            "tf": null
        },
        "frompixels": {
            "code": "tf.browser.fromPixels(pixels,numChannels?)",
            "function_name": "fromPixels",
            "args": [
                {
                    "name": "pixels",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "numchannels",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "browser",
                "fromPixels"
            ],
            "torch": null,
            "tf": null
        },
        "topixels": {
            "code": "tf.browser.toPixels(img,canvas?)",
            "function_name": "toPixels",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "canvas",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "browser",
                "toPixels"
            ],
            "torch": null,
            "tf": null
        },
        "binaryaccuracy": {
            "code": "tf.metrics.binaryAccuracy(yTrue,yPred)",
            "function_name": "binaryAccuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "binaryAccuracy"
            ],
            "torch": null,
            "tf": "binaryaccuracy"
        },
        "binarycrossentropy": {
            "code": "tf.metrics.binaryCrossentropy(yTrue,yPred)",
            "function_name": "binaryCrossentropy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "binaryCrossentropy"
            ],
            "torch": null,
            "tf": "binarycrossentropy"
        },
        "categoricalaccuracy": {
            "code": "tf.metrics.categoricalAccuracy(yTrue,yPred)",
            "function_name": "categoricalAccuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "categoricalAccuracy"
            ],
            "torch": null,
            "tf": "categoricalaccuracy"
        },
        "categoricalcrossentropy": {
            "code": "tf.metrics.categoricalCrossentropy(yTrue,yPred)",
            "function_name": "categoricalCrossentropy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "categoricalCrossentropy"
            ],
            "torch": null,
            "tf": "categoricalcrossentropy"
        },
        "cosineproximity": {
            "code": "tf.metrics.cosineProximity(yTrue,yPred)",
            "function_name": "cosineProximity",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "cosineProximity"
            ],
            "torch": null,
            "tf": null
        },
        "meanabsoluteerror": {
            "code": "tf.metrics.meanAbsoluteError(yTrue,yPred)",
            "function_name": "meanAbsoluteError",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "meanAbsoluteError"
            ],
            "torch": null,
            "tf": "meanabsoluteerror"
        },
        "meanabsolutepercentageerror": {
            "code": "tf.metrics.meanAbsolutePercentageError(yTrue,yPred)",
            "function_name": "meanAbsolutePercentageError",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "meanAbsolutePercentageError"
            ],
            "torch": null,
            "tf": "meanabsolutepercentageerror"
        },
        "precision": {
            "code": "tf.metrics.precision(yTrue,yPred)",
            "function_name": "precision",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "precision"
            ],
            "torch": null,
            "tf": "precision"
        },
        "recall": {
            "code": "tf.metrics.recall(yTrue,yPred)",
            "function_name": "recall",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "recall"
            ],
            "torch": null,
            "tf": "recall"
        },
        "sparsecategoricalaccuracy": {
            "code": "tf.metrics.sparseCategoricalAccuracy(yTrue,yPred)",
            "function_name": "sparseCategoricalAccuracy",
            "args": [
                {
                    "name": "ytrue",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "ypred",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "metrics",
                "sparseCategoricalAccuracy"
            ],
            "torch": null,
            "tf": "sparsecategoricalaccuracy"
        },
        "earlystopping": {
            "code": "tf.callbacks.earlyStopping(args?)",
            "function_name": "earlyStopping",
            "args": [
                {
                    "name": "args",
                    "is_kwarg": false,
                    "optional": true,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "tf",
                "callbacks",
                "earlyStopping"
            ],
            "torch": null,
            "tf": "earlystopping"
        }
    },
    "torch": {
        "adjust_brightness": {
            "code": "torchvision.transforms.functional.adjust_brightness(img,brightness_factor)¶",
            "function_name": "adjust_brightness",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "brightness_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_brightness"
            ],
            "tfjs": null,
            "tf": "adjust_brightness"
        },
        "adjust_contrast": {
            "code": "torchvision.transforms.functional.adjust_contrast(img,contrast_factor)¶",
            "function_name": "adjust_contrast",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "contrast_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "contrast_factor"
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_contrast"
            ],
            "tfjs": null,
            "tf": "adjust_contrast"
        },
        "adjust_gamma": {
            "code": "torchvision.transforms.functional.adjust_gamma(img,gamma,gain=1)¶",
            "function_name": "adjust_gamma",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "gamma",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "gamma"
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "gain"
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_gamma"
            ],
            "tfjs": null,
            "tf": "adjust_gamma"
        },
        "adjust_hue": {
            "code": "torchvision.transforms.functional.adjust_hue(img,hue_factor)¶",
            "function_name": "adjust_hue",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "hue_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_hue"
            ],
            "tfjs": null,
            "tf": "adjust_hue"
        },
        "alexnet": {
            "code": "torchvision.models.alexnet(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "alexnet",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "alexnet"
            ],
            "tfjs": null,
            "tf": null
        },
        "adjust_saturation": {
            "code": "torchvision.transforms.functional.adjust_saturation(img,saturation_factor)¶",
            "function_name": "adjust_saturation",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "saturation_factor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "saturation_factor"
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "adjust_saturation"
            ],
            "tfjs": null,
            "tf": "adjust_saturation"
        },
        "affine": {
            "code": "torchvision.transforms.functional.affine(img,angle,translate,scale,shear,resample=0,fillcolor=None)¶",
            "function_name": "affine",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "angle",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "translate",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "shear",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "resample",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fillcolor",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "affine"
            ],
            "tfjs": null,
            "tf": null
        },
        "center_crop": {
            "code": "torchvision.transforms.functional.center_crop(img,output_size)¶",
            "function_name": "center_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "center_crop"
            ],
            "tfjs": null,
            "tf": null
        },
        "crop": {
            "code": "torchvision.transforms.functional.crop(img,top,left,height,width)¶",
            "function_name": "crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "top",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "left",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "crop"
            ],
            "tfjs": null,
            "tf": null
        },
        "erase": {
            "code": "torchvision.transforms.functional.erase(img,i,j,h,w,v,inplace=False)¶",
            "function_name": "erase",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "i",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "j",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "h",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "w",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "v",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "erase"
            ],
            "tfjs": null,
            "tf": null
        },
        "five_crop": {
            "code": "torchvision.transforms.functional.five_crop(img,size)¶",
            "function_name": "five_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "five_crop"
            ],
            "tfjs": null,
            "tf": null
        },
        "hflip": {
            "code": "torchvision.transforms.functional.hflip(img)¶",
            "function_name": "hflip",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "hflip"
            ],
            "tfjs": null,
            "tf": null
        },
        "normalize": {
            "code": "torchvision.transforms.functional.normalize(tensor,mean,std,inplace=False)¶",
            "function_name": "normalize",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "std",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "normalize"
            ],
            "tfjs": null,
            "tf": "normalize"
        },
        "perspective": {
            "code": "torchvision.transforms.functional.perspective(img,startpoints,endpoints,interpolation=3)¶",
            "function_name": "perspective",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "startpoints",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "endpoints",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "perspective"
            ],
            "tfjs": null,
            "tf": null
        },
        "resize": {
            "code": "torchvision.transforms.functional.resize(img,size,interpolation=2)¶",
            "function_name": "resize",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "size"
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "resize"
            ],
            "tfjs": null,
            "tf": "resize"
        },
        "resized_crop": {
            "code": "torchvision.transforms.functional.resized_crop(img,top,left,height,width,size,interpolation=2)¶",
            "function_name": "resized_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "top",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "left",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "height",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "width",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 5
                },
                {
                    "name": "interpolation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "resized_crop"
            ],
            "tfjs": null,
            "tf": null
        },
        "rotate": {
            "code": "torchvision.transforms.functional.rotate(img,angle,resample=False,expand=False,center=None,fill=0)¶",
            "function_name": "rotate",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "angle",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "resample",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "expand",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "center",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "fill",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "rotate"
            ],
            "tfjs": null,
            "tf": null
        },
        "ten_crop": {
            "code": "torchvision.transforms.functional.ten_crop(img,size,vertical_flip=False)¶",
            "function_name": "ten_crop",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "vertical_flip",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "ten_crop"
            ],
            "tfjs": null,
            "tf": null
        },
        "to_grayscale": {
            "code": "torchvision.transforms.functional.to_grayscale(img,num_output_channels=1)¶",
            "function_name": "to_grayscale",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "num_output_channels",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "to_grayscale"
            ],
            "tfjs": null,
            "tf": null
        },
        "to_pil_image": {
            "code": "torchvision.transforms.functional.to_pil_image(pic,mode=None)¶",
            "function_name": "to_pil_image",
            "args": [
                {
                    "name": "pic",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "to_pil_image"
            ],
            "tfjs": null,
            "tf": null
        },
        "to_tensor": {
            "code": "torchvision.transforms.functional.to_tensor(pic)¶",
            "function_name": "to_tensor",
            "args": [
                {
                    "name": "pic",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "to_tensor"
            ],
            "tfjs": null,
            "tf": null
        },
        "vflip": {
            "code": "torchvision.transforms.functional.vflip(img)¶",
            "function_name": "vflip",
            "args": [
                {
                    "name": "img",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torchvision",
                "transforms",
                "functional",
                "vflip"
            ],
            "tfjs": null,
            "tf": null
        },
        "vgg11": {
            "code": "torchvision.models.vgg11(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg11",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg11"
            ],
            "tfjs": null,
            "tf": null
        },
        "vgg11_bn": {
            "code": "torchvision.models.vgg11_bn(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg11_bn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg11_bn"
            ],
            "tfjs": null,
            "tf": null
        },
        "vgg13": {
            "code": "torchvision.models.vgg13(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg13",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg13"
            ],
            "tfjs": null,
            "tf": null
        },
        "vgg13_bn": {
            "code": "torchvision.models.vgg13_bn(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg13_bn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg13_bn"
            ],
            "tfjs": null,
            "tf": null
        },
        "vgg16": {
            "code": "torchvision.models.vgg16(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg16",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg16"
            ],
            "tfjs": null,
            "tf": "vgg16"
        },
        "vgg16_bn": {
            "code": "torchvision.models.vgg16_bn(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg16_bn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg16_bn"
            ],
            "tfjs": null,
            "tf": null
        },
        "vgg19": {
            "code": "torchvision.models.vgg19(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg19",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg19"
            ],
            "tfjs": null,
            "tf": "vgg19"
        },
        "vgg19_bn": {
            "code": "torchvision.models.vgg19_bn(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "vgg19_bn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "vgg19_bn"
            ],
            "tfjs": null,
            "tf": null
        },
        "resnet18": {
            "code": "torchvision.models.resnet18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnet18",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnet18"
            ],
            "tfjs": null,
            "tf": null
        },
        "resnet34": {
            "code": "torchvision.models.resnet34(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnet34",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnet34"
            ],
            "tfjs": null,
            "tf": null
        },
        "resnet50": {
            "code": "torchvision.models.resnet50(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnet50",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnet50"
            ],
            "tfjs": null,
            "tf": "resnet50"
        },
        "resnet101": {
            "code": "torchvision.models.resnet101(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnet101",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnet101"
            ],
            "tfjs": null,
            "tf": "resnet101"
        },
        "resnet152": {
            "code": "torchvision.models.resnet152(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnet152",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnet152"
            ],
            "tfjs": null,
            "tf": "resnet152"
        },
        "squeezenet1_0": {
            "code": "torchvision.models.squeezenet1_0(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "squeezenet1_0",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "squeezenet1_0"
            ],
            "tfjs": null,
            "tf": null
        },
        "squeezenet1_1": {
            "code": "torchvision.models.squeezenet1_1(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "squeezenet1_1",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "squeezenet1_1"
            ],
            "tfjs": null,
            "tf": null
        },
        "densenet121": {
            "code": "torchvision.models.densenet121(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "densenet121",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "densenet121"
            ],
            "tfjs": null,
            "tf": "densenet121"
        },
        "densenet169": {
            "code": "torchvision.models.densenet169(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "densenet169",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "densenet169"
            ],
            "tfjs": null,
            "tf": "densenet169"
        },
        "densenet161": {
            "code": "torchvision.models.densenet161(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "densenet161",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "densenet161"
            ],
            "tfjs": null,
            "tf": null
        },
        "densenet201": {
            "code": "torchvision.models.densenet201(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "densenet201",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "densenet201"
            ],
            "tfjs": null,
            "tf": "densenet201"
        },
        "inception_v3": {
            "code": "torchvision.models.inception_v3(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "inception_v3",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "inception_v3"
            ],
            "tfjs": null,
            "tf": null
        },
        "googlenet": {
            "code": "torchvision.models.googlenet(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "googlenet",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "googlenet"
            ],
            "tfjs": null,
            "tf": null
        },
        "shufflenet_v2_x0_5": {
            "code": "torchvision.models.shufflenet_v2_x0_5(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "shufflenet_v2_x0_5",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "shufflenet_v2_x0_5"
            ],
            "tfjs": null,
            "tf": null
        },
        "shufflenet_v2_x1_0": {
            "code": "torchvision.models.shufflenet_v2_x1_0(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "shufflenet_v2_x1_0",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "shufflenet_v2_x1_0"
            ],
            "tfjs": null,
            "tf": null
        },
        "shufflenet_v2_x1_5": {
            "code": "torchvision.models.shufflenet_v2_x1_5(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "shufflenet_v2_x1_5",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "shufflenet_v2_x1_5"
            ],
            "tfjs": null,
            "tf": null
        },
        "shufflenet_v2_x2_0": {
            "code": "torchvision.models.shufflenet_v2_x2_0(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "shufflenet_v2_x2_0",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "shufflenet_v2_x2_0"
            ],
            "tfjs": null,
            "tf": null
        },
        "mobilenet_v2": {
            "code": "torchvision.models.mobilenet_v2(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mobilenet_v2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mobilenet_v2"
            ],
            "tfjs": null,
            "tf": null
        },
        "resnext50_32x4d": {
            "code": "torchvision.models.resnext50_32x4d(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnext50_32x4d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnext50_32x4d"
            ],
            "tfjs": null,
            "tf": null
        },
        "resnext101_32x8d": {
            "code": "torchvision.models.resnext101_32x8d(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "resnext101_32x8d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "resnext101_32x8d"
            ],
            "tfjs": null,
            "tf": null
        },
        "wide_resnet50_2": {
            "code": "torchvision.models.wide_resnet50_2(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "wide_resnet50_2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "wide_resnet50_2"
            ],
            "tfjs": null,
            "tf": null
        },
        "wide_resnet101_2": {
            "code": "torchvision.models.wide_resnet101_2(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "wide_resnet101_2",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "wide_resnet101_2"
            ],
            "tfjs": null,
            "tf": null
        },
        "mnasnet0_5": {
            "code": "torchvision.models.mnasnet0_5(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mnasnet0_5",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mnasnet0_5"
            ],
            "tfjs": null,
            "tf": null
        },
        "mnasnet0_75": {
            "code": "torchvision.models.mnasnet0_75(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mnasnet0_75",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mnasnet0_75"
            ],
            "tfjs": null,
            "tf": null
        },
        "mnasnet1_0": {
            "code": "torchvision.models.mnasnet1_0(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mnasnet1_0",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mnasnet1_0"
            ],
            "tfjs": null,
            "tf": null
        },
        "mnasnet1_3": {
            "code": "torchvision.models.mnasnet1_3(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mnasnet1_3",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "mnasnet1_3"
            ],
            "tfjs": null,
            "tf": null
        },
        "fcn_resnet50": {
            "code": "torchvision.models.segmentation.fcn_resnet50(pretrained=False,progress=True,num_classes=21,aux_loss=None,**kwargs)¶",
            "function_name": "fcn_resnet50",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aux_loss",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "segmentation",
                "fcn_resnet50"
            ],
            "tfjs": null,
            "tf": null
        },
        "fcn_resnet101": {
            "code": "torchvision.models.segmentation.fcn_resnet101(pretrained=False,progress=True,num_classes=21,aux_loss=None,**kwargs)¶",
            "function_name": "fcn_resnet101",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aux_loss",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "segmentation",
                "fcn_resnet101"
            ],
            "tfjs": null,
            "tf": null
        },
        "deeplabv3_resnet50": {
            "code": "torchvision.models.segmentation.deeplabv3_resnet50(pretrained=False,progress=True,num_classes=21,aux_loss=None,**kwargs)¶",
            "function_name": "deeplabv3_resnet50",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aux_loss",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "segmentation",
                "deeplabv3_resnet50"
            ],
            "tfjs": null,
            "tf": null
        },
        "deeplabv3_resnet101": {
            "code": "torchvision.models.segmentation.deeplabv3_resnet101(pretrained=False,progress=True,num_classes=21,aux_loss=None,**kwargs)¶",
            "function_name": "deeplabv3_resnet101",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "aux_loss",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "segmentation",
                "deeplabv3_resnet101"
            ],
            "tfjs": null,
            "tf": null
        },
        "fasterrcnn_resnet50_fpn": {
            "code": "torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False,progress=True,num_classes=91,pretrained_backbone=True,**kwargs)¶",
            "function_name": "fasterrcnn_resnet50_fpn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pretrained_backbone",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "detection",
                "fasterrcnn_resnet50_fpn"
            ],
            "tfjs": null,
            "tf": null
        },
        "maskrcnn_resnet50_fpn": {
            "code": "torchvision.models.detection.maskrcnn_resnet50_fpn(pretrained=False,progress=True,num_classes=91,pretrained_backbone=True,**kwargs)¶",
            "function_name": "maskrcnn_resnet50_fpn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pretrained_backbone",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "detection",
                "maskrcnn_resnet50_fpn"
            ],
            "tfjs": null,
            "tf": null
        },
        "keypointrcnn_resnet50_fpn": {
            "code": "torchvision.models.detection.keypointrcnn_resnet50_fpn(pretrained=False,progress=True,num_classes=2,num_keypoints=17,pretrained_backbone=True,**kwargs)¶",
            "function_name": "keypointrcnn_resnet50_fpn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_classes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "num_keypoints",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pretrained_backbone",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "detection",
                "keypointrcnn_resnet50_fpn"
            ],
            "tfjs": null,
            "tf": null
        },
        "r3d_18": {
            "code": "torchvision.models.video.r3d_18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "r3d_18",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "video",
                "r3d_18"
            ],
            "tfjs": null,
            "tf": null
        },
        "mc3_18": {
            "code": "torchvision.models.video.mc3_18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "mc3_18",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "video",
                "mc3_18"
            ],
            "tfjs": null,
            "tf": null
        },
        "r2plus1d_18": {
            "code": "torchvision.models.video.r2plus1d_18(pretrained=False,progress=True,**kwargs)¶",
            "function_name": "r2plus1d_18",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pretrained",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "models",
                "video",
                "r2plus1d_18"
            ],
            "tfjs": null,
            "tf": null
        },
        "make_grid": {
            "code": "torchvision.utils.make_grid(tensor,nrow=8,padding=2,normalize=False,range=None,scale_each=False,pad_value=0)¶",
            "function_name": "make_grid",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "nrow",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "normalize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scale_each",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "utils",
                "make_grid"
            ],
            "tfjs": null,
            "tf": null
        },
        "save_image": {
            "code": "torchvision.utils.save_image(tensor,fp,nrow=8,padding=2,normalize=False,range=None,scale_each=False,pad_value=0,format=None)¶",
            "function_name": "save_image",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fp",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "nrow",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "normalize",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "range",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scale_each",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pad_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "format",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "utils",
                "save_image"
            ],
            "tfjs": null,
            "tf": null
        },
        "nms": {
            "code": "torchvision.ops.nms(boxes,scores,iou_threshold)¶",
            "function_name": "nms",
            "args": [
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scores",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "iou_threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torchvision",
                "ops",
                "nms"
            ],
            "tfjs": null,
            "tf": null
        },
        "roi_pool": {
            "code": "torchvision.ops.roi_pool(input,boxes,output_size,spatial_scale=1.0)¶",
            "function_name": "roi_pool",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "boxes",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "spatial_scale",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torchvision",
                "ops",
                "roi_pool"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_image_backend": {
            "code": "torchvision.get_image_backend()¶",
            "function_name": "get_image_backend",
            "args": [],
            "attrs": [
                "torchvision",
                "get_image_backend"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_image_backend": {
            "code": "torchvision.set_image_backend(backend)¶",
            "function_name": "set_image_backend",
            "args": [
                {
                    "name": "backend",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torchvision",
                "set_image_backend"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_video_backend": {
            "code": "torchvision.set_video_backend(backend)¶",
            "function_name": "set_video_backend",
            "args": [
                {
                    "name": "backend",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torchvision",
                "set_video_backend"
            ],
            "tfjs": null,
            "tf": null
        },
        "load_url": {
            "code": "torch.utils.model_zoo.load_url(url,model_dir=None,map_location=None,progress=True,check_hash=False)¶",
            "function_name": "load_url",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "map_location",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "check_hash",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "model_zoo",
                "load_url"
            ],
            "tfjs": null,
            "tf": null
        },
        "from_dlpack": {
            "code": "torch.utils.dlpack.from_dlpack(dlpack)→Tensor¶",
            "function_name": "from_dlpack",
            "args": [
                {
                    "name": "dlpack",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "dlpack",
                "from_dlpack"
            ],
            "tfjs": null,
            "tf": null
        },
        "to_dlpack": {
            "code": "torch.utils.dlpack.to_dlpack(tensor)→PyCapsule¶",
            "function_name": "to_dlpack",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "dlpack",
                "to_dlpack"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_worker_info": {
            "code": "torch.distributed.rpc.get_worker_info(worker_name=None)¶",
            "function_name": "get_worker_info",
            "args": [
                {
                    "name": "worker_name",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "get_worker_info"
            ],
            "tfjs": null,
            "tf": null
        },
        "random_split": {
            "code": "torch.utils.data.random_split(dataset,lengths)¶",
            "function_name": "random_split",
            "args": [
                {
                    "name": "dataset",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "data",
                "random_split"
            ],
            "tfjs": null,
            "tf": null
        },
        "cppextension": {
            "code": "torch.utils.cpp_extension.CppExtension(name,sources,*args,**kwargs)¶",
            "function_name": "CppExtension",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sources",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "CppExtension"
            ],
            "tfjs": null,
            "tf": null
        },
        "cudaextension": {
            "code": "torch.utils.cpp_extension.CUDAExtension(name,sources,*args,**kwargs)¶",
            "function_name": "CUDAExtension",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sources",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "CUDAExtension"
            ],
            "tfjs": null,
            "tf": null
        },
        "buildextension": {
            "code": "torch.utils.cpp_extension.BuildExtension(*args,**kwargs)¶",
            "function_name": "BuildExtension",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "BuildExtension"
            ],
            "tfjs": null,
            "tf": null
        },
        "load": {
            "code": "torch.hub.load(github,model,*args,**kwargs)¶",
            "function_name": "load",
            "args": [
                {
                    "name": "github",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "load"
            ],
            "tfjs": null,
            "tf": "load"
        },
        "load_inline": {
            "code": "torch.utils.cpp_extension.load_inline(name,cpp_sources,cuda_sources=None,functions=None,extra_cflags=None,extra_cuda_cflags=None,extra_ldflags=None,extra_include_paths=None,build_directory=None,verbose=False,with_cuda=None,is_python_module=True,with_pytorch_error_handling=True)¶",
            "function_name": "load_inline",
            "args": [
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "cpp_sources",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "cuda_sources",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "functions",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "extra_cflags",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "extra_cuda_cflags",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "extra_ldflags",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "extra_include_paths",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "build_directory",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "verbose",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "with_cuda",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "is_python_module",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "with_pytorch_error_handling",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "load_inline"
            ],
            "tfjs": null,
            "tf": null
        },
        "include_paths": {
            "code": "torch.utils.cpp_extension.include_paths(cuda=False)¶",
            "function_name": "include_paths",
            "args": [
                {
                    "name": "cuda",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "include_paths"
            ],
            "tfjs": null,
            "tf": null
        },
        "check_compiler_abi_compatibility": {
            "code": "torch.utils.cpp_extension.check_compiler_abi_compatibility(compiler)¶",
            "function_name": "check_compiler_abi_compatibility",
            "args": [
                {
                    "name": "compiler",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "check_compiler_abi_compatibility"
            ],
            "tfjs": null,
            "tf": null
        },
        "verify_ninja_availability": {
            "code": "torch.utils.cpp_extension.verify_ninja_availability()¶",
            "function_name": "verify_ninja_availability",
            "args": [],
            "attrs": [
                "torch",
                "utils",
                "cpp_extension",
                "verify_ninja_availability"
            ],
            "tfjs": null,
            "tf": null
        },
        "checkpoint": {
            "code": "torch.utils.checkpoint.checkpoint(function,*args,**kwargs)¶",
            "function_name": "checkpoint",
            "args": [
                {
                    "name": "function",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": ""
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "checkpoint",
                "checkpoint"
            ],
            "tfjs": null,
            "tf": "checkpoint"
        },
        "checkpoint_sequential": {
            "code": "torch.utils.checkpoint.checkpoint_sequential(functions,segments,*inputs,**kwargs)¶",
            "function_name": "checkpoint_sequential",
            "args": [
                {
                    "name": "functions",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "segments",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "torch",
                "utils",
                "checkpoint",
                "checkpoint_sequential"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_rng_state": {
            "code": "torch.get_rng_state()¶",
            "function_name": "get_rng_state",
            "args": [],
            "attrs": [
                "torch",
                "get_rng_state"
            ],
            "tfjs": null,
            "tf": null
        },
        "initial_seed": {
            "code": "torch.cuda.initial_seed()¶",
            "function_name": "initial_seed",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "initial_seed"
            ],
            "tfjs": null,
            "tf": null
        },
        "manual_seed": {
            "code": "torch.cuda.manual_seed(seed)¶",
            "function_name": "manual_seed",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "manual_seed"
            ],
            "tfjs": null,
            "tf": null
        },
        "seed": {
            "code": "torch.cuda.seed()¶",
            "function_name": "seed",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "seed"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_rng_state": {
            "code": "torch.set_rng_state(new_state)¶",
            "function_name": "set_rng_state",
            "args": [
                {
                    "name": "new_state",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "set_rng_state"
            ],
            "tfjs": null,
            "tf": null
        },
        "rpc_sync": {
            "code": "torch.distributed.rpc.rpc_sync(to,func,args=None,kwargs=None)¶",
            "function_name": "rpc_sync",
            "args": [
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kwargs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "rpc_sync"
            ],
            "tfjs": null,
            "tf": null
        },
        "rpc_async": {
            "code": "torch.distributed.rpc.rpc_async(to,func,args=None,kwargs=None)¶",
            "function_name": "rpc_async",
            "args": [
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kwargs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "rpc_async"
            ],
            "tfjs": null,
            "tf": null
        },
        "remote": {
            "code": "torch.distributed.rpc.remote(to,func,args=None,kwargs=None)¶",
            "function_name": "remote",
            "args": [
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "func",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "args",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "kwargs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "remote"
            ],
            "tfjs": null,
            "tf": null
        },
        "shutdown": {
            "code": "torch.distributed.rpc.shutdown(graceful=True)¶",
            "function_name": "shutdown",
            "args": [
                {
                    "name": "graceful",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "distributed",
                "rpc",
                "shutdown"
            ],
            "tfjs": null,
            "tf": null
        },
        "addmm": {
            "code": "torch.addmm(beta=1,input,alpha=1,mat1,mat2,out=None)→Tensor¶",
            "function_name": "addmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mat1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "mat2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "addmm"
            ],
            "tfjs": null,
            "tf": null
        },
        "mm": {
            "code": "torch.mm(input,mat2,out=None)→Tensor¶",
            "function_name": "mm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mat2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "mm"
            ],
            "tfjs": null,
            "tf": null
        },
        "sum": {
            "code": "torch.sum(input,dim,keepdim=False,dtype=None)→Tensor",
            "function_name": "sum",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sum"
            ],
            "tfjs": "sum",
            "tf": "sum"
        },
        "quantize": {
            "code": "torch.quantization.quantize(model,run_fn,run_args,mapping=None,inplace=False)¶",
            "function_name": "quantize",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "run_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "run_args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "quantize"
            ],
            "tfjs": null,
            "tf": "quantize"
        },
        "export": {
            "code": "torch.jit.export(fn)¶",
            "function_name": "export",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "export"
            ],
            "tfjs": null,
            "tf": "export"
        },
        "quantize_dynamic": {
            "code": "torch.quantization.quantize_dynamic(model,qconfig_spec=None,dtype=torch.qint8,mapping=None,inplace=False)¶",
            "function_name": "quantize_dynamic",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "qconfig_spec",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "quantize_dynamic"
            ],
            "tfjs": null,
            "tf": null
        },
        "quantize_qat": {
            "code": "torch.quantization.quantize_qat(model,run_fn,run_args,inplace=False)¶",
            "function_name": "quantize_qat",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "run_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "run_args",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "quantize_qat"
            ],
            "tfjs": null,
            "tf": null
        },
        "prepare": {
            "code": "torch.quantization.prepare(model,qconfig_dict=None,inplace=False)¶",
            "function_name": "prepare",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "qconfig_dict",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "prepare"
            ],
            "tfjs": null,
            "tf": null
        },
        "prepare_qat": {
            "code": "torch.quantization.prepare_qat(model,mapping=None,inplace=False)¶",
            "function_name": "prepare_qat",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "prepare_qat"
            ],
            "tfjs": null,
            "tf": null
        },
        "convert": {
            "code": "torch.quantization.convert(module,mapping=None,inplace=False)¶",
            "function_name": "convert",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mapping",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "convert"
            ],
            "tfjs": null,
            "tf": null
        },
        "add_quant_dequant": {
            "code": "torch.quantization.add_quant_dequant(module)¶",
            "function_name": "add_quant_dequant",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "add_quant_dequant"
            ],
            "tfjs": null,
            "tf": null
        },
        "add_observer_": {
            "code": "torch.quantization.add_observer_(module)¶",
            "function_name": "add_observer_",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "add_observer_"
            ],
            "tfjs": null,
            "tf": null
        },
        "swap_module": {
            "code": "torch.quantization.swap_module(mod,mapping)¶",
            "function_name": "swap_module",
            "args": [
                {
                    "name": "mod",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mapping",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "swap_module"
            ],
            "tfjs": null,
            "tf": null
        },
        "propagate_qconfig_": {
            "code": "torch.quantization.propagate_qconfig_(module,qconfig_dict=None)¶",
            "function_name": "propagate_qconfig_",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "qconfig_dict",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "propagate_qconfig_"
            ],
            "tfjs": null,
            "tf": null
        },
        "default_eval_fn": {
            "code": "torch.quantization.default_eval_fn(model,calib_data)¶",
            "function_name": "default_eval_fn",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "calib_data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "quantization",
                "default_eval_fn"
            ],
            "tfjs": null,
            "tf": null
        },
        "relu": {
            "code": "torch.nn.functional.relu(input,inplace=False)→Tensor¶",
            "function_name": "relu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "relu"
            ],
            "tfjs": "relu",
            "tf": "relu"
        },
        "linear": {
            "code": "torch.nn.functional.linear(input,weight,bias=None)¶",
            "function_name": "linear",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "linear"
            ],
            "tfjs": null,
            "tf": "linear"
        },
        "max_pool2d": {
            "code": "torch.nn.functional.max_pool2d(*args,**kwargs)¶",
            "function_name": "max_pool2d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_pool2d"
            ],
            "tfjs": null,
            "tf": "max_pool2d"
        },
        "adaptive_avg_pool2d": {
            "code": "torch.nn.functional.adaptive_avg_pool2d(input,output_size)¶",
            "function_name": "adaptive_avg_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_avg_pool2d"
            ],
            "tfjs": null,
            "tf": null
        },
        "avg_pool2d": {
            "code": "torch.nn.functional.avg_pool2d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True,divisor_override=None)→Tensor¶",
            "function_name": "avg_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "padding"
                },
                {
                    "name": "ceil_mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "count_include_pad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "divisor_override",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "avg_pool2d"
            ],
            "tfjs": null,
            "tf": "avg_pool2d"
        },
        "upsample_bilinear": {
            "code": "torch.nn.functional.upsample_bilinear(input,size=None,scale_factor=None)¶",
            "function_name": "upsample_bilinear",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scale_factor",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "upsample_bilinear"
            ],
            "tfjs": null,
            "tf": null
        },
        "upsample_nearest": {
            "code": "torch.nn.functional.upsample_nearest(input,size=None,scale_factor=None)¶",
            "function_name": "upsample_nearest",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "scale_factor",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "upsample_nearest"
            ],
            "tfjs": null,
            "tf": null
        },
        "calculate_gain": {
            "code": "torch.nn.init.calculate_gain(nonlinearity,param=None)¶",
            "function_name": "calculate_gain",
            "args": [
                {
                    "name": "nonlinearity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "param",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "calculate_gain"
            ],
            "tfjs": null,
            "tf": null
        },
        "uniform_": {
            "code": "torch.nn.init.uniform_(tensor,a=0.0,b=1.0)¶",
            "function_name": "uniform_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "a",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "b",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "uniform_"
            ],
            "tfjs": null,
            "tf": null
        },
        "normal_": {
            "code": "torch.nn.init.normal_(tensor,mean=0.0,std=1.0)¶",
            "function_name": "normal_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mean",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "std",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "normal_"
            ],
            "tfjs": null,
            "tf": null
        },
        "constant_": {
            "code": "torch.nn.init.constant_(tensor,val)¶",
            "function_name": "constant_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "val",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "constant_"
            ],
            "tfjs": null,
            "tf": null
        },
        "ones_": {
            "code": "torch.nn.init.ones_(tensor)¶",
            "function_name": "ones_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "ones_"
            ],
            "tfjs": null,
            "tf": null
        },
        "register_custom_op_symbolic": {
            "code": "torch.onnx.register_custom_op_symbolic(symbolic_name,symbolic_fn,opset_version)¶",
            "function_name": "register_custom_op_symbolic",
            "args": [
                {
                    "name": "symbolic_name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "symbolic_fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "opset_version",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "register_custom_op_symbolic"
            ],
            "tfjs": null,
            "tf": null
        },
        "shape_as_tensor": {
            "code": "torch.onnx.operators.shape_as_tensor(x)¶",
            "function_name": "shape_as_tensor",
            "args": [
                {
                    "name": "x",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "operators",
                "shape_as_tensor"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_training": {
            "code": "torch.onnx.set_training(model,mode)¶",
            "function_name": "set_training",
            "args": [
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "onnx",
                "set_training"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_in_onnx_export": {
            "code": "torch.onnx.is_in_onnx_export()¶",
            "function_name": "is_in_onnx_export",
            "args": [],
            "attrs": [
                "torch",
                "onnx",
                "is_in_onnx_export"
            ],
            "tfjs": null,
            "tf": null
        },
        "backward": {
            "code": "torch.autograd.backward(tensors,grad_tensors=None,retain_graph=None,create_graph=False,grad_variables=None)¶",
            "function_name": "backward",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "grad_tensors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "retain_graph",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "create_graph",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "grad_variables",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "autograd",
                "backward"
            ],
            "tfjs": null,
            "tf": null
        },
        "grad": {
            "code": "torch.autograd.grad(outputs,inputs,grad_outputs=None,retain_graph=None,create_graph=False,only_inputs=True,allow_unused=False)¶",
            "function_name": "grad",
            "args": [
                {
                    "name": "outputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "grad_outputs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "retain_graph",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "create_graph",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "only_inputs",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "allow_unused",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "autograd",
                "grad"
            ],
            "tfjs": "grad",
            "tf": null
        },
        "load_nvprof": {
            "code": "torch.autograd.profiler.load_nvprof(path)¶",
            "function_name": "load_nvprof",
            "args": [
                {
                    "name": "path",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "autograd",
                "profiler",
                "load_nvprof"
            ],
            "tfjs": null,
            "tf": null
        },
        "script": {
            "code": "torch.jit.script(obj)¶",
            "function_name": "script",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "script"
            ],
            "tfjs": null,
            "tf": null
        },
        "zeros_": {
            "code": "torch.nn.init.zeros_(tensor)¶",
            "function_name": "zeros_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "zeros_"
            ],
            "tfjs": null,
            "tf": null
        },
        "eye_": {
            "code": "torch.nn.init.eye_(tensor)¶",
            "function_name": "eye_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "eye_"
            ],
            "tfjs": null,
            "tf": null
        },
        "dirac_": {
            "code": "torch.nn.init.dirac_(tensor)¶",
            "function_name": "dirac_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "dirac_"
            ],
            "tfjs": null,
            "tf": null
        },
        "xavier_uniform_": {
            "code": "torch.nn.init.xavier_uniform_(tensor,gain=1.0)¶",
            "function_name": "xavier_uniform_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "xavier_uniform_"
            ],
            "tfjs": null,
            "tf": null
        },
        "xavier_normal_": {
            "code": "torch.nn.init.xavier_normal_(tensor,gain=1.0)¶",
            "function_name": "xavier_normal_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "xavier_normal_"
            ],
            "tfjs": null,
            "tf": null
        },
        "orthogonal_": {
            "code": "torch.nn.init.orthogonal_(tensor,gain=1)¶",
            "function_name": "orthogonal_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "gain",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "orthogonal_"
            ],
            "tfjs": null,
            "tf": null
        },
        "sparse_": {
            "code": "torch.nn.init.sparse_(tensor,sparsity,std=0.01)¶",
            "function_name": "sparse_",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "sparsity",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "std",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "init",
                "sparse_"
            ],
            "tfjs": null,
            "tf": null
        },
        "list": {
            "code": "torch.hub.list(github,force_reload=False)¶",
            "function_name": "list",
            "args": [
                {
                    "name": "github",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "force_reload",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "list"
            ],
            "tfjs": null,
            "tf": null
        },
        "help": {
            "code": "torch.hub.help(github,model,force_reload=False)¶",
            "function_name": "help",
            "args": [
                {
                    "name": "github",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "force_reload",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "help"
            ],
            "tfjs": null,
            "tf": null
        },
        "download_url_to_file": {
            "code": "torch.hub.download_url_to_file(url,dst,hash_prefix=None,progress=True)¶",
            "function_name": "download_url_to_file",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dst",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "hash_prefix",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "download_url_to_file"
            ],
            "tfjs": null,
            "tf": null
        },
        "load_state_dict_from_url": {
            "code": "torch.hub.load_state_dict_from_url(url,model_dir=None,map_location=None,progress=True,check_hash=False)¶",
            "function_name": "load_state_dict_from_url",
            "args": [
                {
                    "name": "url",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "model_dir",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "map_location",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "progress",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "check_hash",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "load_state_dict_from_url"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_dir": {
            "code": "torch.hub.set_dir(d)¶",
            "function_name": "set_dir",
            "args": [
                {
                    "name": "d",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "hub",
                "set_dir"
            ],
            "tfjs": null,
            "tf": null
        },
        "ignore": {
            "code": "torch.jit.ignore(drop=False,**kwargs)¶",
            "function_name": "ignore",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "drop",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "ignore"
            ],
            "tfjs": null,
            "tf": null
        },
        "unused": {
            "code": "torch.jit.unused(fn)¶",
            "function_name": "unused",
            "args": [
                {
                    "name": "fn",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "jit",
                "unused"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_scripting": {
            "code": "torch.jit.is_scripting()¶",
            "function_name": "is_scripting",
            "args": [],
            "attrs": [
                "torch",
                "jit",
                "is_scripting"
            ],
            "tfjs": null,
            "tf": null
        },
        "conv1d": {
            "code": "torch.nn.functional.conv1d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)→Tensor¶",
            "function_name": "conv1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "stride",
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "padding"
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dilation",
                    "tf": null
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv1d"
            ],
            "tfjs": "conv1d",
            "tf": "conv1d"
        },
        "is_initialized": {
            "code": "torch.cuda.is_initialized()¶",
            "function_name": "is_initialized",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "is_initialized"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_mpi_available": {
            "code": "torch.distributed.is_mpi_available()¶",
            "function_name": "is_mpi_available",
            "args": [],
            "attrs": [
                "torch",
                "distributed",
                "is_mpi_available"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_nccl_available": {
            "code": "torch.distributed.is_nccl_available()¶",
            "function_name": "is_nccl_available",
            "args": [],
            "attrs": [
                "torch",
                "distributed",
                "is_nccl_available"
            ],
            "tfjs": null,
            "tf": null
        },
        "kl_divergence": {
            "code": "torch.distributions.kl.kl_divergence(p,q)¶",
            "function_name": "kl_divergence",
            "args": [
                {
                    "name": "p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "q",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "distributions",
                "kl",
                "kl_divergence"
            ],
            "tfjs": null,
            "tf": null
        },
        "conv2d": {
            "code": "torch.nn.functional.conv2d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)→Tensor¶",
            "function_name": "conv2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "padding"
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv2d"
            ],
            "tfjs": "conv2d",
            "tf": "conv2d"
        },
        "conv3d": {
            "code": "torch.nn.functional.conv3d(input,weight,bias=None,stride=1,padding=0,dilation=1,groups=1)→Tensor¶",
            "function_name": "conv3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "padding"
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv3d"
            ],
            "tfjs": "conv3d",
            "tf": "conv3d"
        },
        "conv_transpose1d": {
            "code": "torch.nn.functional.conv_transpose1d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)→Tensor¶",
            "function_name": "conv_transpose1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv_transpose1d"
            ],
            "tfjs": null,
            "tf": null
        },
        "conv_transpose2d": {
            "code": "torch.nn.functional.conv_transpose2d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)→Tensor¶",
            "function_name": "conv_transpose2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv_transpose2d"
            ],
            "tfjs": null,
            "tf": null
        },
        "conv_transpose3d": {
            "code": "torch.nn.functional.conv_transpose3d(input,weight,bias=None,stride=1,padding=0,output_padding=0,groups=1,dilation=1)→Tensor¶",
            "function_name": "conv_transpose3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "groups",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "conv_transpose3d"
            ],
            "tfjs": null,
            "tf": null
        },
        "unfold": {
            "code": "torch.nn.functional.unfold(input,kernel_size,dilation=1,padding=0,stride=1)¶",
            "function_name": "unfold",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "unfold"
            ],
            "tfjs": null,
            "tf": null
        },
        "fold": {
            "code": "torch.nn.functional.fold(input,output_size,kernel_size,dilation=1,padding=0,stride=1)¶",
            "function_name": "fold",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "dilation",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "fold"
            ],
            "tfjs": null,
            "tf": null
        },
        "avg_pool1d": {
            "code": "torch.nn.functional.avg_pool1d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True)→Tensor¶",
            "function_name": "avg_pool1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "padding"
                },
                {
                    "name": "ceil_mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "count_include_pad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "avg_pool1d"
            ],
            "tfjs": null,
            "tf": "avg_pool1d"
        },
        "avg_pool3d": {
            "code": "torch.nn.functional.avg_pool3d(input,kernel_size,stride=None,padding=0,ceil_mode=False,count_include_pad=True,divisor_override=None)→Tensor¶",
            "function_name": "avg_pool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "padding"
                },
                {
                    "name": "ceil_mode",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "count_include_pad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "divisor_override",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "avg_pool3d"
            ],
            "tfjs": null,
            "tf": "avg_pool3d"
        },
        "max_pool1d": {
            "code": "torch.nn.functional.max_pool1d(*args,**kwargs)¶",
            "function_name": "max_pool1d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_pool1d"
            ],
            "tfjs": null,
            "tf": "max_pool1d"
        },
        "max_pool3d": {
            "code": "torch.nn.functional.max_pool3d(*args,**kwargs)¶",
            "function_name": "max_pool3d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_pool3d"
            ],
            "tfjs": null,
            "tf": "max_pool3d"
        },
        "max_unpool1d": {
            "code": "torch.nn.functional.max_unpool1d(input,indices,kernel_size,stride=None,padding=0,output_size=None)¶",
            "function_name": "max_unpool1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_unpool1d"
            ],
            "tfjs": null,
            "tf": null
        },
        "max_unpool2d": {
            "code": "torch.nn.functional.max_unpool2d(input,indices,kernel_size,stride=None,padding=0,output_size=None)¶",
            "function_name": "max_unpool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_unpool2d"
            ],
            "tfjs": null,
            "tf": null
        },
        "max_unpool3d": {
            "code": "torch.nn.functional.max_unpool3d(input,indices,kernel_size,stride=None,padding=0,output_size=None)¶",
            "function_name": "max_unpool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "max_unpool3d"
            ],
            "tfjs": null,
            "tf": null
        },
        "lp_pool1d": {
            "code": "torch.nn.functional.lp_pool1d(input,norm_type,kernel_size,stride=None,ceil_mode=False)¶",
            "function_name": "lp_pool1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "norm_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ceil_mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "lp_pool1d"
            ],
            "tfjs": null,
            "tf": null
        },
        "lp_pool2d": {
            "code": "torch.nn.functional.lp_pool2d(input,norm_type,kernel_size,stride=None,ceil_mode=False)¶",
            "function_name": "lp_pool2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "norm_type",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "kernel_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "stride",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "ceil_mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "lp_pool2d"
            ],
            "tfjs": null,
            "tf": null
        },
        "adaptive_max_pool1d": {
            "code": "torch.nn.functional.adaptive_max_pool1d(*args,**kwargs)¶",
            "function_name": "adaptive_max_pool1d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_max_pool1d"
            ],
            "tfjs": null,
            "tf": null
        },
        "adaptive_max_pool2d": {
            "code": "torch.nn.functional.adaptive_max_pool2d(*args,**kwargs)¶",
            "function_name": "adaptive_max_pool2d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_max_pool2d"
            ],
            "tfjs": null,
            "tf": null
        },
        "adaptive_max_pool3d": {
            "code": "torch.nn.functional.adaptive_max_pool3d(*args,**kwargs)¶",
            "function_name": "adaptive_max_pool3d",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_max_pool3d"
            ],
            "tfjs": null,
            "tf": null
        },
        "adaptive_avg_pool1d": {
            "code": "torch.nn.functional.adaptive_avg_pool1d(input,output_size)→Tensor¶",
            "function_name": "adaptive_avg_pool1d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_avg_pool1d"
            ],
            "tfjs": null,
            "tf": null
        },
        "adaptive_avg_pool3d": {
            "code": "torch.nn.functional.adaptive_avg_pool3d(input,output_size)¶",
            "function_name": "adaptive_avg_pool3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "output_size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "adaptive_avg_pool3d"
            ],
            "tfjs": null,
            "tf": null
        },
        "threshold": {
            "code": "torch.nn.functional.threshold(input,threshold,value,inplace=False)¶",
            "function_name": "threshold",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "threshold"
            ],
            "tfjs": null,
            "tf": null
        },
        "bernoulli_": {
            "code": "bernoulli_(p_tensor,*,generator=None)→Tensor",
            "function_name": "bernoulli_",
            "args": [
                {
                    "name": "p_tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "bernoulli_"
            ],
            "tfjs": null,
            "tf": null
        },
        "register_kl": {
            "code": "torch.distributions.kl.register_kl(type_p,type_q)¶",
            "function_name": "register_kl",
            "args": [
                {
                    "name": "type_p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "type_q",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "distributions",
                "kl",
                "register_kl"
            ],
            "tfjs": null,
            "tf": null
        },
        "threshold_": {
            "code": "torch.nn.functional.threshold_(input,threshold,value)→Tensor¶",
            "function_name": "threshold_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "threshold",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "threshold_"
            ],
            "tfjs": null,
            "tf": null
        },
        "relu_": {
            "code": "torch.nn.functional.relu_(input)→Tensor¶",
            "function_name": "relu_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "relu_"
            ],
            "tfjs": null,
            "tf": null
        },
        "relu6": {
            "code": "torch.nn.functional.relu6(input,inplace=False)→Tensor¶",
            "function_name": "relu6",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "relu6"
            ],
            "tfjs": "relu6",
            "tf": "relu6"
        },
        "elu": {
            "code": "torch.nn.functional.elu(input,alpha=1.0,inplace=False)¶",
            "function_name": "elu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "alpha"
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "elu"
            ],
            "tfjs": "elu",
            "tf": "elu"
        },
        "elu_": {
            "code": "torch.nn.functional.elu_(input,alpha=1.)→Tensor¶",
            "function_name": "elu_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "elu_"
            ],
            "tfjs": null,
            "tf": null
        },
        "selu": {
            "code": "torch.nn.functional.selu(input,inplace=False)→Tensor¶",
            "function_name": "selu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "selu"
            ],
            "tfjs": "selu",
            "tf": "selu"
        },
        "celu": {
            "code": "torch.nn.functional.celu(input,alpha=1.,inplace=False)→Tensor¶",
            "function_name": "celu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "celu"
            ],
            "tfjs": null,
            "tf": null
        },
        "leaky_relu": {
            "code": "torch.nn.functional.leaky_relu(input,negative_slope=0.01,inplace=False)→Tensor¶",
            "function_name": "leaky_relu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "negative_slope",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "leaky_relu"
            ],
            "tfjs": null,
            "tf": "leaky_relu"
        },
        "leaky_relu_": {
            "code": "torch.nn.functional.leaky_relu_(input,negative_slope=0.01)→Tensor¶",
            "function_name": "leaky_relu_",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "negative_slope",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "leaky_relu_"
            ],
            "tfjs": null,
            "tf": null
        },
        "prelu": {
            "code": "torch.nn.functional.prelu(input,weight)→Tensor¶",
            "function_name": "prelu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "prelu"
            ],
            "tfjs": "prelu",
            "tf": "prelu"
        },
        "gelu": {
            "code": "torch.nn.functional.gelu(input)→Tensor¶",
            "function_name": "gelu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "gelu"
            ],
            "tfjs": null,
            "tf": null
        },
        "logsigmoid": {
            "code": "torch.nn.functional.logsigmoid(input)→Tensor¶",
            "function_name": "logsigmoid",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "logsigmoid"
            ],
            "tfjs": "logsigmoid",
            "tf": null
        },
        "hardshrink": {
            "code": "torch.nn.functional.hardshrink(input,lambd=0.5)→Tensor¶",
            "function_name": "hardshrink",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lambd",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "hardshrink"
            ],
            "tfjs": null,
            "tf": null
        },
        "tanhshrink": {
            "code": "torch.nn.functional.tanhshrink(input)→Tensor¶",
            "function_name": "tanhshrink",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "tanhshrink"
            ],
            "tfjs": null,
            "tf": null
        },
        "softsign": {
            "code": "torch.nn.functional.softsign(input)→Tensor¶",
            "function_name": "softsign",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softsign"
            ],
            "tfjs": null,
            "tf": "softsign"
        },
        "softplus": {
            "code": "torch.nn.functional.softplus(input,beta=1,threshold=20)→Tensor¶",
            "function_name": "softplus",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softplus"
            ],
            "tfjs": "softplus",
            "tf": "softplus"
        },
        "softmin": {
            "code": "torch.nn.functional.softmin(input,dim=None,_stacklevel=3,dtype=None)¶",
            "function_name": "softmin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "_stacklevel",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softmin"
            ],
            "tfjs": null,
            "tf": null
        },
        "softmax": {
            "code": "torch.nn.functional.softmax(input,dim=None,_stacklevel=3,dtype=None)¶",
            "function_name": "softmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dim",
                    "tf": null
                },
                {
                    "name": "_stacklevel",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softmax"
            ],
            "tfjs": "softmax",
            "tf": "softmax"
        },
        "softshrink": {
            "code": "torch.nn.functional.softshrink(input,lambd=0.5)→Tensor¶",
            "function_name": "softshrink",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lambd",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "softshrink"
            ],
            "tfjs": null,
            "tf": null
        },
        "log_softmax": {
            "code": "torch.nn.functional.log_softmax(input,dim=None,_stacklevel=3,dtype=None)¶",
            "function_name": "log_softmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "_stacklevel",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "log_softmax"
            ],
            "tfjs": null,
            "tf": "log_softmax"
        },
        "tanh": {
            "code": "torch.tanh(input,out=None)→Tensor¶",
            "function_name": "tanh",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tanh"
            ],
            "tfjs": "tanh",
            "tf": "tanh"
        },
        "sigmoid": {
            "code": "torch.sigmoid(input,out=None)→Tensor¶",
            "function_name": "sigmoid",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sigmoid"
            ],
            "tfjs": "sigmoid",
            "tf": "sigmoid"
        },
        "local_response_norm": {
            "code": "torch.nn.functional.local_response_norm(input,size,alpha=0.0001,beta=0.75,k=1.0)¶",
            "function_name": "local_response_norm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "k",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "local_response_norm"
            ],
            "tfjs": null,
            "tf": null
        },
        "to": {
            "code": "to(tensor,non_blocking=False)",
            "function_name": "to",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "non_blocking",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "to"
            ],
            "tfjs": null,
            "tf": null
        },
        "all": {
            "code": "all(dim,keepdim=False,out=None)→Tensor",
            "function_name": "all",
            "args": [
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "all"
            ],
            "tfjs": "all",
            "tf": "all"
        },
        "any": {
            "code": "any(dim,keepdim=False,out=None)→Tensor",
            "function_name": "any",
            "args": [
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "any"
            ],
            "tfjs": "any",
            "tf": "any"
        },
        "is_tensor": {
            "code": "torch.is_tensor(obj)¶",
            "function_name": "is_tensor",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "is_tensor"
            ],
            "tfjs": null,
            "tf": "is_tensor"
        },
        "bilinear": {
            "code": "torch.nn.functional.bilinear(input1,input2,weight,bias=None)¶",
            "function_name": "bilinear",
            "args": [
                {
                    "name": "input1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "bias",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "bilinear"
            ],
            "tfjs": null,
            "tf": null
        },
        "dropout": {
            "code": "torch.nn.functional.dropout(input,p=0.5,training=True,inplace=False)¶",
            "function_name": "dropout",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "dropout"
            ],
            "tfjs": "dropout",
            "tf": "dropout"
        },
        "alpha_dropout": {
            "code": "torch.nn.functional.alpha_dropout(input,p=0.5,training=False,inplace=False)¶",
            "function_name": "alpha_dropout",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "alpha_dropout"
            ],
            "tfjs": null,
            "tf": null
        },
        "dropout2d": {
            "code": "torch.nn.functional.dropout2d(input,p=0.5,training=True,inplace=False)¶",
            "function_name": "dropout2d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "dropout2d"
            ],
            "tfjs": null,
            "tf": null
        },
        "dropout3d": {
            "code": "torch.nn.functional.dropout3d(input,p=0.5,training=True,inplace=False)¶",
            "function_name": "dropout3d",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "training",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "inplace",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "dropout3d"
            ],
            "tfjs": null,
            "tf": null
        },
        "embedding": {
            "code": "torch.nn.functional.embedding(input,weight,padding_idx=None,max_norm=None,norm_type=2.0,scale_grad_by_freq=False,sparse=False)¶",
            "function_name": "embedding",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "padding_idx",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "max_norm",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "norm_type",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "scale_grad_by_freq",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "sparse",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "embedding"
            ],
            "tfjs": "embedding",
            "tf": "embedding"
        },
        "pdist": {
            "code": "torch.nn.functional.pdist(input,p=2)→Tensor¶",
            "function_name": "pdist",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "pdist"
            ],
            "tfjs": null,
            "tf": null
        },
        "multilabel_soft_margin_loss": {
            "code": "torch.nn.functional.multilabel_soft_margin_loss(input,target,weight=None,size_average=None)→Tensor¶",
            "function_name": "multilabel_soft_margin_loss",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "target",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weight",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "size_average",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "multilabel_soft_margin_loss"
            ],
            "tfjs": null,
            "tf": null
        },
        "pixel_shuffle": {
            "code": "torch.nn.functional.pixel_shuffle()¶",
            "function_name": "pixel_shuffle",
            "args": [],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "pixel_shuffle"
            ],
            "tfjs": null,
            "tf": null
        },
        "affine_grid": {
            "code": "torch.nn.functional.affine_grid(theta,size,align_corners=None)¶",
            "function_name": "affine_grid",
            "args": [
                {
                    "name": "theta",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "align_corners",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "functional",
                "affine_grid"
            ],
            "tfjs": null,
            "tf": null
        },
        "data_parallel": {
            "code": "torch.nn.parallel.data_parallel(module,inputs,device_ids=None,output_device=None,dim=0,module_kwargs=None)¶",
            "function_name": "data_parallel",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "device_ids",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "output_device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "module_kwargs",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "parallel",
                "data_parallel"
            ],
            "tfjs": null,
            "tf": null
        },
        "clip_grad_norm_": {
            "code": "torch.nn.utils.clip_grad_norm_(parameters,max_norm,norm_type=2)¶",
            "function_name": "clip_grad_norm_",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "max_norm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "norm_type",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "clip_grad_norm_"
            ],
            "tfjs": null,
            "tf": null
        },
        "clip_grad_value_": {
            "code": "torch.nn.utils.clip_grad_value_(parameters,clip_value)¶",
            "function_name": "clip_grad_value_",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "clip_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "clip_grad_value_"
            ],
            "tfjs": null,
            "tf": null
        },
        "parameters_to_vector": {
            "code": "torch.nn.utils.parameters_to_vector(parameters)¶",
            "function_name": "parameters_to_vector",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "parameters_to_vector"
            ],
            "tfjs": null,
            "tf": null
        },
        "vector_to_parameters": {
            "code": "torch.nn.utils.vector_to_parameters(vec,parameters)¶",
            "function_name": "vector_to_parameters",
            "args": [
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "vector_to_parameters"
            ],
            "tfjs": null,
            "tf": null
        },
        "identity": {
            "code": "torch.nn.utils.prune.identity(module,name)¶",
            "function_name": "identity",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "identity"
            ],
            "tfjs": "identity",
            "tf": "identity"
        },
        "random_unstructured": {
            "code": "torch.nn.utils.prune.random_unstructured(module,name,amount)¶",
            "function_name": "random_unstructured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "random_unstructured"
            ],
            "tfjs": null,
            "tf": null
        },
        "l1_unstructured": {
            "code": "torch.nn.utils.prune.l1_unstructured(module,name,amount)¶",
            "function_name": "l1_unstructured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "l1_unstructured"
            ],
            "tfjs": null,
            "tf": null
        },
        "random_structured": {
            "code": "torch.nn.utils.prune.random_structured(module,name,amount,dim)¶",
            "function_name": "random_structured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "random_structured"
            ],
            "tfjs": null,
            "tf": null
        },
        "ln_structured": {
            "code": "torch.nn.utils.prune.ln_structured(module,name,amount,n,dim)¶",
            "function_name": "ln_structured",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "amount",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "ln_structured"
            ],
            "tfjs": null,
            "tf": null
        },
        "global_unstructured": {
            "code": "torch.nn.utils.prune.global_unstructured(parameters,pruning_method,**kwargs)¶",
            "function_name": "global_unstructured",
            "args": [
                {
                    "name": "parameters",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "pruning_method",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "global_unstructured"
            ],
            "tfjs": null,
            "tf": null
        },
        "custom_from_mask": {
            "code": "torch.nn.utils.prune.custom_from_mask(module,name,mask)¶",
            "function_name": "custom_from_mask",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "custom_from_mask"
            ],
            "tfjs": null,
            "tf": null
        },
        "remove": {
            "code": "torch.nn.utils.prune.remove(module,name)¶",
            "function_name": "remove",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "name",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "remove"
            ],
            "tfjs": null,
            "tf": "remove"
        },
        "is_pruned": {
            "code": "torch.nn.utils.prune.is_pruned(module)¶",
            "function_name": "is_pruned",
            "args": [
                {
                    "name": "module",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "prune",
                "is_pruned"
            ],
            "tfjs": null,
            "tf": null
        },
        "packedsequence": {
            "code": "torch.nn.utils.rnn.PackedSequence(data,batch_sizes=None,sorted_indices=None,unsorted_indices=None)¶",
            "function_name": "PackedSequence",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_sizes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sorted_indices",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unsorted_indices",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "PackedSequence"
            ],
            "tfjs": null,
            "tf": null
        },
        "pack_padded_sequence": {
            "code": "torch.nn.utils.rnn.pack_padded_sequence(input,lengths,batch_first=False,enforce_sorted=True)¶",
            "function_name": "pack_padded_sequence",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lengths",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "batch_first",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "enforce_sorted",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pack_padded_sequence"
            ],
            "tfjs": null,
            "tf": null
        },
        "pad_packed_sequence": {
            "code": "torch.nn.utils.rnn.pad_packed_sequence(sequence,batch_first=False,padding_value=0.0,total_length=None)¶",
            "function_name": "pad_packed_sequence",
            "args": [
                {
                    "name": "sequence",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_first",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding_value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "total_length",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pad_packed_sequence"
            ],
            "tfjs": null,
            "tf": null
        },
        "pad_sequence": {
            "code": "torch.nn.utils.rnn.pad_sequence(sequences,batch_first=False,padding_value=0)¶",
            "function_name": "pad_sequence",
            "args": [
                {
                    "name": "sequences",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch_first",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "padding_value",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pad_sequence"
            ],
            "tfjs": null,
            "tf": null
        },
        "pack_sequence": {
            "code": "torch.nn.utils.rnn.pack_sequence(sequences,enforce_sorted=True)¶",
            "function_name": "pack_sequence",
            "args": [
                {
                    "name": "sequences",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "enforce_sorted",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nn",
                "utils",
                "rnn",
                "pack_sequence"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_storage": {
            "code": "torch.is_storage(obj)¶",
            "function_name": "is_storage",
            "args": [
                {
                    "name": "obj",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "is_storage"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_floating_point": {
            "code": "torch.is_floating_point(input)-&gt;(bool)¶",
            "function_name": "is_floating_point",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "is_floating_point"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_default_dtype": {
            "code": "torch.set_default_dtype(d)¶",
            "function_name": "set_default_dtype",
            "args": [
                {
                    "name": "d",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "set_default_dtype"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_default_dtype": {
            "code": "torch.get_default_dtype()→torch.dtype¶",
            "function_name": "get_default_dtype",
            "args": [],
            "attrs": [
                "torch",
                "get_default_dtype"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_default_tensor_type": {
            "code": "torch.set_default_tensor_type(t)¶",
            "function_name": "set_default_tensor_type",
            "args": [
                {
                    "name": "t",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "set_default_tensor_type"
            ],
            "tfjs": null,
            "tf": null
        },
        "numel": {
            "code": "torch.numel(input)→int¶",
            "function_name": "numel",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "numel"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_printoptions": {
            "code": "torch.set_printoptions(precision=None,threshold=None,edgeitems=None,linewidth=None,profile=None,sci_mode=None)¶",
            "function_name": "set_printoptions",
            "args": [
                {
                    "name": "precision",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "threshold",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "edgeitems",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "linewidth",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "profile",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "sci_mode",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "set_printoptions"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_flush_denormal": {
            "code": "torch.set_flush_denormal(mode)→bool¶",
            "function_name": "set_flush_denormal",
            "args": [
                {
                    "name": "mode",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "set_flush_denormal"
            ],
            "tfjs": null,
            "tf": null
        },
        "tensor": {
            "code": "torch.tensor(data,dtype=None,device=None,requires_grad=False,pin_memory=False)→Tensor¶",
            "function_name": "tensor",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype",
                    "tf": "dtype"
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "pin_memory",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tensor"
            ],
            "tfjs": "tensor",
            "tf": "tensor"
        },
        "sparse_coo_tensor": {
            "code": "torch.sparse_coo_tensor(indices,values,size=None,dtype=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "sparse_coo_tensor",
            "args": [
                {
                    "name": "indices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "values",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "size",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "sparse_coo_tensor"
            ],
            "tfjs": null,
            "tf": null
        },
        "as_tensor": {
            "code": "torch.as_tensor(data,dtype=None,device=None)→Tensor¶",
            "function_name": "as_tensor",
            "args": [
                {
                    "name": "data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "as_tensor"
            ],
            "tfjs": null,
            "tf": null
        },
        "as_strided": {
            "code": "torch.as_strided(input,size,stride,storage_offset=0)→Tensor¶",
            "function_name": "as_strided",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "stride",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "storage_offset",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "as_strided"
            ],
            "tfjs": null,
            "tf": null
        },
        "from_numpy": {
            "code": "torch.from_numpy(ndarray)→Tensor¶",
            "function_name": "from_numpy",
            "args": [
                {
                    "name": "ndarray",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "from_numpy"
            ],
            "tfjs": null,
            "tf": null
        },
        "zeros": {
            "code": "torch.zeros(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "zeros",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "zeros"
            ],
            "tfjs": "zeros",
            "tf": "zeros"
        },
        "zeros_like": {
            "code": "torch.zeros_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "zeros_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "zeros_like"
            ],
            "tfjs": null,
            "tf": "zeros_like"
        },
        "ones": {
            "code": "torch.ones(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "ones",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ones"
            ],
            "tfjs": "ones",
            "tf": "ones"
        },
        "ones_like": {
            "code": "torch.ones_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "ones_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ones_like"
            ],
            "tfjs": null,
            "tf": "ones_like"
        },
        "arange": {
            "code": "torch.arange(start=0,end,step=1,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "arange",
            "args": [
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "start"
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "step"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "arange"
            ],
            "tfjs": null,
            "tf": "arange"
        },
        "range": {
            "code": "torch.range(start=0,end,step=1,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "range",
            "args": [
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "start",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "start",
                    "tf": null
                },
                {
                    "name": "step",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "step",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype",
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "range"
            ],
            "tfjs": "range",
            "tf": "range"
        },
        "linspace": {
            "code": "torch.linspace(start,end,steps=100,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "linspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "start",
                    "tf": "start"
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "steps",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "linspace"
            ],
            "tfjs": "linspace",
            "tf": "linspace"
        },
        "logspace": {
            "code": "torch.logspace(start,end,steps=100,base=10.0,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "logspace",
            "args": [
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "steps",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "base",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "logspace"
            ],
            "tfjs": null,
            "tf": null
        },
        "eye": {
            "code": "torch.eye(n,m=None,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "eye",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "m",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "dtype",
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "eye"
            ],
            "tfjs": "eye",
            "tf": "eye"
        },
        "empty": {
            "code": "torch.empty(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False,pin_memory=False)→Tensor¶",
            "function_name": "empty",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pin_memory",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "empty"
            ],
            "tfjs": null,
            "tf": null
        },
        "empty_like": {
            "code": "torch.empty_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "empty_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "empty_like"
            ],
            "tfjs": null,
            "tf": null
        },
        "current_blas_handle": {
            "code": "torch.cuda.current_blas_handle()¶",
            "function_name": "current_blas_handle",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "current_blas_handle"
            ],
            "tfjs": null,
            "tf": null
        },
        "current_device": {
            "code": "torch.cuda.current_device()¶",
            "function_name": "current_device",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "current_device"
            ],
            "tfjs": null,
            "tf": null
        },
        "current_stream": {
            "code": "torch.cuda.current_stream(device=None)¶",
            "function_name": "current_stream",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "current_stream"
            ],
            "tfjs": null,
            "tf": null
        },
        "empty_strided": {
            "code": "torch.empty_strided(size,stride,dtype=None,layout=None,device=None,requires_grad=False,pin_memory=False)→Tensor¶",
            "function_name": "empty_strided",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "stride",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "pin_memory",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "empty_strided"
            ],
            "tfjs": null,
            "tf": null
        },
        "full": {
            "code": "torch.full(size,fill_value,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "full",
            "args": [
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fill_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "full"
            ],
            "tfjs": null,
            "tf": null
        },
        "full_like": {
            "code": "torch.full_like(input,fill_value,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "full_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "fill_value",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "full_like"
            ],
            "tfjs": null,
            "tf": null
        },
        "quantize_per_tensor": {
            "code": "torch.quantize_per_tensor(input,scale,zero_point,dtype)→Tensor¶",
            "function_name": "quantize_per_tensor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scale",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "zero_point",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "torch",
                "quantize_per_tensor"
            ],
            "tfjs": null,
            "tf": null
        },
        "quantize_per_channel": {
            "code": "torch.quantize_per_channel(input,scales,zero_points,axis,dtype)→Tensor¶",
            "function_name": "quantize_per_channel",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "scales",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "zero_points",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "axis",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "dtype",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 4
                }
            ],
            "attrs": [
                "torch",
                "quantize_per_channel"
            ],
            "tfjs": null,
            "tf": null
        },
        "cat": {
            "code": "torch.cat(tensors,dim=0,out=None)→Tensor¶",
            "function_name": "cat",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cat"
            ],
            "tfjs": null,
            "tf": null
        },
        "chunk": {
            "code": "torch.chunk(input,chunks,dim=0)→ListofTensors¶",
            "function_name": "chunk",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "chunks",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "chunk"
            ],
            "tfjs": null,
            "tf": null
        },
        "gather": {
            "code": "torch.cuda.comm.gather(tensors,dim=0,destination=None)¶",
            "function_name": "gather",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "destination",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "gather"
            ],
            "tfjs": "gather",
            "tf": "gather"
        },
        "index_select": {
            "code": "torch.index_select(input,dim,index,out=None)→Tensor¶",
            "function_name": "index_select",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "index_select"
            ],
            "tfjs": null,
            "tf": null
        },
        "masked_select": {
            "code": "torch.masked_select(input,mask,out=None)→Tensor¶",
            "function_name": "masked_select",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mask",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "masked_select"
            ],
            "tfjs": null,
            "tf": null
        },
        "narrow": {
            "code": "torch.narrow(input,dim,start,length)→Tensor¶",
            "function_name": "narrow",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "start",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                }
            ],
            "attrs": [
                "torch",
                "narrow"
            ],
            "tfjs": null,
            "tf": null
        },
        "nonzero": {
            "code": "torch.nonzero(input,*,out=None,as_tuple=False)→LongTensorortupleofLongTensors¶",
            "function_name": "nonzero",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "as_tuple",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "nonzero"
            ],
            "tfjs": null,
            "tf": null
        },
        "reshape": {
            "code": "torch.reshape(input,shape)→Tensor¶",
            "function_name": "reshape",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "shape",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": "shape"
                }
            ],
            "attrs": [
                "torch",
                "reshape"
            ],
            "tfjs": "reshape",
            "tf": "reshape"
        },
        "split": {
            "code": "torch.split(tensor,split_size_or_sections,dim=0)¶",
            "function_name": "split",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "split_size_or_sections",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis",
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "split"
            ],
            "tfjs": "split",
            "tf": "split"
        },
        "squeeze": {
            "code": "torch.squeeze(input,dim=None,out=None)→Tensor¶",
            "function_name": "squeeze",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": "input"
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "squeeze"
            ],
            "tfjs": "squeeze",
            "tf": "squeeze"
        },
        "stack": {
            "code": "torch.stack(tensors,dim=0,out=None)→Tensor¶",
            "function_name": "stack",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "tensors",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "stack"
            ],
            "tfjs": "stack",
            "tf": "stack"
        },
        "t": {
            "code": "torch.t(input)→Tensor¶",
            "function_name": "t",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                }
            ],
            "attrs": [
                "torch",
                "t"
            ],
            "tfjs": "transpose",
            "tf": null
        },
        "take": {
            "code": "torch.take(input,index)→Tensor¶",
            "function_name": "take",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "index",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "take"
            ],
            "tfjs": "take",
            "tf": null
        },
        "transpose": {
            "code": "torch.transpose(input,dim0,dim1)→Tensor¶",
            "function_name": "transpose",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim0",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dim1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "transpose"
            ],
            "tfjs": "transpose",
            "tf": "transpose"
        },
        "unbind": {
            "code": "torch.unbind(input,dim=0)→seq¶",
            "function_name": "unbind",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "unbind"
            ],
            "tfjs": null,
            "tf": null
        },
        "unsqueeze": {
            "code": "torch.unsqueeze(input,dim,out=None)→Tensor¶",
            "function_name": "unsqueeze",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "unsqueeze"
            ],
            "tfjs": null,
            "tf": null
        },
        "where": {
            "code": "torch.where(condition)→tupleofLongTensor",
            "function_name": "where",
            "args": [
                {
                    "name": "condition",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "condition",
                    "tf": "condition"
                }
            ],
            "attrs": [
                "torch",
                "where"
            ],
            "tfjs": "where",
            "tf": "where"
        },
        "default_stream": {
            "code": "torch.cuda.default_stream(device=None)¶",
            "function_name": "default_stream",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "default_stream"
            ],
            "tfjs": null,
            "tf": null
        },
        "device_count": {
            "code": "torch.cuda.device_count()¶",
            "function_name": "device_count",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "device_count"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_device_capability": {
            "code": "torch.cuda.get_device_capability(device=None)¶",
            "function_name": "get_device_capability",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "get_device_capability"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_device_name": {
            "code": "torch.cuda.get_device_name(device=None)¶",
            "function_name": "get_device_name",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "get_device_name"
            ],
            "tfjs": null,
            "tf": null
        },
        "init": {
            "code": "torch.cuda.init()¶",
            "function_name": "init",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "init"
            ],
            "tfjs": null,
            "tf": null
        },
        "ipc_collect": {
            "code": "torch.cuda.ipc_collect()¶",
            "function_name": "ipc_collect",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "ipc_collect"
            ],
            "tfjs": null,
            "tf": null
        },
        "is_available": {
            "code": "torch.cuda.is_available()¶",
            "function_name": "is_available",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "is_available"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_device": {
            "code": "torch.cuda.set_device(device)¶",
            "function_name": "set_device",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "set_device"
            ],
            "tfjs": null,
            "tf": null
        },
        "stream": {
            "code": "torch.cuda.stream(stream)¶",
            "function_name": "stream",
            "args": [
                {
                    "name": "stream",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "stream"
            ],
            "tfjs": null,
            "tf": null
        },
        "synchronize": {
            "code": "torch.cuda.synchronize(device=None)¶",
            "function_name": "synchronize",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "synchronize"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_rng_state_all": {
            "code": "torch.cuda.get_rng_state_all()¶",
            "function_name": "get_rng_state_all",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "get_rng_state_all"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_rng_state_all": {
            "code": "torch.cuda.set_rng_state_all(new_states)¶",
            "function_name": "set_rng_state_all",
            "args": [
                {
                    "name": "new_states",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "set_rng_state_all"
            ],
            "tfjs": null,
            "tf": null
        },
        "manual_seed_all": {
            "code": "torch.cuda.manual_seed_all(seed)¶",
            "function_name": "manual_seed_all",
            "args": [
                {
                    "name": "seed",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "manual_seed_all"
            ],
            "tfjs": null,
            "tf": null
        },
        "seed_all": {
            "code": "torch.cuda.seed_all()¶",
            "function_name": "seed_all",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "seed_all"
            ],
            "tfjs": null,
            "tf": null
        },
        "broadcast": {
            "code": "torch.cuda.comm.broadcast(tensor,devices)¶",
            "function_name": "broadcast",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "broadcast"
            ],
            "tfjs": null,
            "tf": null
        },
        "broadcast_coalesced": {
            "code": "torch.cuda.comm.broadcast_coalesced(tensors,devices,buffer_size=10485760)¶",
            "function_name": "broadcast_coalesced",
            "args": [
                {
                    "name": "tensors",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "buffer_size",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "broadcast_coalesced"
            ],
            "tfjs": null,
            "tf": null
        },
        "reduce_add": {
            "code": "torch.cuda.comm.reduce_add(inputs,destination=None)¶",
            "function_name": "reduce_add",
            "args": [
                {
                    "name": "inputs",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "destination",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "reduce_add"
            ],
            "tfjs": null,
            "tf": null
        },
        "scatter": {
            "code": "torch.cuda.comm.scatter(tensor,devices,chunk_sizes=None,dim=0,streams=None)¶",
            "function_name": "scatter",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "devices",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "chunk_sizes",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "streams",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "comm",
                "scatter"
            ],
            "tfjs": null,
            "tf": null
        },
        "empty_cache": {
            "code": "torch.cuda.empty_cache()¶",
            "function_name": "empty_cache",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "empty_cache"
            ],
            "tfjs": null,
            "tf": null
        },
        "memory_stats": {
            "code": "torch.cuda.memory_stats(device=None)¶",
            "function_name": "memory_stats",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_stats"
            ],
            "tfjs": null,
            "tf": null
        },
        "memory_summary": {
            "code": "torch.cuda.memory_summary(device=None,abbreviated=False)¶",
            "function_name": "memory_summary",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "abbreviated",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_summary"
            ],
            "tfjs": null,
            "tf": null
        },
        "memory_snapshot": {
            "code": "torch.cuda.memory_snapshot()¶",
            "function_name": "memory_snapshot",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "memory_snapshot"
            ],
            "tfjs": null,
            "tf": null
        },
        "memory_allocated": {
            "code": "torch.cuda.memory_allocated(device=None)¶",
            "function_name": "memory_allocated",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_allocated"
            ],
            "tfjs": null,
            "tf": null
        },
        "max_memory_allocated": {
            "code": "torch.cuda.max_memory_allocated(device=None)¶",
            "function_name": "max_memory_allocated",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "max_memory_allocated"
            ],
            "tfjs": null,
            "tf": null
        },
        "reset_max_memory_allocated": {
            "code": "torch.cuda.reset_max_memory_allocated(device=None)¶",
            "function_name": "reset_max_memory_allocated",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "reset_max_memory_allocated"
            ],
            "tfjs": null,
            "tf": null
        },
        "memory_reserved": {
            "code": "torch.cuda.memory_reserved(device=None)¶",
            "function_name": "memory_reserved",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_reserved"
            ],
            "tfjs": null,
            "tf": null
        },
        "bernoulli": {
            "code": "torch.bernoulli(input,*,generator=None,out=None)→Tensor¶",
            "function_name": "bernoulli",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "bernoulli"
            ],
            "tfjs": null,
            "tf": null
        },
        "multinomial": {
            "code": "torch.multinomial(input,num_samples,replacement=False,*,generator=None,out=None)→LongTensor¶",
            "function_name": "multinomial",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "num_samples",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tfjs": null
                },
                {
                    "name": "replacement",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "multinomial"
            ],
            "tfjs": "multinomial",
            "tf": null
        },
        "normal": {
            "code": "torch.normal(mean,std,size,*,out=None)→Tensor",
            "function_name": "normal",
            "args": [
                {
                    "name": "mean",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "mean"
                },
                {
                    "name": "std",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "normal"
            ],
            "tfjs": null,
            "tf": "normal"
        },
        "rand": {
            "code": "torch.rand(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "rand",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "rand"
            ],
            "tfjs": null,
            "tf": null
        },
        "rand_like": {
            "code": "torch.rand_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "rand_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "rand_like"
            ],
            "tfjs": null,
            "tf": null
        },
        "randint": {
            "code": "torch.randint(low=0,high,size,*,generator=None,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randint",
            "args": [
                {
                    "name": "high",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "size",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "low",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "generator",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "randint"
            ],
            "tfjs": null,
            "tf": null
        },
        "randint_like": {
            "code": "torch.randint_like(input,low=0,high,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randint_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "high",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "low",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "randint_like"
            ],
            "tfjs": null,
            "tf": null
        },
        "randn": {
            "code": "torch.randn(*size,out=None,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randn",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "randn"
            ],
            "tfjs": null,
            "tf": null
        },
        "randn_like": {
            "code": "torch.randn_like(input,dtype=None,layout=None,device=None,requires_grad=False)→Tensor¶",
            "function_name": "randn_like",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "randn_like"
            ],
            "tfjs": null,
            "tf": null
        },
        "randperm": {
            "code": "torch.randperm(n,out=None,dtype=torch.int64,layout=torch.strided,device=None,requires_grad=False)→LongTensor¶",
            "function_name": "randperm",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "randperm"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_num_threads": {
            "code": "torch.get_num_threads()→int¶",
            "function_name": "get_num_threads",
            "args": [],
            "attrs": [
                "torch",
                "get_num_threads"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_num_threads": {
            "code": "torch.set_num_threads(int)¶",
            "function_name": "set_num_threads",
            "args": [
                {
                    "name": "int",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "set_num_threads"
            ],
            "tfjs": null,
            "tf": null
        },
        "get_num_interop_threads": {
            "code": "torch.get_num_interop_threads()→int¶",
            "function_name": "get_num_interop_threads",
            "args": [],
            "attrs": [
                "torch",
                "get_num_interop_threads"
            ],
            "tfjs": null,
            "tf": null
        },
        "set_num_interop_threads": {
            "code": "torch.set_num_interop_threads(int)¶",
            "function_name": "set_num_interop_threads",
            "args": [
                {
                    "name": "int",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "set_num_interop_threads"
            ],
            "tfjs": null,
            "tf": null
        },
        "abs": {
            "code": "torch.abs(input,out=None)→Tensor¶",
            "function_name": "abs",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "abs"
            ],
            "tfjs": "abs",
            "tf": "abs"
        },
        "acos": {
            "code": "torch.acos(input,out=None)→Tensor¶",
            "function_name": "acos",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "acos"
            ],
            "tfjs": "acos",
            "tf": "acos"
        },
        "add": {
            "code": "torch.add(input,alpha=1,other,out=None)",
            "function_name": "add",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b",
                    "tf": null
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "add"
            ],
            "tfjs": "add",
            "tf": "add"
        },
        "addcdiv": {
            "code": "torch.addcdiv(input,value=1,tensor1,tensor2,out=None)→Tensor¶",
            "function_name": "addcdiv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tensor1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "tensor2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "addcdiv"
            ],
            "tfjs": null,
            "tf": null
        },
        "addcmul": {
            "code": "torch.addcmul(input,value=1,tensor1,tensor2,out=None)→Tensor¶",
            "function_name": "addcmul",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tensor1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "tensor2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "value",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "addcmul"
            ],
            "tfjs": null,
            "tf": null
        },
        "angle": {
            "code": "torch.angle(input,out=None)→Tensor¶",
            "function_name": "angle",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "angle"
            ],
            "tfjs": null,
            "tf": "angle"
        },
        "asin": {
            "code": "torch.asin(input,out=None)→Tensor¶",
            "function_name": "asin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "asin"
            ],
            "tfjs": "asin",
            "tf": "asin"
        },
        "atan": {
            "code": "torch.atan(input,out=None)→Tensor¶",
            "function_name": "atan",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "atan"
            ],
            "tfjs": "atan",
            "tf": "atan"
        },
        "max_memory_reserved": {
            "code": "torch.cuda.max_memory_reserved(device=None)¶",
            "function_name": "max_memory_reserved",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "max_memory_reserved"
            ],
            "tfjs": null,
            "tf": null
        },
        "memory_cached": {
            "code": "torch.cuda.memory_cached(device=None)¶",
            "function_name": "memory_cached",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "memory_cached"
            ],
            "tfjs": null,
            "tf": null
        },
        "max_memory_cached": {
            "code": "torch.cuda.max_memory_cached(device=None)¶",
            "function_name": "max_memory_cached",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "max_memory_cached"
            ],
            "tfjs": null,
            "tf": null
        },
        "reset_max_memory_cached": {
            "code": "torch.cuda.reset_max_memory_cached(device=None)¶",
            "function_name": "reset_max_memory_cached",
            "args": [
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "reset_max_memory_cached"
            ],
            "tfjs": null,
            "tf": null
        },
        "mark": {
            "code": "torch.cuda.nvtx.mark(msg)¶",
            "function_name": "mark",
            "args": [
                {
                    "name": "msg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "nvtx",
                "mark"
            ],
            "tfjs": null,
            "tf": null
        },
        "range_push": {
            "code": "torch.cuda.nvtx.range_push(msg)¶",
            "function_name": "range_push",
            "args": [
                {
                    "name": "msg",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cuda",
                "nvtx",
                "range_push"
            ],
            "tfjs": null,
            "tf": null
        },
        "range_pop": {
            "code": "torch.cuda.nvtx.range_pop()¶",
            "function_name": "range_pop",
            "args": [],
            "attrs": [
                "torch",
                "cuda",
                "nvtx",
                "range_pop"
            ],
            "tfjs": null,
            "tf": null
        },
        "atan2": {
            "code": "torch.atan2(input,other,out=None)→Tensor¶",
            "function_name": "atan2",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "atan2"
            ],
            "tfjs": "atan2",
            "tf": "atan2"
        },
        "bitwise_not": {
            "code": "torch.bitwise_not(input,out=None)→Tensor¶",
            "function_name": "bitwise_not",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "bitwise_not"
            ],
            "tfjs": null,
            "tf": null
        },
        "bitwise_xor": {
            "code": "torch.bitwise_xor(input,other,out=None)→Tensor¶",
            "function_name": "bitwise_xor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "bitwise_xor"
            ],
            "tfjs": null,
            "tf": "bitwise_xor"
        },
        "ceil": {
            "code": "torch.ceil(input,out=None)→Tensor¶",
            "function_name": "ceil",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ceil"
            ],
            "tfjs": "ceil",
            "tf": "ceil"
        },
        "clamp": {
            "code": "torch.clamp(input,*,max,out=None)→Tensor",
            "function_name": "clamp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "max",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "clamp"
            ],
            "tfjs": null,
            "tf": null
        },
        "conj": {
            "code": "torch.conj(input,out=None)→Tensor¶",
            "function_name": "conj",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "conj"
            ],
            "tfjs": null,
            "tf": "conj"
        },
        "cos": {
            "code": "torch.cos(input,out=None)→Tensor¶",
            "function_name": "cos",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cos"
            ],
            "tfjs": "cos",
            "tf": "cos"
        },
        "cosh": {
            "code": "torch.cosh(input,out=None)→Tensor¶",
            "function_name": "cosh",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cosh"
            ],
            "tfjs": "cosh",
            "tf": "cosh"
        },
        "div": {
            "code": "torch.div(input,other,out=None)→Tensor",
            "function_name": "div",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "div"
            ],
            "tfjs": "div",
            "tf": null
        },
        "digamma": {
            "code": "torch.digamma(input,out=None)→Tensor¶",
            "function_name": "digamma",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "digamma"
            ],
            "tfjs": null,
            "tf": "digamma"
        },
        "erf": {
            "code": "torch.erf(input,out=None)→Tensor¶",
            "function_name": "erf",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "erf"
            ],
            "tfjs": "erf",
            "tf": "erf"
        },
        "erfc": {
            "code": "torch.erfc(input,out=None)→Tensor¶",
            "function_name": "erfc",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "erfc"
            ],
            "tfjs": null,
            "tf": "erfc"
        },
        "erfinv": {
            "code": "torch.erfinv(input,out=None)→Tensor¶",
            "function_name": "erfinv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "erfinv"
            ],
            "tfjs": null,
            "tf": "erfinv"
        },
        "exp": {
            "code": "torch.exp(input,out=None)→Tensor¶",
            "function_name": "exp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "exp"
            ],
            "tfjs": "exp",
            "tf": "exp"
        },
        "expm1": {
            "code": "torch.expm1(input,out=None)→Tensor¶",
            "function_name": "expm1",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "expm1"
            ],
            "tfjs": "expm1",
            "tf": "expm1"
        },
        "floor": {
            "code": "torch.floor(input,out=None)→Tensor¶",
            "function_name": "floor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "floor"
            ],
            "tfjs": "floor",
            "tf": "floor"
        },
        "fmod": {
            "code": "torch.fmod(input,other,out=None)→Tensor¶",
            "function_name": "fmod",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "fmod"
            ],
            "tfjs": null,
            "tf": null
        },
        "frac": {
            "code": "torch.frac(input,out=None)→Tensor¶",
            "function_name": "frac",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "frac"
            ],
            "tfjs": null,
            "tf": null
        },
        "imag": {
            "code": "torch.imag(input,out=None)→Tensor¶",
            "function_name": "imag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "imag"
            ],
            "tfjs": "imag",
            "tf": "imag"
        },
        "lerp": {
            "code": "torch.lerp(input,end,weight,out=None)¶",
            "function_name": "lerp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "end",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "weight",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "lerp"
            ],
            "tfjs": null,
            "tf": null
        },
        "lgamma": {
            "code": "torch.lgamma(input,out=None)→Tensor¶",
            "function_name": "lgamma",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lgamma"
            ],
            "tfjs": null,
            "tf": "lgamma"
        },
        "log": {
            "code": "torch.log(input,out=None)→Tensor¶",
            "function_name": "log",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "log"
            ],
            "tfjs": "log",
            "tf": "log"
        },
        "log10": {
            "code": "torch.log10(input,out=None)→Tensor¶",
            "function_name": "log10",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "log10"
            ],
            "tfjs": null,
            "tf": null
        },
        "log1p": {
            "code": "torch.log1p(input,out=None)→Tensor¶",
            "function_name": "log1p",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "log1p"
            ],
            "tfjs": "log1p",
            "tf": "log1p"
        },
        "log2": {
            "code": "torch.log2(input,out=None)→Tensor¶",
            "function_name": "log2",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "log2"
            ],
            "tfjs": null,
            "tf": null
        },
        "logical_not": {
            "code": "torch.logical_not(input,out=None)→Tensor¶",
            "function_name": "logical_not",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logical_not"
            ],
            "tfjs": null,
            "tf": "logical_not"
        },
        "logical_xor": {
            "code": "torch.logical_xor(input,other,out=None)→Tensor¶",
            "function_name": "logical_xor",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logical_xor"
            ],
            "tfjs": null,
            "tf": "logical_xor"
        },
        "mul": {
            "code": "torch.mul(input,other,out=None)",
            "function_name": "mul",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "mul"
            ],
            "tfjs": "mul",
            "tf": null
        },
        "mvlgamma": {
            "code": "torch.mvlgamma(input,p)→Tensor¶",
            "function_name": "mvlgamma",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "mvlgamma"
            ],
            "tfjs": null,
            "tf": null
        },
        "neg": {
            "code": "torch.neg(input,out=None)→Tensor¶",
            "function_name": "neg",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "neg"
            ],
            "tfjs": "neg",
            "tf": null
        },
        "polygamma": {
            "code": "torch.polygamma(n,input,out=None)→Tensor¶",
            "function_name": "polygamma",
            "args": [
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "polygamma"
            ],
            "tfjs": null,
            "tf": "polygamma"
        },
        "pow": {
            "code": "torch.pow(self,exponent,out=None)→Tensor",
            "function_name": "pow",
            "args": [
                {
                    "name": "self",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "exponent",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "pow"
            ],
            "tfjs": "pow",
            "tf": "pow"
        },
        "real": {
            "code": "torch.real(input,out=None)→Tensor¶",
            "function_name": "real",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "real"
            ],
            "tfjs": "real",
            "tf": "real"
        },
        "reciprocal": {
            "code": "torch.reciprocal(input,out=None)→Tensor¶",
            "function_name": "reciprocal",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "reciprocal"
            ],
            "tfjs": "reciprocal",
            "tf": "reciprocal"
        },
        "remainder": {
            "code": "torch.remainder(input,other,out=None)→Tensor¶",
            "function_name": "remainder",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "remainder"
            ],
            "tfjs": null,
            "tf": null
        },
        "round": {
            "code": "torch.round(input,out=None)→Tensor¶",
            "function_name": "round",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "round"
            ],
            "tfjs": "round",
            "tf": "round"
        },
        "rsqrt": {
            "code": "torch.rsqrt(input,out=None)→Tensor¶",
            "function_name": "rsqrt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rsqrt"
            ],
            "tfjs": "rsqrt",
            "tf": "rsqrt"
        },
        "sign": {
            "code": "torch.sign(input,out=None)→Tensor¶",
            "function_name": "sign",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sign"
            ],
            "tfjs": "sign",
            "tf": "sign"
        },
        "sin": {
            "code": "torch.sin(input,out=None)→Tensor¶",
            "function_name": "sin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sin"
            ],
            "tfjs": "sin",
            "tf": "sin"
        },
        "sinh": {
            "code": "torch.sinh(input,out=None)→Tensor¶",
            "function_name": "sinh",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sinh"
            ],
            "tfjs": "sinh",
            "tf": "sinh"
        },
        "sqrt": {
            "code": "torch.sqrt(input,out=None)→Tensor¶",
            "function_name": "sqrt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "sqrt"
            ],
            "tfjs": "sqrt",
            "tf": "sqrt"
        },
        "tan": {
            "code": "torch.tan(input,out=None)→Tensor¶",
            "function_name": "tan",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tan"
            ],
            "tfjs": "tan",
            "tf": "tan"
        },
        "trunc": {
            "code": "torch.trunc(input,out=None)→Tensor¶",
            "function_name": "trunc",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "trunc"
            ],
            "tfjs": null,
            "tf": null
        },
        "argmax": {
            "code": "torch.argmax(input,dim,keepdim=False)→LongTensor",
            "function_name": "argmax",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "argmax"
            ],
            "tfjs": "argmax",
            "tf": "argmax"
        },
        "argmin": {
            "code": "torch.argmin(input,dim,keepdim=False,out=None)→LongTensor",
            "function_name": "argmin",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "argmin"
            ],
            "tfjs": "argmin",
            "tf": "argmin"
        },
        "dist": {
            "code": "torch.dist(input,other,p=2)→Tensor¶",
            "function_name": "dist",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "p",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "dist"
            ],
            "tfjs": null,
            "tf": null
        },
        "logsumexp": {
            "code": "torch.logsumexp(input,dim,keepdim=False,out=None)¶",
            "function_name": "logsumexp",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis"
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "logsumexp"
            ],
            "tfjs": "logsumexp",
            "tf": null
        },
        "mean": {
            "code": "torch.mean(input,dim,keepdim=False,out=None)→Tensor",
            "function_name": "mean",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "mean"
            ],
            "tfjs": "mean",
            "tf": "mean"
        },
        "median": {
            "code": "torch.median(input)→Tensor",
            "function_name": "median",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "median"
            ],
            "tfjs": null,
            "tf": null
        },
        "prod": {
            "code": "torch.prod(input,dim,keepdim=False,dtype=None)→Tensor",
            "function_name": "prod",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "prod"
            ],
            "tfjs": "prod",
            "tf": "prod"
        },
        "std": {
            "code": "torch.std(input,dim,keepdim=False,unbiased=True)-&gt;(Tensor,Tensor)",
            "function_name": "std",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "std"
            ],
            "tfjs": null,
            "tf": "std"
        },
        "std_mean": {
            "code": "torch.std_mean(input,unbiased=True)-&gt;(Tensor,Tensor)",
            "function_name": "std_mean",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "std_mean"
            ],
            "tfjs": null,
            "tf": null
        },
        "unique": {
            "code": "torch.unique(input,sorted=True,return_inverse=False,return_counts=False,dim=None)¶",
            "function_name": "unique",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "sorted",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "return_inverse",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "return_counts",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "unique"
            ],
            "tfjs": null,
            "tf": "unique"
        },
        "unique_consecutive": {
            "code": "torch.unique_consecutive(input,return_inverse=False,return_counts=False,dim=None)¶",
            "function_name": "unique_consecutive",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "return_inverse",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "return_counts",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "unique_consecutive"
            ],
            "tfjs": null,
            "tf": null
        },
        "var": {
            "code": "torch.var(input,dim,keepdim=False,unbiased=True,out=None)→Tensor",
            "function_name": "var",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "var"
            ],
            "tfjs": null,
            "tf": "var"
        },
        "var_mean": {
            "code": "torch.var_mean(input,dim,keepdim=False,unbiased=True)-&gt;(Tensor,Tensor)",
            "function_name": "var_mean",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unbiased",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "var_mean"
            ],
            "tfjs": null,
            "tf": null
        },
        "eq": {
            "code": "torch.eq(input,other,out=None)→Tensor¶",
            "function_name": "eq",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "eq"
            ],
            "tfjs": "equal",
            "tf": null
        },
        "equal": {
            "code": "torch.equal(input,other)→bool¶",
            "function_name": "equal",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b",
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "equal"
            ],
            "tfjs": "equal",
            "tf": "equal"
        },
        "ge": {
            "code": "torch.ge(input,other,out=None)→Tensor¶",
            "function_name": "ge",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "ge"
            ],
            "tfjs": null,
            "tf": null
        },
        "gt": {
            "code": "torch.gt(input,other,out=None)→Tensor¶",
            "function_name": "gt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "gt"
            ],
            "tfjs": null,
            "tf": null
        },
        "isfinite": {
            "code": "torch.isfinite()¶",
            "function_name": "isfinite",
            "args": [],
            "attrs": [
                "torch",
                "isfinite"
            ],
            "tfjs": "isfinite",
            "tf": null
        },
        "isinf": {
            "code": "torch.isinf(tensor)¶",
            "function_name": "isinf",
            "args": [
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "isinf"
            ],
            "tfjs": "isinf",
            "tf": null
        },
        "isnan": {
            "code": "torch.isnan()¶",
            "function_name": "isnan",
            "args": [],
            "attrs": [
                "torch",
                "isnan"
            ],
            "tfjs": "isnan",
            "tf": null
        },
        "kthvalue": {
            "code": "torch.kthvalue(input,k,dim=None,keepdim=False,out=None)-&gt;(Tensor,LongTensor)¶",
            "function_name": "kthvalue",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "keepdim",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "kthvalue"
            ],
            "tfjs": null,
            "tf": null
        },
        "le": {
            "code": "torch.le(input,other,out=None)→Tensor¶",
            "function_name": "le",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "le"
            ],
            "tfjs": null,
            "tf": null
        },
        "lt": {
            "code": "torch.lt(input,other,out=None)→Tensor¶",
            "function_name": "lt",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "lt"
            ],
            "tfjs": null,
            "tf": null
        },
        "max": {
            "code": "torch.max(input,other,out=None)→Tensor",
            "function_name": "max",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "max"
            ],
            "tfjs": "max",
            "tf": "max"
        },
        "min": {
            "code": "torch.min(input,other,out=None)→Tensor",
            "function_name": "min",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "min"
            ],
            "tfjs": "min",
            "tf": "min"
        },
        "ne": {
            "code": "torch.ne(input,other,out=None)→Tensor¶",
            "function_name": "ne",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "ne"
            ],
            "tfjs": null,
            "tf": null
        },
        "topk": {
            "code": "torch.topk(input,k,dim=None,largest=True,sorted=True,out=None)-&gt;(Tensor,LongTensor)¶",
            "function_name": "topk",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a"
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "k"
                },
                {
                    "name": "dim",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "axis"
                },
                {
                    "name": "largest",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                },
                {
                    "name": "sorted",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": "sorted"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null
                }
            ],
            "attrs": [
                "torch",
                "topk"
            ],
            "tfjs": "topk",
            "tf": null
        },
        "fft": {
            "code": "torch.fft(input,signal_ndim,normalized=False)→Tensor¶",
            "function_name": "fft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "signal_ndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "fft"
            ],
            "tfjs": "fft",
            "tf": "fft"
        },
        "ifft": {
            "code": "torch.ifft(input,signal_ndim,normalized=False)→Tensor¶",
            "function_name": "ifft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": "input"
                },
                {
                    "name": "signal_ndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "ifft"
            ],
            "tfjs": "ifft",
            "tf": "ifft"
        },
        "rfft": {
            "code": "torch.rfft(input,signal_ndim,normalized=False,onesided=True)→Tensor¶",
            "function_name": "rfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": null
                },
                {
                    "name": "signal_ndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "onesided",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rfft"
            ],
            "tfjs": "rfft",
            "tf": "rfft"
        },
        "irfft": {
            "code": "torch.irfft(input,signal_ndim,normalized=False,onesided=True,signal_sizes=None)→Tensor¶",
            "function_name": "irfft",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "input",
                    "tf": null
                },
                {
                    "name": "signal_ndim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "normalized",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "onesided",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "signal_sizes",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "irfft"
            ],
            "tfjs": "irfft",
            "tf": "irfft"
        },
        "bartlett_window": {
            "code": "torch.bartlett_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "bartlett_window",
            "args": [
                {
                    "name": "window_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "bartlett_window"
            ],
            "tfjs": null,
            "tf": null
        },
        "blackman_window": {
            "code": "torch.blackman_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "blackman_window",
            "args": [
                {
                    "name": "window_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "blackman_window"
            ],
            "tfjs": null,
            "tf": null
        },
        "hamming_window": {
            "code": "torch.hamming_window(window_length,periodic=True,alpha=0.54,beta=0.46,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "hamming_window",
            "args": [
                {
                    "name": "window_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "window_length"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "periodic"
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hamming_window"
            ],
            "tfjs": null,
            "tf": "hamming_window"
        },
        "hann_window": {
            "code": "torch.hann_window(window_length,periodic=True,dtype=None,layout=torch.strided,device=None,requires_grad=False)→Tensor¶",
            "function_name": "hann_window",
            "args": [
                {
                    "name": "window_length",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "window_length"
                },
                {
                    "name": "periodic",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "periodic"
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "dtype"
                },
                {
                    "name": "layout",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "device",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "requires_grad",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "hann_window"
            ],
            "tfjs": null,
            "tf": "hann_window"
        },
        "bincount": {
            "code": "torch.bincount(input,weights=None,minlength=0)→Tensor¶",
            "function_name": "bincount",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "weights",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "weights"
                },
                {
                    "name": "minlength",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "minlength"
                }
            ],
            "attrs": [
                "torch",
                "bincount"
            ],
            "tfjs": null,
            "tf": "bincount"
        },
        "broadcast_tensors": {
            "code": "torch.broadcast_tensors(*tensors)→ListofTensors¶",
            "function_name": "broadcast_tensors",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "broadcast_tensors"
            ],
            "tfjs": null,
            "tf": null
        },
        "cartesian_prod": {
            "code": "torch.cartesian_prod(*tensors)¶",
            "function_name": "cartesian_prod",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "cartesian_prod"
            ],
            "tfjs": null,
            "tf": null
        },
        "combinations": {
            "code": "torch.combinations(input,r=2,with_replacement=False)→seq¶",
            "function_name": "combinations",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "r",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "with_replacement",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "combinations"
            ],
            "tfjs": null,
            "tf": null
        },
        "cumprod": {
            "code": "torch.cumprod(input,dim,out=None,dtype=None)→Tensor¶",
            "function_name": "cumprod",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cumprod"
            ],
            "tfjs": null,
            "tf": "cumprod"
        },
        "cumsum": {
            "code": "torch.cumsum(input,dim,out=None,dtype=None)→Tensor¶",
            "function_name": "cumsum",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "axis",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "dtype",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cumsum"
            ],
            "tfjs": "cumsum",
            "tf": "cumsum"
        },
        "diag": {
            "code": "torch.diag(input,diagonal=0,out=None)→Tensor¶",
            "function_name": "diag",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "diagonal",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "diagonal"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "diag"
            ],
            "tfjs": null,
            "tf": "diag"
        },
        "diagflat": {
            "code": "torch.diagflat(input,offset=0)→Tensor¶",
            "function_name": "diagflat",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "offset",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "diagflat"
            ],
            "tfjs": null,
            "tf": null
        },
        "diagonal": {
            "code": "torch.diagonal(input,offset=0,dim1=0,dim2=1)→Tensor¶",
            "function_name": "diagonal",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "offset",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dim1",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "dim2",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "diagonal"
            ],
            "tfjs": null,
            "tf": null
        },
        "einsum": {
            "code": "torch.einsum(equation,*operands)→Tensor¶",
            "function_name": "einsum",
            "args": [
                {
                    "name": "equation",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "equation"
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": ""
                }
            ],
            "attrs": [
                "torch",
                "einsum"
            ],
            "tfjs": null,
            "tf": "einsum"
        },
        "flip": {
            "code": "torch.flip(input,dims)→Tensor¶",
            "function_name": "flip",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "flip"
            ],
            "tfjs": null,
            "tf": null
        },
        "rot90": {
            "code": "torch.rot90(input,k,dims)→Tensor¶",
            "function_name": "rot90",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "k",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "k"
                },
                {
                    "name": "dims",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "rot90"
            ],
            "tfjs": null,
            "tf": "rot90"
        },
        "histc": {
            "code": "torch.histc(input,bins=100,min=0,max=0,out=None)→Tensor¶",
            "function_name": "histc",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "bins",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "min",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "max",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "histc"
            ],
            "tfjs": null,
            "tf": null
        },
        "meshgrid": {
            "code": "torch.meshgrid(*tensors,**kwargs)¶",
            "function_name": "meshgrid",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": ""
                },
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": ""
                }
            ],
            "attrs": [
                "torch",
                "meshgrid"
            ],
            "tfjs": null,
            "tf": "meshgrid"
        },
        "renorm": {
            "code": "torch.renorm(input,p,dim,maxnorm,out=None)→Tensor¶",
            "function_name": "renorm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "p",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "dim",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "maxnorm",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 3
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "renorm"
            ],
            "tfjs": null,
            "tf": null
        },
        "repeat_interleave": {
            "code": "torch.repeat_interleave(repeats)→Tensor",
            "function_name": "repeat_interleave",
            "args": [
                {
                    "name": "repeats",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "repeat_interleave"
            ],
            "tfjs": null,
            "tf": null
        },
        "roll": {
            "code": "torch.roll(input,shifts,dims=None)→Tensor¶",
            "function_name": "roll",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "shifts",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "dims",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "roll"
            ],
            "tfjs": null,
            "tf": "roll"
        },
        "tensordot": {
            "code": "torch.tensordot(a,b,dims=2)¶",
            "function_name": "tensordot",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "a"
                },
                {
                    "name": "b",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": "b"
                },
                {
                    "name": "dims",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "tensordot"
            ],
            "tfjs": null,
            "tf": "tensordot"
        },
        "trace": {
            "code": "torch.trace(input)→Tensor¶",
            "function_name": "trace",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "trace"
            ],
            "tfjs": null,
            "tf": "trace"
        },
        "tril": {
            "code": "torch.tril(input,diagonal=0,out=None)→Tensor¶",
            "function_name": "tril",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "diagonal",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "tril"
            ],
            "tfjs": null,
            "tf": null
        },
        "triu": {
            "code": "torch.triu(input,diagonal=0,out=None)→Tensor¶",
            "function_name": "triu",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "diagonal",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "triu"
            ],
            "tfjs": null,
            "tf": null
        },
        "addbmm": {
            "code": "torch.addbmm(beta=1,input,alpha=1,batch1,batch2,out=None)→Tensor¶",
            "function_name": "addbmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "batch2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "addbmm"
            ],
            "tfjs": null,
            "tf": null
        },
        "addmv": {
            "code": "torch.addmv(beta=1,input,alpha=1,mat,vec,out=None)→Tensor¶",
            "function_name": "addmv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mat",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "addmv"
            ],
            "tfjs": null,
            "tf": null
        },
        "addr": {
            "code": "torch.addr(beta=1,input,alpha=1,vec1,vec2,out=None)→Tensor¶",
            "function_name": "addr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vec1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "vec2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "addr"
            ],
            "tfjs": null,
            "tf": null
        },
        "baddbmm": {
            "code": "torch.baddbmm(beta=1,input,alpha=1,batch1,batch2,out=None)→Tensor¶",
            "function_name": "baddbmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "batch1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "batch2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "beta",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "alpha",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "baddbmm"
            ],
            "tfjs": null,
            "tf": null
        },
        "bmm": {
            "code": "torch.bmm(input,mat2,out=None)→Tensor¶",
            "function_name": "bmm",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "mat2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "bmm"
            ],
            "tfjs": null,
            "tf": null
        },
        "chain_matmul": {
            "code": "torch.chain_matmul(*matrices)¶",
            "function_name": "chain_matmul",
            "args": [
                {
                    "name": "",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                }
            ],
            "attrs": [
                "torch",
                "chain_matmul"
            ],
            "tfjs": null,
            "tf": null
        },
        "cholesky": {
            "code": "torch.cholesky(input,upper=False,out=None)→Tensor¶",
            "function_name": "cholesky",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cholesky"
            ],
            "tfjs": null,
            "tf": "cholesky"
        },
        "cholesky_inverse": {
            "code": "torch.cholesky_inverse(input,upper=False,out=None)→Tensor¶",
            "function_name": "cholesky_inverse",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "cholesky_inverse"
            ],
            "tfjs": null,
            "tf": null
        },
        "cholesky_solve": {
            "code": "torch.cholesky_solve(input,input2,upper=False,out=None)→Tensor¶",
            "function_name": "cholesky_solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "input2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "cholesky_solve"
            ],
            "tfjs": null,
            "tf": "cholesky_solve"
        },
        "dot": {
            "code": "torch.dot(input,tensor)→Tensor¶",
            "function_name": "dot",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "tensor",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "dot"
            ],
            "tfjs": "dot",
            "tf": "dot"
        },
        "eig": {
            "code": "torch.eig(input,eigenvectors=False,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "eig",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "eigenvectors",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "eig"
            ],
            "tfjs": null,
            "tf": "eig"
        },
        "geqrf": {
            "code": "torch.geqrf(input,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "geqrf",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "geqrf"
            ],
            "tfjs": null,
            "tf": null
        },
        "ger": {
            "code": "torch.ger(input,vec2,out=None)→Tensor¶",
            "function_name": "ger",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vec2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "ger"
            ],
            "tfjs": null,
            "tf": null
        },
        "inverse": {
            "code": "torch.inverse(input,out=None)→Tensor¶",
            "function_name": "inverse",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "inverse"
            ],
            "tfjs": null,
            "tf": null
        },
        "det": {
            "code": "torch.det(input)→Tensor¶",
            "function_name": "det",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                }
            ],
            "attrs": [
                "torch",
                "det"
            ],
            "tfjs": null,
            "tf": "det"
        },
        "logdet": {
            "code": "torch.logdet(input)→Tensor¶",
            "function_name": "logdet",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "logdet"
            ],
            "tfjs": null,
            "tf": "logdet"
        },
        "slogdet": {
            "code": "torch.slogdet(input)-&gt;(Tensor,Tensor)¶",
            "function_name": "slogdet",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": "input"
                }
            ],
            "attrs": [
                "torch",
                "slogdet"
            ],
            "tfjs": null,
            "tf": "slogdet"
        },
        "lstsq": {
            "code": "torch.lstsq(input,A,out=None)→Tensor¶",
            "function_name": "lstsq",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lstsq"
            ],
            "tfjs": null,
            "tf": "lstsq"
        },
        "lu": {
            "code": "torch.lu(A,pivot=True,get_infos=False,out=None)¶",
            "function_name": "lu",
            "args": [
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "pivot",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "get_infos",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lu"
            ],
            "tfjs": null,
            "tf": "lu"
        },
        "lu_solve": {
            "code": "torch.lu_solve(input,LU_data,LU_pivots,out=None)→Tensor¶",
            "function_name": "lu_solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "lu_data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "lu_pivots",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "lu_solve"
            ],
            "tfjs": null,
            "tf": "lu_solve"
        },
        "lu_unpack": {
            "code": "torch.lu_unpack(LU_data,LU_pivots,unpack_data=True,unpack_pivots=True)¶",
            "function_name": "lu_unpack",
            "args": [
                {
                    "name": "lu_data",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "lu_pivots",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "unpack_data",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "unpack_pivots",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "lu_unpack"
            ],
            "tfjs": null,
            "tf": null
        },
        "matmul": {
            "code": "torch.matmul(input,other,out=None)→Tensor¶",
            "function_name": "matmul",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": null
                },
                {
                    "name": "other",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tfjs": "b",
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "matmul"
            ],
            "tfjs": "matmul",
            "tf": "matmul"
        },
        "matrix_power": {
            "code": "torch.matrix_power(input,n)→Tensor¶",
            "function_name": "matrix_power",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "n",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "matrix_power"
            ],
            "tfjs": null,
            "tf": null
        },
        "matrix_rank": {
            "code": "torch.matrix_rank(input,tol=None,symmetric=False)→Tensor¶",
            "function_name": "matrix_rank",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "tol",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "tol"
                },
                {
                    "name": "symmetric",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "matrix_rank"
            ],
            "tfjs": null,
            "tf": "matrix_rank"
        },
        "mv": {
            "code": "torch.mv(input,vec,out=None)→Tensor¶",
            "function_name": "mv",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "vec",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "mv"
            ],
            "tfjs": null,
            "tf": null
        },
        "orgqr": {
            "code": "torch.orgqr(input,input2)→Tensor¶",
            "function_name": "orgqr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "orgqr"
            ],
            "tfjs": null,
            "tf": null
        },
        "ormqr": {
            "code": "torch.ormqr(input,input2,input3,left=True,transpose=False)→Tensor¶",
            "function_name": "ormqr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "input2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                },
                {
                    "name": "input3",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 2
                },
                {
                    "name": "left",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "transpose",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "ormqr"
            ],
            "tfjs": null,
            "tf": null
        },
        "qr": {
            "code": "torch.qr(input,some=True,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "qr",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tfjs": "a",
                    "tf": "input"
                },
                {
                    "name": "some",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tfjs": null,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "qr"
            ],
            "tfjs": "qr",
            "tf": "qr"
        },
        "solve": {
            "code": "torch.solve(input,A,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "solve"
            ],
            "tfjs": null,
            "tf": "solve"
        },
        "svd": {
            "code": "torch.svd(input,some=True,compute_uv=True,out=None)-&gt;(Tensor,Tensor,Tensor)¶",
            "function_name": "svd",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "some",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "compute_uv",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": "compute_uv"
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "svd"
            ],
            "tfjs": null,
            "tf": "svd"
        },
        "symeig": {
            "code": "torch.symeig(input,eigenvectors=False,upper=True,out=None)-&gt;(Tensor,Tensor)¶",
            "function_name": "symeig",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "eigenvectors",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true
                },
                {
                    "name": "out",
                    "is_kwarg": true,
                    "optional": true
                }
            ],
            "attrs": [
                "torch",
                "symeig"
            ],
            "tfjs": null,
            "tf": null
        },
        "trapz": {
            "code": "torch.trapz()¶",
            "function_name": "trapz",
            "args": [],
            "attrs": [
                "torch",
                "trapz"
            ],
            "tfjs": null,
            "tf": null
        },
        "triangular_solve": {
            "code": "torch.triangular_solve(input,A,upper=True,transpose=False,unitriangular=False)-&gt;(Tensor,Tensor)¶",
            "function_name": "triangular_solve",
            "args": [
                {
                    "name": "input",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0,
                    "tf": null
                },
                {
                    "name": "a",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1,
                    "tf": null
                },
                {
                    "name": "upper",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "transpose",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                },
                {
                    "name": "unitriangular",
                    "is_kwarg": true,
                    "optional": true,
                    "tf": null
                }
            ],
            "attrs": [
                "torch",
                "triangular_solve"
            ],
            "tfjs": null,
            "tf": "triangular_solve"
        },
        "compiled_with_cxx11_abi": {
            "code": "torch.compiled_with_cxx11_abi()¶",
            "function_name": "compiled_with_cxx11_abi",
            "args": [],
            "attrs": [
                "torch",
                "compiled_with_cxx11_abi"
            ],
            "tfjs": null,
            "tf": null
        },
        "result_type": {
            "code": "torch.result_type(tensor1,tensor2)→dtype¶",
            "function_name": "result_type",
            "args": [
                {
                    "name": "tensor1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "tensor2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "result_type"
            ],
            "tfjs": null,
            "tf": null
        },
        "can_cast": {
            "code": "torch.can_cast(from,to)→bool¶",
            "function_name": "can_cast",
            "args": [
                {
                    "name": "from",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "to",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "can_cast"
            ],
            "tfjs": null,
            "tf": null
        },
        "promote_types": {
            "code": "torch.promote_types(type1,type2)→dtype¶",
            "function_name": "promote_types",
            "args": [
                {
                    "name": "type1",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 0
                },
                {
                    "name": "type2",
                    "is_kwarg": false,
                    "optional": false,
                    "index": 1
                }
            ],
            "attrs": [
                "torch",
                "promote_types"
            ],
            "tfjs": null,
            "tf": null
        }
    }
}